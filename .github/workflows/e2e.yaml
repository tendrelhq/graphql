name: end to end tests

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: ${{ !github.event.pull_request.draft }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      # - name: bake
      #   uses: docker/bake-action@v6
      #   with:
      #     files: |
      #       .github/docker-compose-cache.json
      #       docker-compose.yaml
      - uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tags: tag:test
      - uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            accept-flake-config = true
      - id: check-cache
        uses: actions/cache/restore@v4
        with:
          path: db.dump
          key: ${{ runner.os }}-db-dump-2025-05-22
      - name: dump
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: nix develop -c just dump
        env:
          PGDATABASE: ${{ secrets.TEST_PGDATABASE }}
          PGHOST: ${{ secrets.TEST_PGHOST }}
          PGPASSWORD: ${{ secrets.TEST_PGPASSWORD }}
          PGUSER: ${{ secrets.TEST_PGUSER }}
      - if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: db.dump
          key: ${{ steps.check-cache.outputs.cache-primary-key }}
      - name: restore
        run: nix develop -c just restore
        env:
          PGHOST: localhost
          PGDATABASE: ci
          PGUSER: postgres
          PGPASSWORD: postgres
      - name: migrate
        run: nix develop -c just migrate
        env:
          PGUSER: postgres
          PGPASSWORD: postgres
          SQITCH_TARGET: ci
      - name: analyze
        run: nix develop -c psql -c 'analyze;'
        env:
          PGHOST: localhost
          PGDATABASE: ci
          PGUSER: postgres
          PGPASSWORD: postgres
      - name: install
        run: nix develop -c just install
      - name: generate
        run: nix develop -c just generate
      - name: setup
        run: echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" > .env.local
      - name: up
        run: docker compose up --build --wait
        env:
          COMPOSE_BAKE: true
      - name: test
        run: nix develop -c just test
        env:
          PGHOST: localhost
          PGDATABASE: ci
          PGUSER: graphql
          PGPASSWORD: graphql
          X_TENDREL_USER: user_2jJ7Xl0LFewQGKKNYwfFWAM0Lmc
      - name: simulator # FIXME: This is currently broken in CI :(
        if: success()
        continue-on-error: true
        run: nix develop -c bun simulator:start
        env:
          # The simulator doesn't quite have full api support yet :/
          PGHOST: localhost
          PGDATABASE: ci
          PGUSER: postgres
          PGPASSWORD: postgres
          # TODO: move this to a matrix and run multiple simulations
          SKIP_OWNER_PROMPT: true
          AUTO_SELECT_TEMPLATE: Run
          PRINT_CONFIG: true
          # FIXME: this is a rather crude measure to exit "successfully" :D
          TIMEOUT: 2m
          X_TENDREL_USER: user_2jJ7Xl0LFewQGKKNYwfFWAM0Lmc
      - name: dump logs
        run: docker compose logs --no-color > compose.log
        if: always()
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compose.log
          path: compose.log
          retention-days: 1
