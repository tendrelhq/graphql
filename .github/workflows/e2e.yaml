name: end to end tests

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: ${{ !github.event.pull_request.draft }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            accept-flake-config = true
      - uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tags: tag:test
      - id: check-cache
        uses: actions/cache/restore@v4
        with:
          path: db.dump
          key: ${{ runner.os }}-db-dump-2025-05-14
      - if: steps.check-cache.outputs.cache-hit != 'true'
        run: nix develop -c just dump
        env:
          PGDATABASE: ${{ secrets.TEST_PGDATABASE }}
          PGHOST: ${{ secrets.TEST_PGHOST }}
          PGPASSWORD: ${{ secrets.TEST_PGPASSWORD }}
          PGUSER: ${{ secrets.TEST_PGUSER }}
      - if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: db.dump
          key: ${{ steps.check-cache.outputs.cache-primary-key }}
      - run: nix develop -c just restore
        env:
          PGHOST: localhost
          PGDATABASE: ci
          PGUSER: postgres
          PGPASSWORD: postgres
      - run: nix develop -c just target=ci migrate
        env:
          PGPASSWORD: postgres
          PGUSER: postgres
      - run: nix develop -c just install
      - name: nix develop -c docker compose up
        run: |
          touch .env.local
          echo "CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}" >> .env.local
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> .env.local
          echo "NODE_ENV=development" >> .env.local
          echo "PGDATABASE=ci" >> .env.local
          echo "PGHOST=localhost" >> .env.local
          echo "PGRST_JWT_SECRET=\"${{ secrets.PGRST_JWT_SECRET }}\"" >> .env.local
          echo "STAGE=dev" >> .env.local
          nix develop -c docker compose up --build --wait
      # - run: nix develop -c just test # pgTAP is not installed :(
      - run: nix develop -c bun test
        env:
          PGHOST: localhost
          PGDATABASE: ci
          PGUSER: graphql
          PGPASSWORD: graphql
          X_TENDREL_USER: user_2jJ7Xl0LFewQGKKNYwfFWAM0Lmc
