enum AuthenticationProvider {
  legacy
  clerk
}

enum LanguageCode {
  en
  es
}

type Language {
  id: ID!
  code: LanguageCode!
  name: Name!
  name_id: ID!
}

type Name {
  id: ID!
  language: Language!
  language_id: ID!
  value: String!
}

type Tag {
  id: ID!
  name: Name!
  name_id: ID!
  type: String!
  parent: Tag
  parent_id: ID
}

type Customer {
  id: ID!
  active: Boolean!
  name: Name!
  name_id: ID!
  defaultLanguage: Language!
  default_language_id: ID!
}

type Location {
  id: ID!
  active: Boolean!
  activated_at: String
  deactivated_at: String
  name: Name!
  name_id: ID!
  parent: Location
  parent_id: ID
  scan_code: ID
  site: Location!
  site_id: ID!
  tags: [Tag!]!

  children(options: LocationsQueryOptions): [Location!]!
}

type User {
  id: ID!
  active: Boolean!
  activated_at: String
  deactivated_at: String
  authentication_provider: Tag
  authentication_provider_id: ID
  language: Language!
  language_id: ID!
  name: String!
  tags: [Tag!]!
}

type Worker {
  id: ID!
  active: Boolean!
  activated_at: String
  deactivated_at: String
  language: Language!
  language_id: ID!
  role: Tag!
  role_id: ID!
  scan_code: String
  tags: [Tag!]!
  user: User!
  user_id: ID!
}

type Query {
  customers: [Customer!]!
  customer(id: ID!): Customer!
  languages: [Language!]!
  locations(customerId: ID!, options: LocationsQueryOptions): [Location!]!
  location(id: ID!): Location!
  roles: [Tag!]!
  workers(customerId: ID!, options: WorkersQueryOptions): [Worker!]!
}

input LocationsQueryOptions {
  cornerstone: Boolean
  site: Boolean
}

input WorkersQueryOptions {
  active: Boolean
  site: ID
}

type Mutation {
  # Location CRUD
  createLocation(input: CreateLocationInput!): Location!
  updateLocation(input: UpdateLocationInput!): Location!

  # User
  ## CRUD
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  ## Helpers
  acceptInvite(input: AcceptInviteInput!): User!

  # Worker CRUD
  createWorker(input: CreateWorkerInput!): Worker!
  updateWorker(input: UpdateWorkerInput!): Worker!
}

input CreateLocationInput {
  id: ID
  active: Boolean!
  name: CreateNameInput!
  org_id: ID!
  scan_code: ID
}

input UpdateLocationInput {
  id: ID!
  activated_at: String
  deactivated_at: String
  name: UpdateNameInput
  scan_code: ID
}

input CreateUserInput {
  id: ID
  active: Boolean!
  authentication_provider_id: ID
  authentication_identity: ID
  language_id: ID!
  name: String!
}

input UpdateUserInput {
  id: ID!
  authentication_provider_id: ID
  authentication_identity: ID
  language_id: ID!
  name: String!
}

input CreateWorkerInput {
  id: ID
  active: Boolean!
  language_id: ID!
  org_id: ID!
  role_id: ID!
  scan_code: ID
  user_id: ID!
}

input UpdateWorkerInput {
  id: ID!
  activated_at: String
  deactivated_at: String
  language_id: ID!
  role_id: ID!
  scan_code: ID
}

input CreateNameInput {
  id: ID
  active: Boolean!
  language_id: ID!
  value: String!
}

input UpdateNameInput {
  id: ID!
  activated_at: String
  deactivated_at: String
  language_id: ID!
  value: String!
}

input AcceptInviteInput {
  id: ID!
  authentication_identity: ID!
}