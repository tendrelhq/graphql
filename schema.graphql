directive @semanticNonNull(levels: [Int] = [0]) on FIELD_DEFINITION

input AcceptInvitationInput {
  authenticationIdentityId: ID!
  workerId: ID!
}

"""
TODO
"""
type Activatable implements Component {
  active: Boolean!
  id: ID!
  updatedAt: Temporal
}

"""
TODO
"""
input ActivatableInput {
  active: Boolean!
  id: ID!
  updatedAt: TemporalInput!
}

type ActivationStatus {
  activatedAt: String
  active: Boolean!
  deactivatedAt: String
}

interface Assignable implements Component {
  id: ID!
}

"""
TODO
"""
type Assignee implements Component {
  assignedAt: Temporal!
  assignedTo: Assignable!
  id: ID!
}

type AssigneeConnection implements Connection {
  edges: [AssigneeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AssigneeEdge implements Edge {
  cursor: String!
  node: Assignee!
}

"""
TODO
"""
input AssigneeInput {
  assignAt: TemporalInput!
  assignTo: ID!
  id: ID!
}

"""
TODO
"""
type Attachment implements Component {
  attachment: String!
  id: ID!
}

type AttachmentConnection implements Connection {
  edges: [AttachmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AttachmentEdge implements Edge {
  cursor: String!
  node: Attachment!
}

"""
TODO
"""
type Auditable implements Component {
  auditable: Boolean!
  id: ID!
}

"""
TODO
"""
input AuditableInput {
  enabled: Boolean!
  id: ID!
}

type AuthenticationStatus {
  canLogin: Boolean!
  invitation: Invitation
}

"""
TODO
"""
enum CalendarNameOptions {
  """
  TODO
  """
  always

  """
  TODO
  """
  auto

  """
  TODO
  """
  critical

  """
  TODO
  """
  never
}

"""
TODO
"""
type CheckboxWidget implements Component {
  checked: Boolean
  id: ID!
}

"""
TODO
"""
input CheckboxWidgetInput {
  checked: Boolean
  id: ID!
}

type Checklist implements Component & Node {
  active: Activatable
  assignees(
    after: String
    before: String
    first: Int
    last: Int
  ): AssigneeConnection!
  attachments(
    after: String
    before: String
    first: Int
    last: Int
  ): AttachmentConnection!
  auditable: Auditable
  children(
    after: String
    before: String
    first: Int
    last: Int
    search: ChecklistSearchOptions
  ): ChecklistConnection!
  description: Description
  id: ID!
  items(
    after: String
    before: String
    first: Int
    last: Int
  ): ChecklistItemConnection!
  metadata: Metadata!
  name: DisplayName!
  required: Boolean
  schedule: Schedule
  sop: Sop
  status: ChecklistStatus
}

type ChecklistClosed implements Component {
  closedAt: Temporal!
  closedBecause: ChecklistClosedReason
  closedBy: Identity
  dueAt: Temporal
  id: ID!
}

input ChecklistClosedInput {
  at: TemporalInput!
  because: ChecklistClosedReasonInput
  by: ID
  id: ID!
}

type ChecklistClosedReason {
  code: ChecklistClosedReasonCode!
  note: DynamicString
}

enum ChecklistClosedReasonCode {
  error
  success
}

input ChecklistClosedReasonInput {
  code: ChecklistClosedReasonCode!
  note: DynamicStringInput
}

type ChecklistConnection implements Connection {
  edges: [ChecklistEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistEdge implements Edge {
  cursor: String!
  node: Checklist!
}

type ChecklistInProgress implements Component {
  dueAt: Temporal
  id: ID!
  inProgressAt: Temporal!
  inProgressBy: Identity
}

input ChecklistInProgressInput {
  at: TemporalInput!
  by: ID
  id: ID!
}

input ChecklistInput {
  active: ActivatableInput
  assignees: [AssigneeInput!]
  auditable: AuditableInput
  customerId: ID!
  description: DescriptionInput
  id: ID!
  items: [ChecklistItemInput!]
  name: DisplayNameInput!
  required: Boolean
  schedule: ScheduleInput
  sop: SopInput
  status: ChecklistStatusInput
}

union ChecklistItem = Checklist | ChecklistResult

type ChecklistItemConnection implements Connection {
  edges: [ChecklistItemEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistItemEdge implements Edge {
  cursor: String!
  node: ChecklistItem!
}

input ChecklistItemInput @oneOf {
  checklist: ChecklistInput
  result: ChecklistResultInput
}

type ChecklistOpen implements Component {
  dueAt: Temporal
  id: ID!
  openedAt: Temporal!
  openedBy: Identity
}

input ChecklistOpenInput {
  at: TemporalInput!
  by: ID
  id: ID!
}

"""
TODO
"""
type ChecklistResult implements Component {
  assignees(
    after: String
    before: String
    first: Int
    last: Int
  ): AssigneeConnection!
  attachments(
    after: String
    before: String
    first: Int
    last: Int
  ): AttachmentConnection!
  auditable: Auditable
  id: ID!
  name: DisplayName!
  required: Boolean
  status: ChecklistStatus
  widget: Widget!
}

"""
TODO
"""
input ChecklistResultInput {
  assignees: [AssigneeInput!]
  auditable: AuditableInput
  id: ID!
  name: DisplayNameInput!
  required: Boolean
  status: ChecklistStatusInput
  widget: WidgetInput!
}

input ChecklistSearchOptions {
  active: Boolean
  status: [ChecklistStatusSearchOptions!]
}

union ChecklistStatus = ChecklistClosed | ChecklistInProgress | ChecklistOpen

input ChecklistStatusInput @oneOf {
  closed: ChecklistClosedInput
  inProgress: ChecklistInProgressInput
  open: ChecklistOpenInput
}

enum ChecklistStatusSearchOptions {
  closed
  inProgress
  open
}

"""
TODO
"""
type ClickerWidget implements Component {
  count: Int
  id: ID!
}

"""
TODO
"""
input ClickerWidgetInput {
  count: Int
  id: ID!
}

"""
Components characterize Entities as possessing a particular trait.
They are just simple structs, holding all data necessary to model that trait.
"""
interface Component {
  id: ID!
}

type ComponentConnection implements Connection {
  edges: [ComponentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ComponentEdge implements Edge {
  cursor: String!
  debug: DebugInfo!
  node: Component!
}

interface Connection {
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Data type for tracking an incrementable/decrementable integer value.
Counters have two operations: increment and decrement.
"""
type Counter {
  count: Int
}

input CreateInvitationInput {
  emailAddress: String!
  orgId: ID!
  redirectUrl: String
  workerId: ID!
}

input CreateLocationInput {
  active: Boolean!
  id: ID
  name: CreateNameInput!
  orgId: ID!
  scanCode: ID
}

input CreateNameInput {
  active: Boolean!
  id: ID
  languageId: ID!
  value: String!
}

input CreateUserInput {
  active: Boolean!
  displayName: String
  firstName: String!
  identityId: String!
  lastName: String!
  username: String
}

input CreateWorkerInput {
  active: Boolean!
  displayName: String
  firstName: String!
  id: ID
  languageId: ID!
  lastName: String!
  orgId: ID!
  roleId: ID!
  scanCode: ID
  userId: ID
}

"""
A string representing a cron schedule expression
"""
scalar CronExpression

"""
Schedule implementation using cron expressions
"""
type CronSchedule {
  cron: CronExpression!
}

type DebugInfo {
  createdAt: String!
  updatedAt: String!
  updatedBy: Identity
}

"""
TODO
"""
type Description implements Component {
  description: DynamicString!
  id: ID!
}

"""
TODO
"""
input DescriptionInput {
  id: ID!
  value: DynamicStringInput!
}

"""
TODO
"""
type DisplayName implements Component {
  id: ID!
  name: DynamicString!
}

"""
TODO
"""
input DisplayNameInput {
  id: ID!
  value: DynamicStringInput!
}

scalar Duration

"""
TODO
"""
type DurationWidget implements Component {
  duration: Duration
  id: ID!
}

"""
TODO
"""
input DurationWidgetInput {
  duration: Duration
  id: ID!
}

"""
TODO
"""
type DynamicString {
  locale: Locale!
  value: String!
}

"""
TODO
"""
input DynamicStringInput {
  locale: Locale!
  value: String!
}

interface Edge {
  cursor: String!
}

type EnabledLanguage implements Node {
  active: ActivationStatus!
  id: ID!
  language: Language!
  languageId: ID!
  primary: Boolean!
}

type EnabledLanguageConnection {
  edges: [EnabledLanguageEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EnabledLanguageEdge {
  cursor: String!
  node: EnabledLanguage!
}

input EnabledLanguageSearchOptions {
  active: Boolean
  primary: Boolean
}

type EntityConnection {
  components(
    after: String
    before: String
    first: Int
    last: Int
  ): ComponentConnection!
  entity: ID!
}

"""
Data type for tracking Boolean-like values in the form of "enabled" or
"disabled".
Flags only support two operations: enable and disable.
"""
type Flag {
  enabled: Boolean
}

type Geography {
  geog: String
}

interface Identity implements Component {
  id: ID!
}

"""
Fixed point in time (i.e. "exact time") without regard to calendar or location
"""
type Instant implements Temporal {
  """
  Milliseconds since the UNIX epoch of 1/1/1970 00:00+00
  """
  epochMilliseconds: String!

  """
  Convert an Instant to a ZonedDateTime
  """
  toZonedDateTime(timeZone: TimeZone!): ZonedDateTime
}

input InstantToStringOptions {
  """
  How many digits to print after the decimal point in the output string
  """
  fractionalSecondDigits: Int

  """
  How to handle the remainder
  """
  roundingMode: RoundingMode

  """
  The smallest unit of time to include in the output string
  """
  smallestUnit: SmallestTimeUnit

  """
  The time zone to express the Instant/ZonedDateTime in
  """
  timeZone: TimeZone
}

type Invitation {
  createdAt: String!
  emailAddress: String!
  id: ID!
  status: InvitationStatus!
  updatedAt: String!
  workerId: ID!
}

enum InvitationStatus {
  accepted
  pending
  revoked
}

type Language {
  code: String!
  id: ID!
  name: Name!
  nameId: ID!
}

scalar Locale

type Location implements Component & Referenceable {
  active: ActivationStatus!
  children(options: LocationsQueryOptions): [Location!]!
  id: ID!
  name: Name!
  nameId: ID!
  parent: Location
  parentId: ID
  scanCode: ID
  site: Location!
  siteId: ID!
  tags: [Tag!]!
  timeZone: String!
}

type LocationConnection {
  edges: [LocationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LocationEdge {
  cursor: String!
  node: Location!
}

input LocationSearchOptions {
  active: Boolean
  isSite: Boolean
}

input LocationsQueryOptions {
  cornerstone: Boolean
  site: Boolean
}

"""
Metadata pertaining to an individual Entity, e.g. when it was last updated and
by whom.
"""
type Metadata {
  updatedAt: Temporal!
  updatedBy: Identity
}

"""
TODO
"""
type MultilineStringWidget implements Component {
  id: ID!
  text: String
}

"""
TODO
"""
input MultilineStringWidgetInput {
  id: ID!
  text: String
}

type Mutation {
  acceptInvitation(input: AcceptInvitationInput!): Worker!
  activate(entity: ID!): Activatable
  activateWorker(id: ID!): Worker!
  createEntity(id: String, suffix: [String!], type: String!): ID!
  createInvitation(input: CreateInvitationInput!): Worker!
  createLocation(input: CreateLocationInput!): Location!
  createUser(input: CreateUserInput!): User!
  createWorker(input: CreateWorkerInput!): WorkerEdge!
  deactivate(entity: ID!): Activatable
  deactivateWorker(id: ID!): Worker!
  disableLanguage(languageId: ID!, orgId: ID!): EnabledLanguageEdge!
  enableLanguage(languageId: ID!, orgId: ID!): EnabledLanguageEdge!
  saveChecklist(input: ChecklistInput!): ChecklistEdge!
  signUp(input: SignUpInput!): User!
  updateLocation(input: UpdateLocationInput!): Location!
  updateName(input: UpdateNameInput!): Name!
  updateUser(input: UpdateUserInput!): User!
  updateWorker(input: UpdateWorkerInput!): WorkerEdge!
}

type Name implements Node {
  id: ID!
  language: Language!
  languageId: ID!
  metadata: NameMetadata!
  value: String!
}

type NameMetadata {
  nameId: ID!
  sourceLanguage: Language!
  sourceLanguageId: ID!
  sourceText: String!
  translatedAt: String!
}

interface Node {
  id: ID!
}

"""
TODO
"""
type NumberWidget implements Component {
  id: ID!
  number: Int
}

"""
TODO
"""
input NumberWidgetInput {
  id: ID!
  number: Int
}

"""
TODO
"""
enum OffsetOptions {
  """
  TODO
  """
  auto

  """
  TODO
  """
  never
}

"""
Schedule implementation for "oneshot" events
"""
type OnceSchedule {
  once: Temporal!
}

type Organization implements Node {
  activatedAt: String
  active: Boolean!
  billingId: String
  checklists(
    after: String
    before: String
    first: Int
    last: Int
    search: ChecklistSearchOptions
  ): ChecklistConnection!
  deactivatedAt: String
  id: ID!
  languages(
    after: String
    before: String
    first: Int
    last: Int
    search: EnabledLanguageSearchOptions
  ): EnabledLanguageConnection!
  locations(
    after: String
    before: String
    first: Int
    last: Int
    search: LocationSearchOptions
  ): LocationConnection!
  me: Worker!
  name: Name!
  nameId: ID!
  workers(
    after: String
    before: String
    first: Int
    last: Int
    search: WorkerSearchOptions
  ): WorkerConnection!
}

type OrganizationConnection {
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationEdge {
  node: Organization!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  entity(id: ID!): EntityConnection!
  languages: [Language!]!
  node(id: ID!): Node!
  roles: [Tag!]!
  user: User!
}

"""
Data type for tracking references to other object.
"""
type Reference {
  ref: Referenceable
}

"""
TODO
"""
type ReferenceWidget implements Component {
  id: ID!
  possibleTypes: [String!]
  ref: Referenceable
}

"""
TODO
"""
input ReferenceWidgetInput {
  id: ID!
  possibleTypes: [String!]
  ref: ID
}

interface Referenceable implements Component {
  id: ID!
}

"""
Data type for tracking named binaries (like strings). Any binary value can act
as the value of a register. Registers can only have the binaries stored within
them changed.
"""
type Register {
  binary: String
}

type Requirement implements Component {
  id: ID!
  requires: ID!
}

"""
Controls how rounding is performed
"""
enum RoundingMode {
  """
  Always round up, towards the end of time
  """
  ceil

  """
  Always round down, towards the beginning of time
  """
  floor
}

"""
TODO
"""
union Schedule = CronSchedule | OnceSchedule

"""
TODO
"""
input ScheduleInput @oneOf {
  cron: String
  once: TemporalInput
}

"""
TODO
"""
enum ScheduleType {
  CronSchedule
  OnceSchedule
}

enum Sentiment {
  negative
  neutral
  positive
}

"""
TODO
"""
type SentimentWidget implements Component {
  id: ID!
  sentiment: Sentiment
}

"""
TODO
"""
input SentimentWidgetInput {
  id: ID!
  sentiment: Sentiment
}

input SignUpInput {
  active: Boolean!
  displayName: String
  firstName: String!
  identityId: String!
  lastName: String!
  username: String
}

enum SmallestTimeUnit {
  millisecond
  minute
  second
}

"""
TODO
"""
type Sop implements Component {
  id: ID!
  sop: URL!
}

"""
TODO
"""
input SopInput {
  id: ID!
  link: URL!
}

"""
Defines the sort order for queries that support edge ordering.
Ordering depends on the scalar type:
  - Boolean scalars are sorted false < true
  - Int scalars are sorted numerically
  - String scalars are sorted lexicographically
"""
enum SortOrder {
  asc
  desc
}

"""
TODO
"""
type StringWidget implements Component {
  id: ID!
  string: String
}

"""
TODO
"""
input StringWidgetInput {
  id: ID!
  string: String
}

type Tag {
  id: ID!
  name: Name!
  nameId: ID!
  parent: Tag
  parentId: ID
  type: String!
}

interface Temporal {
  """
  Milliseconds since the UNIX epoch of 1/1/1970 00:00+00
  """
  epochMilliseconds: String!
}

input TemporalInput @oneOf {
  instant: String
  zdt: ZonedDateTimeInput
}

"""
TODO
"""
type TemporalWidget implements Component {
  id: ID!
  temporal: Temporal
}

"""
TODO
"""
input TemporalWidgetInput {
  id: ID!
  temporal: TemporalInput
}

scalar TimeZone

"""
TODO
"""
enum TimeZoneNameOptions {
  """
  TODO
  """
  auto

  """
  TODO
  """
  critical

  """
  TODO
  """
  never
}

scalar URL

input UpdateLocationInput {
  activatedAt: String
  deactivatedAt: String
  id: ID!
  name: UpdateNameInput
  scanCode: ID
}

input UpdateNameInput {
  activatedAt: String
  deactivatedAt: String
  id: ID!
  languageId: ID!
  value: String!
}

input UpdateUserInput {
  displayName: String
  firstName: String!
  id: ID!
  languageId: ID!
  lastName: String!
}

input UpdateWorkerInput {
  active: Boolean
  displayName: String
  firstName: String
  id: ID!
  languageId: ID
  lastName: String
  roleId: ID
  scanCode: ID
}

type User implements Node {
  activatedAt: String
  active: Boolean!
  authenticationIdentityId: ID
  authenticationProvider: Tag
  authenticationProviderId: ID
  deactivatedAt: String
  displayName: String!
  firstName: String!
  id: ID!
  language: Language!
  languageId: ID!
  lastName: String!
  organizations(
    after: String
    before: String
    first: Int
    last: Int
  ): OrganizationConnection!
  tags: [Tag!]!
}

input UserSearchOptions {
  displayName: String
}

"""
TODO
"""
union Widget =
  | CheckboxWidget
  | ClickerWidget
  | DurationWidget
  | MultilineStringWidget
  | NumberWidget
  | ReferenceWidget
  | SentimentWidget
  | StringWidget
  | TemporalWidget

"""
TODO
"""
input WidgetInput @oneOf {
  checkbox: CheckboxWidgetInput
  clicker: ClickerWidgetInput
  duration: DurationWidgetInput
  multiline: MultilineStringWidgetInput
  number: NumberWidgetInput
  reference: ReferenceWidgetInput
  sentiment: SentimentWidgetInput
  string: StringWidgetInput
  temporal: TemporalWidgetInput
}

type Worker implements Assignable & Component & Identity & Referenceable {
  _hack_numeric_id: Int!
  active: ActivationStatus!
  auth: AuthenticationStatus!
  displayName: String!
  firstName: String!
  id: ID!
  language: Language!
  languageId: ID!
  lastName: String!
  organizationId: ID!
  role: Tag!
  roleId: ID!
  scanCode: String
  tags: [Tag!]!
  user: User!
  userId: ID!
}

type WorkerConnection {
  edges: [WorkerEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WorkerEdge {
  cursor: String!
  node: Worker!
}

input WorkerSearchOptions {
  active: Boolean
  user: UserSearchOptions
}

input WorkersQueryOptions {
  active: Boolean
  site: ID
}

"""
Timezone-aware, calendar-aware date/time object representing an exact time
from the perspective of a particular geographic region
"""
type ZonedDateTime implements Temporal {
  day: Int

  """
  Milliseconds since the UNIX epoch of 1/1/1970 00:00+00
  """
  epochMilliseconds: String!
  hour: Int
  millisecond: Int
  minute: Int
  month: Int
  second: Int
  timeZone: TimeZone!

  """
  Convert a ZonedDateTime to an ISO 8601 string
  """
  toString(options: ZonedDateTimeToStringOptions): String
  year: Int
}

input ZonedDateTimeInput {
  epochMilliseconds: String!
  timeZone: TimeZone!
}

input ZonedDateTimeToStringOptions {
  calendarName: CalendarNameOptions

  """
  How many digits to print after the decimal point in the output string
  """
  fractionalSecondDigits: Int
  offset: OffsetOptions

  """
  How to handle the remainder
  """
  roundingMode: RoundingMode

  """
  The smallest unit of time to include in the output string
  """
  smallestUnit: SmallestTimeUnit
  timeZoneName: TimeZoneNameOptions
}
