type Query {
  checklists(first: Int, last: Int, before: String, after: String): ChecklistConnection!
}

type Checklist implements Component {
  id: Entity!
  active: Activatable!
  assignees(first: Int, last: Int, before: String, after: String): AssigneeConnection!
  attachments(first: Int, last: Int, before: String, after: String): AttachmentConnection!
  auditable: Auditable!
  description: Description
  items(first: Int, last: Int, before: String, after: String): ChecklistConnection!
  name: DisplayName!
  required: Boolean
  schedule: Schedule
  sop: Sop
  status: ChecklistStatus!
  # TODO: not sure about this... :/
  children: ChecklistConnection!
}

type ChecklistConnection implements Connection {
  edges: [ChecklistEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistEdge implements Edge {
  cursor: String!
  node: ChecklistItem!
}

## We want our checklists to support nesting
union ChecklistItem = Checklist | ChecklistResult
type ChecklistResult implements Component {
  id: Entity!
  assignees(first: Int, last: Int, before: String, after: String): AssigneeConnection!
  auditable: Auditable!
  attachments(first: Int, last: Int, before: String, after: String): AttachmentConnection!
  name: DisplayName!
  required: Boolean
  value: ChecklistResultValue!
}

union ChecklistResultValue = Counter | Flag | Register

## Our checklists go Open > In Progress > Closed
union ChecklistStatus = ChecklistOpen | ChecklistInProgress | ChecklistClosed
type ChecklistOpen implements Component {
  id: Entity!
  openedBy: Actor
  openedAt: Temporal!
}
type ChecklistInProgress implements Component {
  id: Entity!
  inProgressBy: Actor!
  inProgressAt: Temporal!
}
type ChecklistClosed implements Component {
  id: Entity!
  closedBy: Actor!
  closedAt: Temporal!
  closedBecause: ChecklistClosedReason!
}
type ChecklistClosedReason {
  code: ChecklistClosedReasonCode!
  note: DynamicString
}
enum ChecklistClosedReasonCode {
  success
  error
}
