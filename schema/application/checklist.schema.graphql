# extend type Organization {
#   checklists(
#     first: Int
#     last: Int
#     before: String
#     after: String
#     search: ChecklistSearchOptions
#   ): ChecklistConnection! @deprecated(reason: "use Query.checklists instead")
# }

input ChecklistSortOrder @oneOf {
  name: SortOrder
  status: SortOrder
}

type Query {
  checklists(
    parent: ID!
    first: Int
    last: Int
    after: String
    before: String
    sortBy: [ChecklistSortOrder!]
    withActive: Boolean
    withAssignee: [ID!]
    withDueDate: TemporalRangeInput
    withName: String
    withStatus: [ChecklistStatusStates!]
  ): ChecklistConnection!

  checklistAgg: ChecklistAggregate!
}

type ChecklistAggregate {
  assignedTo(parent: ID!, assignees: [ID!]!): Int @semanticNonNull
  dueOn(parent: ID!, input: TemporalRangeInput!): Int @semanticNonNull
}

type Mutation {
  copyFrom(entity: ID!, options: CopyFromOptions!): CopyFromPayload!
  saveChecklist(input: ChecklistInput!): ChecklistEdge!
  discardChecklist(entity: ID!): DiscardChecklistPayload!
}

type DiscardChecklistPayload {
  discardedChecklistIds: [ID!]!
  edge: ChecklistEdge!
}

type CopyFromPayload {
  edge: ChecklistEdge!
}

input CopyFromOptions {
  withAssignee: [ID!]
  withStatus: ChecklistStatusStates
}

type Checklist implements Component & Activatable & Assignable & Node {
  id: ID!
  active: Active
  assignees(
    first: Int
    last: Int
    before: String
    after: String
  ): AssigneeConnection!
  attachments(
    first: Int
    last: Int
    before: String
    after: String
  ): AttachmentConnection!
  auditable: Auditable
  description: Description
  items(
    first: Int
    last: Int
    before: String
    after: String
  ): ChecklistItemConnection!
  name: DisplayName!
  required: Boolean
  schedule: Schedule
  sop: Sop
  status: ChecklistStatus

  # experimental - subject to change
  parent: Checklist
  children(
    first: Int
    last: Int
    before: String
    after: String
    search: ChecklistSearchOptions
  ): ChecklistConnection!
  metadata: Metadata!
}

input ChecklistInput {
  id: ID!
  active: ActiveInput
  assignees: [AssigneeInput!]
  auditable: AuditableInput
  customerId: ID!
  description: DescriptionInput
  items: [ChecklistItemInput!]
  name: DisplayNameInput!
  required: Boolean
  schedule: ScheduleInput
  sop: SopInput
  status: ChecklistStatusInput
}

input ChecklistSearchOptions {
  active: Boolean
  displayName: String
  status: [ChecklistStatusStates!]
}

enum ChecklistStatusStates {
  open
  inProgress
  closed
}

type ChecklistItemConnection implements Connection {
  edges: [ChecklistItemEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistItemEdge implements Edge {
  cursor: String!
  node: ChecklistItem!
}

type ChecklistConnection implements Connection {
  edges: [ChecklistEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistEdge implements Edge {
  cursor: String!
  node: Checklist!
}

## We want our checklists to support nesting
union ChecklistItem = Checklist | ChecklistResult

input ChecklistItemInput @oneOf {
  checklist: ChecklistInput
  result: ChecklistResultInput
}

"""
TODO
"""
type ChecklistResult implements Component & Node {
  id: ID!
  assignees(
    first: Int
    last: Int
    before: String
    after: String
  ): AssigneeConnection!
  auditable: Auditable
  attachments(
    first: Int
    last: Int
    before: String
    after: String
  ): AttachmentConnection!
  name: DisplayName!
  required: Boolean
  status: ChecklistStatus
  widget: Widget!
  order: Int!
}

"""
TODO
"""
input ChecklistResultInput {
  id: ID!
  assignees: [AssigneeInput!]
  auditable: AuditableInput
  name: DisplayNameInput!
  required: Boolean
  status: ChecklistStatusInput
  widget: WidgetInput!
  order: Int!
}

type SetValuePayload {
  delta: Int!
  node: ChecklistResult!
  parent: Checklist!
}

extend type Mutation {
  setValue(entity: ID!, parent: ID!, input: WidgetInput!): SetValuePayload!
}

## Our checklists go Open > In Progress > Closed
union ChecklistStatus = ChecklistOpen | ChecklistInProgress | ChecklistClosed

interface SetStatusPayload {
  delta: Int!
}
type SetChecklistStatusPayload implements SetStatusPayload {
  delta: Int!
  edge: ChecklistEdge!
}
type SetChecklistItemStatusPayload implements SetStatusPayload {
  delta: Int!
  edge: ChecklistItemEdge!
  parent: Checklist!
}

extend type Mutation {
  setStatus(
    entity: ID!
    parent: ID
    input: ChecklistStatusInput!
  ): SetStatusPayload!
}

input ChecklistStatusInput @oneOf {
  open: ChecklistOpenInput
  inProgress: ChecklistInProgressInput
  closed: ChecklistClosedInput
}

type ChecklistOpen implements State {
  tag: String
  dueAt: Temporal
  openedBy: Identity
  openedAt: Temporal!
}

input ChecklistOpenInput {
  by: ID
  at: TemporalInput!
}

type ChecklistInProgress implements State {
  tag: String
  dueAt: Temporal
  inProgressBy: Identity
  inProgressAt: Temporal!
}

input ChecklistInProgressInput {
  by: ID
  at: TemporalInput!
}

type ChecklistClosed implements State {
  tag: String
  closedBy: Identity
  closedAt: Temporal!
  closedBecause: ChecklistClosedReason
  dueAt: Temporal
}

input ChecklistClosedInput {
  by: ID
  at: TemporalInput!
  because: ChecklistClosedReasonInput
}

type ChecklistClosedReason {
  code: ChecklistClosedReasonCode!
  note: DynamicString
}

input ChecklistClosedReasonInput {
  code: ChecklistClosedReasonCode!
  note: DynamicStringInput
}

enum ChecklistClosedReasonCode {
  success
  error
}
