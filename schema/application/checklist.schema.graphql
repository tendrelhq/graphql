type Query {
  checklists(
    first: Int
    last: Int
    before: String
    after: String
    search: ChecklistSearchOptions
  ): ChecklistConnection!
}

type Mutation {
  saveChecklist(input: ChecklistInput!): ChecklistEdge!
}

input ChecklistInput {
  id: Entity!
  active: Boolean!
  assignees: [AssigneeInput!]
  auditable: Boolean!
  customerId: ID!
  description: String
  items: [ChecklistItemInput!]
  name: String!
  schedule: ScheduleInput
  sop: URL
  status: ChecklistStatusInput
}

input ChecklistItemInput {
  type: ChecklistItemInputType!
  repr: String!
}

enum ChecklistItemInputType {
  ChecklistResult
}

type Checklist implements Component {
  id: Entity!
  active: Activatable!
  assignees(
    first: Int
    last: Int
    before: String
    after: String
  ): AssigneeConnection!
  attachments(
    first: Int
    last: Int
    before: String
    after: String
  ): AttachmentConnection!
  auditable: Auditable!
  description: Description
  items(
    first: Int
    last: Int
    before: String
    after: String
  ): ChecklistItemConnection!
  name: DisplayName!
  required: Boolean
  schedule: Schedule
  sop: Sop
  status: ChecklistStatus

  # experimental - subject to change
  children(
    first: Int
    last: Int
    before: String
    after: String
    search: ChecklistSearchOptions
  ): ChecklistConnection!
  metadata: Metadata!
}

input ChecklistSearchOptions {
  active: Boolean
  order: ChecklistSearchOrderOptions
}

input ChecklistSearchOrderOptions {
  completedAt: SortOrder
}

type ChecklistItemConnection implements Connection {
  edges: [ChecklistItemEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistItemEdge implements Edge {
  cursor: String!
  node: ChecklistItem!
}

type ChecklistConnection implements Connection {
  edges: [ChecklistEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistEdge implements Edge {
  cursor: String!
  node: Checklist!
}

## We want our checklists to support nesting
union ChecklistItem = Checklist | ChecklistResult

type ChecklistResult implements Component {
  id: Entity!
  assignees(
    first: Int
    last: Int
    before: String
    after: String
  ): AssigneeConnection!
  auditable: Auditable!
  attachments(
    first: Int
    last: Int
    before: String
    after: String
  ): AttachmentConnection!
  name: DisplayName!
  required: Boolean
  status: ChecklistStatus
  value: ChecklistResultValue
}

union ChecklistResultValue = Counter | Flag | Register

## Our checklists go Open > In Progress > Closed
union ChecklistStatus = ChecklistOpen | ChecklistInProgress | ChecklistClosed

input ChecklistStatusInput {
  type: ChecklistStatusInputType!
  repr: String!
}

enum ChecklistStatusInputType {
  ChecklistOpen
  ChecklistInProgress
  ChecklistClosed
}

type ChecklistOpen implements Component {
  id: Entity!
  openedBy: Identity!
  openedAt: Temporal!
}
type ChecklistInProgress implements Component {
  id: Entity!
  inProgressBy: Identity!
  inProgressAt: Temporal!
}
type ChecklistClosed implements Component {
  id: Entity!
  closedBy: Identity!
  closedAt: Temporal!
  closedBecause: ChecklistClosedReason!
}
type ChecklistClosedReason {
  code: ChecklistClosedReasonCode!
  note: DynamicString
}
enum ChecklistClosedReasonCode {
  success
  error
}
