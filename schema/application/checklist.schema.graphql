extend type Organization {
  checklists(
    first: Int
    last: Int
    before: String
    after: String
    search: ChecklistSearchOptions
  ): ChecklistConnection!
}

type Mutation {
  saveChecklist(input: ChecklistInput!): ChecklistEdge!
}

type Checklist implements Component {
  id: Entity!
  active: Activatable
  assignees(
    first: Int
    last: Int
    before: String
    after: String
  ): AssigneeConnection!
  attachments(
    first: Int
    last: Int
    before: String
    after: String
  ): AttachmentConnection!
  auditable: Auditable
  description: Description
  items(
    first: Int
    last: Int
    before: String
    after: String
  ): ChecklistItemConnection!
  name: DisplayName!
  required: Boolean
  schedule: Schedule
  sop: Sop
  status: ChecklistStatus

  # experimental - subject to change
  children(
    first: Int
    last: Int
    before: String
    after: String
    search: ChecklistSearchOptions
  ): ChecklistConnection!
  metadata: Metadata!
}

input ChecklistInput {
  id: Entity!
  active: ActiveInput
  assignees: [AssigneeInput!]
  auditable: AuditableInput
  customerId: ID!
  description: DescriptionInput
  items: [ChecklistItemInput!]
  name: DisplayNameInput!
  required: Boolean
  schedule: ScheduleInput
  sop: SopInput
  status: ChecklistStatusInput
}

input ChecklistSearchOptions {
  active: Boolean
  status: [ChecklistStatusSearchOptions!]
}

enum ChecklistStatusSearchOptions {
  open
  inProgress
  closed
}

type ChecklistItemConnection implements Connection {
  edges: [ChecklistItemEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistItemEdge implements Edge {
  cursor: String!
  node: ChecklistItem!
}

type ChecklistConnection implements Connection {
  edges: [ChecklistEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChecklistEdge implements Edge {
  cursor: String!
  node: Checklist!
}

## We want our checklists to support nesting
union ChecklistItem = Checklist | ChecklistResult

input ChecklistItemInput @oneOf {
  checklist: ChecklistInput
  result: ChecklistResultInput
}

"""
TODO
"""
type ChecklistResult implements Component {
  id: Entity!
  assignees(
    first: Int
    last: Int
    before: String
    after: String
  ): AssigneeConnection!
  auditable: Auditable
  attachments(
    first: Int
    last: Int
    before: String
    after: String
  ): AttachmentConnection!
  name: DisplayName!
  required: Boolean
  status: ChecklistStatus
  widget: Widget!
}

"""
TODO
"""
input ChecklistResultInput {
  id: Entity!
  assignees: [AssigneeInput!]
  auditable: AuditableInput
  name: DisplayNameInput!
  required: Boolean
  status: ChecklistStatusInput
  widget: WidgetInput!
}

## Our checklists go Open > In Progress > Closed
union ChecklistStatus = ChecklistOpen | ChecklistInProgress | ChecklistClosed

input ChecklistStatusInput @oneOf {
  open: ChecklistOpenInput
  inProgress: ChecklistInProgressInput
  closed: ChecklistClosedInput
}

type ChecklistOpen implements Component {
  id: Entity!
  dueAt: Temporal
  openedBy: Identity
  openedAt: Temporal!
}

input ChecklistOpenInput {
  id: Entity!
  by: Entity
  at: TemporalInput!
}

type ChecklistInProgress implements Component {
  id: Entity!
  dueAt: Temporal
  inProgressBy: Identity
  inProgressAt: Temporal!
}

input ChecklistInProgressInput {
  id: Entity!
  by: Entity
  at: TemporalInput!
}

type ChecklistClosed implements Component {
  id: Entity!
  closedBy: Identity
  closedAt: Temporal!
  closedBecause: ChecklistClosedReason
  dueAt: Temporal
}

input ChecklistClosedInput {
  id: Entity!
  by: Entity
  at: TemporalInput!
  because: ChecklistClosedReasonInput
}

type ChecklistClosedReason {
  code: ChecklistClosedReasonCode!
  note: DynamicString
}

input ChecklistClosedReasonInput {
  code: ChecklistClosedReasonCode!
  note: DynamicStringInput
}

enum ChecklistClosedReasonCode {
  success
  error
}
