query TestMftEntrypoint($count: Int, $root: ID!, $impl: String) {
  trackables(first: $count, parent: $root, withImplementation: $impl) {
    edges {
      node {
        ... on Location {
          name {
            value
          }
          timeZone
        }
        ... on Task {
          displayName {
            name {
              value
            }
          }
          state {
            __typename
          }
        }
        ...Trackables_fragment
      }
    }
    totalCount
  }
}

query TestMftRefetchQuery($node: ID!) {
  node(id: $node) {
    ... on Location {
      name {
        value
      }
      ...Trackables_fragment
    }
    ... on Task {
      displayName {
        name {
          value
        }
      }
      fsm {
        ...TaskFSM_fragment
      }
    }
  }
}

mutation TestMftTransitionMutation($opts: FsmOptions!) {
  advance(opts: $opts) {
    fsm {
      ...TaskFSM_fragment
    }
    # ...TrackableMatrix_fragment
  }
}

fragment Trackables_fragment on Trackable {
  tracking {
    edges {
      node {
        ... on Task {
          displayName {
            name {
              value
            }
          }
          fsm {
            ...TaskFSM_fragment
          }
          # ...TrackableMatrix_fragment
        }
      }
    }
  }
}

fragment TrackableMatrix_fragment on Trackable {
  trackingAgg(
    groupByTag: ["Production", "Planned Downtime", "Unplanned Downtime"]
  ) {
    group
    value
  }
}

fragment TaskFSM_fragment on TaskStateMachine {
  active {
    assignees {
      edges {
        node {
          assignedTo {
            ... on Worker {
              displayName
            }
          }
        }
      }
    }
    displayName {
      name {
        value
      }
    }
    fields {
      edges {
        node {
          name {
            name {
              value
            }
          }
          value {
            __typename
          }
        }
      }
    }
    state {
      __typename
    }
  }
  transitions {
    edges {
      node {
        displayName {
          name {
            value
          }
        }
        fields {
          edges {
            node {
              name {
                name {
                  value
                }
              }
              value {
                __typename
              }
            }
          }
        }
      }
    }
  }
}
