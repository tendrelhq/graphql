# via graphql-scalars
scalar URL

"""
TODO
"""
type Activatable implements Component {
  id: ID!
  active: Boolean!
  updatedAt: Temporal @semanticNonNull
}

"""
TODO
"""
input ActivatableInput {
  id: ID!
  active: Boolean!
  updatedAt: TemporalInput!
}

extend type Mutation {
  activate(entity: ID!): Activatable @semanticNonNull
  deactivate(entity: ID!): Activatable @semanticNonNull
}

interface Assignable implements Component {
  id: ID!
}

"""
TODO
"""
type Assignee implements Component {
  id: ID!
  assignedTo: Assignable!
  assignedAt: Temporal!
}

"""
TODO
"""
input AssigneeInput {
  id: ID!
  assignTo: ID!
  assignAt: TemporalInput!
}

# TODO: This is the next wave...
# extend type Mutation {
#   assign(input: [AssigneeInput!]): AssigneeConnection!
# }

type AssigneeConnection implements Connection {
  edges: [AssigneeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AssigneeEdge implements Edge {
  cursor: String!
  node: Assignee!
}

"""
TODO
"""
type Attachment implements Component {
  id: ID!
  attachment: String!
}

type AttachmentConnection implements Connection {
  edges: [AttachmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AttachmentEdge implements Edge {
  cursor: String!
  node: Attachment!
}

# extend type Mutation {
#   attach(input: [AttachmentInput!]): AttachmentConnection!
#   detach(input: ???): AttachmentConnection!
# }

"""
TODO
"""
type Auditable implements Component {
  id: ID!
  auditable: Boolean!
}

"""
TODO
"""
input AuditableInput {
  id: ID!
  enabled: Boolean!
}

"""
TODO
"""
type Description implements Component {
  id: ID!
  description: DynamicString!
}

"""
TODO
"""
input DescriptionInput {
  id: ID!
  value: DynamicStringInput!
}

"""
TODO
"""
type DisplayName implements Component {
  id: ID!
  name: DynamicString!
}

"""
TODO
"""
input DisplayNameInput {
  id: ID!
  value: DynamicStringInput!
}

"""
Metadata pertaining to an individual Entity, e.g. when it was last updated and
by whom.
"""
type Metadata {
  updatedAt: Temporal!
  updatedBy: Identity
}

type Requirement implements Component {
  id: ID!
  requires: ID!
}

"""
TODO
"""
type Sop implements Component {
  id: ID!
  sop: URL!
}

"""
TODO
"""
input SopInput {
  id: ID!
  link: URL!
}

"""
TODO
"""
union Widget =
  | CheckboxWidget
  | ClickerWidget
  | DurationWidget
  | MultilineStringWidget
  | NumberWidget
  | ReferenceWidget
  | SentimentWidget
  | StringWidget
  | TemporalWidget

"""
TODO
"""
input WidgetInput @oneOf {
  checkbox: CheckboxWidgetInput
  clicker: ClickerWidgetInput
  duration: DurationWidgetInput
  multiline: MultilineStringWidgetInput
  number: NumberWidgetInput
  reference: ReferenceWidgetInput
  sentiment: SentimentWidgetInput
  string: StringWidgetInput
  temporal: TemporalWidgetInput
}

"""
TODO
"""
type CheckboxWidget implements Component {
  id: ID!
  checked: Boolean
}

"""
TODO
"""
input CheckboxWidgetInput {
  id: ID!
  checked: Boolean
}

"""
TODO
"""
type ClickerWidget implements Component {
  id: ID!
  count: Int
}

"""
TODO
"""
input ClickerWidgetInput {
  id: ID!
  count: Int
}

"""
TODO
"""
type DurationWidget implements Component {
  id: ID!
  duration: Duration
}

"""
TODO
"""
input DurationWidgetInput {
  id: ID!
  duration: Duration
}

# type GeographyWidget implements Component {
#   id: ID!
#   geog: Geography
# }
#
# input GeographyWidgetInput {
#   id: ID!
#   geog: Geography
# }

"""
TODO
"""
type MultilineStringWidget implements Component {
  id: ID!
  text: String
}

"""
TODO
"""
input MultilineStringWidgetInput {
  id: ID!
  text: String
}

"""
TODO
"""
type NumberWidget implements Component {
  id: ID!
  number: Int
}

"""
TODO
"""
input NumberWidgetInput {
  id: ID!
  number: Int
}

"""
TODO
"""
type ReferenceWidget implements Component {
  id: ID!
  possibleTypes: [String!]
  ref: Referenceable
}

"""
TODO
"""
input ReferenceWidgetInput {
  id: ID!
  possibleTypes: [String!]
  ref: ID
}

"""
TODO
"""
type SentimentWidget implements Component {
  id: ID!
  sentiment: Sentiment
}

"""
TODO
"""
input SentimentWidgetInput {
  id: ID!
  sentiment: Sentiment
}

"""
TODO
"""
type StringWidget implements Component {
  id: ID!
  string: String
}

"""
TODO
"""
input StringWidgetInput {
  id: ID!
  string: String
}

"""
TODO
"""
type TemporalWidget implements Component {
  id: ID!
  temporal: Temporal
}

"""
TODO
"""
input TemporalWidgetInput {
  id: ID!
  temporal: TemporalInput
}
