# via graphql-scalars
scalar URL

"""
Identifies an entity as being either "active" or "inactive".
Activatable entities have two operations: activate and deactivate.
"""
interface Activatable implements Component {
  id: ID!
  active: Active @semanticNonNull
}

extend type Mutation {
  """
  Activate an entity with the Activatable component. If the entity is already
  active, this operation is a no-op. Throws an error with code E_NOT_ACTIVATABLE
  if the entity being activated is not, in fact, Activatable.
  """
  activate(entity: ID!): Activatable!
  """
  Deactivate an entity with the Activatable component. If the entity is already
  inactive, this operation is a no-op. Throws an error with code
  E_NOT_ACTIVATABLE if the entity being deactivated is not, in fact, Activatable.
  """
  deactivate(entity: ID!): Activatable!
}

"""
TODO
"""
type Active {
  active: Boolean!
  updatedAt: Temporal @semanticNonNull
}

"""
TODO
"""
input ActiveInput {
  active: Boolean!
  updatedAt: TemporalInput
}

"""
Identifies an entity being assignable to another entity.
Assignable entities have two operations: assign and unassign.
"""
interface Assignable implements Component {
  id: ID!
}

type AssignableConnection implements Connection {
  edges: [AssignableEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AssignableEdge implements Edge {
  cursor: String!
  node: Assignable!
}

type AssignmentPayload {
  entity: Assignable!
  assignedTo: Assignable! @deprecated
  assignee: AssigneeEdge!
}

type UnassignmentPayload {
  entity: Assignable!
  unassignedFrom: Assignable! @deprecated
  unassignedAssignees: [ID!]!
}

extend type Query {
  """
  For the given Assignable `entity`, returns a connection representing the set
  of Assignable entities to which the given `entity` can be assigned.

  Errors:
  - E_NOT_ASSIGNABLE, if `entity` is not assignable
  """
  assignable(entity: ID!): AssignableConnection!
}

extend type Mutation {
  """
  Assign an entity to another entity. If the entity is already assigned to the
  same entity, this operation is a no-op.

  Errors:
  - E_NOT_ASSIGNABLE, if either entity is not assignable
  - E_ASSIGN_CONFLICT, if the entity is assigned to a different entity
  """
  assign(entity: ID!, to: ID!): AssignmentPayload!
  """
  Unssign an entity from another entity. If the entity is already unassigned,
  this operation is a no-op.

  Errors:
  - E_NOT_ASSIGNABLE, if either entity is not (un)assignable
  - E_ASSIGN_CONFLICT, if the entity is assigned to a different entity
  """
  unassign(entity: ID!, from: ID!): UnassignmentPayload!
}

"""
TODO
"""
type Assignee implements Component {
  id: ID!
  assignedTo: Assignable!
  assignedAt: Temporal!
}

"""
TODO
"""
input AssigneeInput {
  id: ID!
  assignTo: ID!
  assignAt: TemporalInput!
}

type AssigneeConnection implements Connection {
  edges: [AssigneeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AssigneeEdge implements Edge {
  cursor: String!
  node: Assignee!
}

"""
TODO
"""
type Attachment implements Component & Node {
  id: ID!
  attachment: URL!
  attachedBy: Identity
  attachedOn: Temporal @semanticNonNull
}

type AttachmentConnection implements Connection {
  edges: [AttachmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AttachmentEdge implements Edge {
  cursor: String!
  node: Attachment!
}

extend type Mutation {
  attach(entity: ID!, attachments: [URL!]!): [AttachmentEdge!]!
}

"""
TODO
"""
type Auditable implements Component {
  id: ID!
  auditable: Boolean!
}

"""
TODO
"""
input AuditableInput {
  id: ID!
  enabled: Boolean!
}

"""
TODO
"""
type Description implements Component {
  id: ID!
  description: DynamicString!
}

"""
TODO
"""
input DescriptionInput {
  id: ID!
  value: DynamicStringInput!
}

"""
TODO
"""
type DisplayName implements Component {
  id: ID!
  name: DynamicString!
}

"""
TODO
"""
input DisplayNameInput {
  id: ID!
  value: DynamicStringInput!
}

"""
Metadata pertaining to an individual Entity, e.g. when it was last updated and
by whom.
"""
type Metadata {
  updatedAt: Temporal!
  updatedBy: Identity
}

type Requirement implements Component {
  id: ID!
  requires: ID!
}

"""
TODO
"""
type Sop implements Component {
  id: ID!
  sop: URL!
}

"""
TODO
"""
input SopInput {
  id: ID!
  link: URL!
}

"""
TODO
"""
union Widget =
  | SectionWidget
  | BooleanWidget
  | CheckboxWidget
  | ClickerWidget
  | DurationWidget
  | MultilineStringWidget
  | NumberWidget
  | ReferenceWidget
  | SentimentWidget
  | StringWidget
  | TemporalWidget

"""
TODO
"""
input WidgetInput @oneOf {
  section: SectionWidgetInput
  checkbox: CheckboxWidgetInput
  boolean: BooleanWidgetInput
  clicker: ClickerWidgetInput
  duration: DurationWidgetInput
  multiline: MultilineStringWidgetInput
  number: NumberWidgetInput
  reference: ReferenceWidgetInput
  sentiment: SentimentWidgetInput
  string: StringWidgetInput
  temporal: TemporalWidgetInput
}

"""
TODO
"""
type SectionWidget implements Component {
  id: ID!
  title: String
}

"""
TODO
"""
input SectionWidgetInput {
  value: String
}

"""
TODO
"""
type CheckboxWidget implements Component {
  id: ID!
  checked: Boolean
}

"""
TODO
"""
input CheckboxWidgetInput {
  value: Boolean
}

type BooleanWidget implements Component {
  id: ID!
  checked: Boolean
}

"""
TODO
"""
input BooleanWidgetInput {
  value: Boolean
}

"""
TODO
"""
type ClickerWidget implements Component {
  id: ID!
  number: Int
}

"""
TODO
"""
input ClickerWidgetInput {
  value: Int
}

"""
TODO
"""
type DurationWidget implements Component {
  id: ID!
  duration: Duration
}

"""
TODO
"""
input DurationWidgetInput {
  value: Duration
}

# type GeographyWidget implements Component {
#   id: ID!
#   geog: Geography
# }
#
# input GeographyWidgetInput {
#   value: Geography
# }

"""
TODO
"""
type MultilineStringWidget implements Component {
  id: ID!
  string: String
}

"""
TODO
"""
input MultilineStringWidgetInput {
  value: String
}

"""
TODO
"""
type NumberWidget implements Component {
  id: ID!
  number: Int
}

"""
TODO
"""
input NumberWidgetInput {
  value: Int
}

"""
TODO
"""
type ReferenceWidget implements Component {
  id: ID!
  possibleTypes: [String!]!
  ref: Referenceable
}

"""
TODO
"""
input ReferenceWidgetInput {
  possibleTypes: [String!]!
  value: ID
}

"""
TODO
"""
type SentimentWidget implements Component {
  id: ID!
  number: Int
}

"""
TODO
"""
input SentimentWidgetInput {
  value: Int
}

"""
TODO
"""
type StringWidget implements Component {
  id: ID!
  string: String
}

"""
TODO
"""
input StringWidgetInput {
  value: String
}

"""
TODO
"""
type TemporalWidget implements Component {
  id: ID!
  temporal: Temporal
}

"""
TODO
"""
input TemporalWidgetInput {
  value: TemporalInput
}
