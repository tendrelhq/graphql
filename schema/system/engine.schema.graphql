# Entrypoints into the "engine"
type Query {
  entity(id: Entity!): EntityConnection!
}

"""
An entity represents a general-purpose object. The scalar representation is
just an opaque string, similar to ID.
"""
scalar Entity

"""
Components characterize Entities as possessing a particular trait.
They are just simple structs, holding all data necessary to model that trait.
"""
interface Component {
  id: Entity!
}

type EntityConnection {
  entity: Entity!
  components(
    first: Int
    last: Int
    before: String
    after: String
  ): EntityComponentConnection!
}

type EntityComponentConnection implements Connection {
  edges: [EntityComponentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EntityComponentEdge implements Edge {
  cursor: String!
  node: Component!
}

#
# Pagination primitives
#
interface Connection {
  totalCount: Int!
  pageInfo: PageInfo!
}

interface Edge {
  cursor: String!
}

type Mutation {
  createEntity: CreateEntity!
}

type CreateEntity {
  id: Entity!
  components: CreateEntityComponentConnection!
}

type CreateEntityComponentConnection {
  type(type: String!): CreateEntityComponentType!
  node(id: Entity!): CreateEntityComponentNode!
}

type CreateEntityComponentType {
  name(value: String!, locale: Locale): Void
  description(value: String!, locale: Locale): Void
  components: CreateEntityComponentConnection!
}

union CreateEntityComponentNode = CreateNamedNode | CreateLeafNode

type CreateLeafNode {
  value: ValueNode
}

union ValueNode = CounterNode | FlagNode | RegisterNode

type CounterNode {
  count(value: Int!): Void
}
type FlagNode {
  flag(value: Boolean!): Void
}
type RegisterNode {
  register(value: String!): Void
}

type CreateNamedNode {
  name(value: String!, locale: Locale): Void
  description(value: String!, locale: Locale): Void
  components: CreateEntityComponentConnection!
}

scalar Void

type ComponentConstructor {
  node(id: ID!): NodeConstructor!
  type(type: String!): TypeConstructor!
}

type NodeConstructor {
  name(value: String!, locale: Locale): Void
  description(value: String!, locale: Locale): Void
}

type TypeConstructor {
  name(value: String!, locale: Locale): Void
  description(value: String!, locale: Locale): Void
}
