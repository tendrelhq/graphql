"""
Indicates that a position is semantically non null: it is only null if there is a matching error in the `errors` array.
In all other cases, the position is non-null.

Tools doing code generation may use this information to generate the position as non-null if field errors are handled out of band:

```graphql
type User {
    # email is semantically non-null and can be generated as non-null by error-handling clients.
    email: String @semanticNonNull
}
```

The `levels` argument indicates what levels are semantically non null in case of lists:

```graphql
type User {
    # friends is semantically non null
    friends: [User] @semanticNonNull # same as @semanticNonNull(levels: [0])

    # every friends[k] is semantically non null
    friends: [User] @semanticNonNull(levels: [1])

    # friends as well as every friends[k] is semantically non null
    friends: [User] @semanticNonNull(levels: [0, 1])
}
```

`levels` are zero indexed.
Passing a negative level or a level greater than the list dimension is an error.
"""
directive @semanticNonNull(levels: [Int] = [0]) on FIELD_DEFINITION

"""
A language tag in the format of a BCP 47 (RFC 5646) standard string.
"""
scalar Locale @specifiedBy(url: "https://www.rfc-editor.org/rfc/rfc5646.html")

"""
A date-time string in ISO 8601 format.
"""
scalar Timestamp
  @specifiedBy(url: "https://www.rfc-editor.org/rfc/rfc3339.html#section-5.6")

scalar URL @specifiedBy(url: "https://www.ietf.org/rfc/rfc3986.txt")

enum DiagnosticKind {
  candidate_change_discarded
  candidate_choice_unavailable
  """
  Indicates that an operation expected an instance type to be provided but
  received a template type.
  """
  expected_instance_got_template
  """
  Indicates that an operation expected a template type to be provided but
  received an instance type.
  """
  expected_template_got_instance
  feature_not_available
  """
  Some operations accept an optional hash. This is misleading. You should
  _always_ pass a hash for operations that accept them.
  """
  hash_is_required
  """
  Diagnostics of this kind indicates that the requested operation is no longer
  a valid operation due to a state change that has not yet been observed by
  the client. Typically this is due to data staleness but may also occur for
  the _loser_ of a race under concurrency.

  Hashes are opaque. Clients should not attempt to derive any meaning from them.
  """
  hash_mismatch_precludes_operation
  """
  Indicates that an operation received a type that it is not allowed to
  operate on.
  """
  invalid_type
  """
  When you operate on a StateMachine<T>, there must obviously be a state
  machine to operate *on*. This diagnostic is returned when no such state
  machine exists.
  """
  no_associated_fsm
}

enum TaskStateName {
  Closed
  InProgress
  Open
}

enum ValueType {
  boolean
  entity
  number
  string
  timestamp
  unknown
}

union TaskState = Closed | InProgress | Open

union Value =
  | BooleanValue
  | EntityValue
  | NumberValue
  | StringValue
  | TimestampValue

"""
Identifies an Entity as being assignable to another Entity.
"""
interface Assignable implements Component {
  id: ID!
}

"""
Components characterize Entities as possessing a particular trait.
They are just simple structs, holding all data necessary to model that trait.
"""
interface Component {
  id: ID!
}

interface Identity implements Component {
  id: ID!
}

"""
Indicates an object that is "refetchable".
"""
interface Node {
  """
  A globally unique opaque identifier for a node.
  """
  id: ID!
}

"""
Identifies an Entity as being "trackable".
What exactly this means depends on the type underlying said entity and is
entirely user defined.
"""
interface Trackable implements Component {
  id: ID!
  """
  Entrypoint into the "tracking system(s)" for a given Entity. Note that while
  many types admit to being trackable, this does not mean that all in fact are
  in practice. In order for an Entity to be trackable, it must be explicitly
  configured as such.
  """
  tracking(after: ID, first: Int): TrackableConnection
}

input AdvanceFsmOptions {
  fsm: AdvanceTaskOptions!
  task: AdvanceTaskOptions!
}

input AdvanceTaskOptions {
  """
  This should be the Task's current hash (as far as you know) as it was
  returned to you when first querying for the Task in question.
  """
  hash: String!
  id: ID!
  overrides: [FieldInput!]
}

input AssignmentInput {
  assignedTo: ID!
}

input ClosedInput {
  closedAt: Timestamp
  closedBecause: String
  closedBy: ID
  inProgressAt: Timestamp
  inProgressBy: ID
  openedAt: Timestamp
  openedBy: ID
}

input CreateLocationInput {
  category: String!
  name: String!
  parent: ID!
  scanCode: String
  """
  If not specified, the time zone will be derived from the parent (when the
  parent is a Location). This is most notably *not* the case when the parent is
  a Customer.
  """
  timeZone: String
}

input DescriptionInput {
  id: ID
  value: DynamicStringInput!
}

input DynamicStringInput {
  locale: Locale!
  value: String!
}

input FieldDefinitionInput {
  description: String
  isDraft: Boolean
  isPrimary: Boolean
  name: String!
  order: Int
  referenceType: String
  type: ValueType!
  value: ValueInput
  widget: String
}

input FieldInput {
  field: ID!
  value: ValueInput
  """
  Must match the type of the `value`, e.g.
  ```typescript
  if (field.valueType === "string") {
    assert(field.value === null || "string" in field.value);
  }
  ```
  """
  valueType: ValueType!
}

input GeofenceInput {
  latitude: String
  longitude: String
  radius: Float
}

input InProgressInput {
  inProgressAt: Timestamp
  inProgressBy: ID
  openedAt: Timestamp
  openedBy: ID
}

input InstantiateOptions {
  fields: [FieldInput!]
}

input OpenInput {
  openedAt: Timestamp
  openedBy: ID
}

input TaskStateInput @oneOf {
  closed: ClosedInput
  inProgress: InProgressInput
  open: OpenInput
}

input TemplateConstraintOptions {
  """
  Request eager instantiation of the given template.
  """
  instantiate: InstantiateOptions
}

input UpdateLocationInput {
  activatedAt: String
  deactivatedAt: String
  geofence: GeofenceInput
  id: ID!
  name: UpdateNameInput
  scanCode: ID
}

input UpdateNameInput {
  activatedAt: String
  deactivatedAt: String
  id: ID!
  languageId: ID!
  value: String!
}

input ValueInput @oneOf {
  boolean: Boolean
  id: ID
  number: Int
  string: String
  """
  ISO 8601 format.
  """
  timestamp: String
}

type AdvanceTaskStateMachineResult {
  diagnostics: [Diagnostic!]
  instantiations: [TaskEdge!] @semanticNonNull
  root: Task @semanticNonNull
}

type Aggregate {
  """
  The group, or bucket, that uniquely identifies this aggregate.
  For example, this will be one of the `overType`s passed to `chainAgg`.
  """
  group: String @semanticNonNull
  """
  The computed aggregate value.

  Currently, this will always be a string value representing a duration in
  seconds, e.g. "360" -> 360 seconds. `null` will be returned when no such
  aggregate can be computed, e.g. "time in planned downtime" when no "planned
  downtime" events exist. Note also that `null` will be returned if a
  duration cannot be computed, e.g. because there is no end date.
  """
  value: String
}

"""
Encapsulates the "who" and "when" associated with the act of "assignment".
For example, both Tasks and Workers implement Assignable and therefore a Task
can be assigned to a Worker and vice versa ("assignment" is commutative). In
this example, the "who" will always be the Worker and the "when" will be the
timestamp when these two Entities were assigned.
"""
type Assignment implements Node {
  """
  NOT YET IMPLEMENTED - will always return null!
  """
  assignedAt: TimestampOverridable
  assignedTo: Assignable
  """
  A globally unique opaque identifier for a node.
  """
  id: ID!
}

type AssignmentConnection {
  edges: [AssignmentEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type AssignmentEdge {
  cursor: String @semanticNonNull
  node: Assignment @semanticNonNull
}

type Attachment implements Component & Node {
  attachedBy: Identity
  """
  If you are using [Relay](https://relay.dev), make sure you annotate this
  field with `@catch(to: RESULT)` to avoid intermittent S3 errors from
  crashing the entire fragment.
  """
  attachment: URL @semanticNonNull
  """
  A globally unique opaque identifier for a node.
  """
  id: ID!
}

type AttachmentConnection {
  edges: [AttachmentEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type AttachmentEdge {
  cursor: String @semanticNonNull
  node: Attachment @semanticNonNull
}

type BooleanValue {
  boolean: Boolean
}

type Closed {
  closedAt: TimestampOverridable @semanticNonNull
  closedBecause: String
  closedBy: Assignable
  inProgressAt: TimestampOverridable
  inProgressBy: Assignable
  openedAt: TimestampOverridable @semanticNonNull
  openedBy: Assignable
}

type CreateInstancePayload {
  edge: EntityInstanceEdge @semanticNonNull
}

type CreateTemplateConstraintResult {
  constraint: TemplateConstraint
  diagnostics: [Diagnostic!] @semanticNonNull
  instantiations: [TaskEdge!] @semanticNonNull
}

type Description implements Component & Node {
  description: DynamicString
    @deprecated(reason: "Use Description.locale and/or Description.value.")
    @semanticNonNull
  """
  A globally unique opaque identifier for a node.
  """
  id: ID!
  locale: String @semanticNonNull
  value: String @semanticNonNull
}

type Diagnostic {
  code: DiagnosticKind @semanticNonNull
  message: String
}

type DisplayName implements Component & Node {
  """
  A globally unique opaque identifier for a node.
  """
  id: ID!
  locale: String @semanticNonNull
  name: DynamicString
    @deprecated(
      reason: "Use the DisplayName.value and/or DisplayName.locale instead."
    )
    @semanticNonNull
  value: String @semanticNonNull
}

"""
Plain text content that has been (potentially) translated into different
languages as specified by the user's configuration.
"""
type DynamicString {
  locale: Locale @semanticNonNull
  value: String @semanticNonNull
}

"""
Entities represent distinct objects in the system. They can be physical
objects, like Locations, Resources and Workers, or logical ones, like
"Scan Codes".
"""
type EntityInstance {
  asTask: Task @semanticNonNull
  id: ID @semanticNonNull
  name: DisplayName @semanticNonNull
}

type EntityInstanceConnection {
  edges: [EntityInstanceEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type EntityInstanceEdge {
  """
  Lift an EntityInstance to a set of Fields where the given EntityInstance
  identifies as the Field's ValueType.
  """
  asFieldTemplateValueType: FieldConnection @semanticNonNull
  cursor: String @semanticNonNull
  node: EntityInstance @semanticNonNull
}

type EntityTemplate {
  asTask: Task @semanticNonNull
  id: ID @semanticNonNull
}

type EntityTemplateConnection {
  edges: [EntityTemplateEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type EntityTemplateEdge {
  cursor: String @semanticNonNull
  node: EntityTemplate @semanticNonNull
}

type EntityValue {
  entity: Component
}

type Field {
  """
  Field attachments.
  """
  attachments(
    after: String
    before: String
    first: Int
    last: Int
  ): AttachmentConnection @semanticNonNull
  """
  Intended to provide "auto-completion" in a frontend setting, this API returns
  *distinct known values* for a given Field. For Fields without constraints
  (which is most of them), this will return a "frecency" list of previously
  used values for the given Field. When constraints are involved, the
  completion list represents the *allowed* set of values for the given Field.

  Note that "frecency" is not currently implemented. For such Fields (i.e. those
  without constraints) you will simply get back an empty completion list.

  Note also that currently there is no enforcement of the latter, constraint-based
  semantic in the backend! The client *must* validate user input using the
  completion list *before* issuing, for example, an `applyFieldEdits` mutation.
  Otherwise the backend will gladly accept arbitrary values (assuming they are,
  of course, of the correct type).

  Note also that pagination is not currently implemented.
  """
  completions: ValueCompletionConnection @semanticNonNull
  """
  Description of a Field.
  """
  description: Description
  """
  Unique identifier for this Field.
  """
  id: ID @semanticNonNull
  """
  Display name for a Field.
  """
  name: DisplayName @semanticNonNull
  parent: Task @semanticNonNull
  """
  The value for this Field, if any. This field will always be present (when
  requested) for the given Field so as to convey the underlying data type of
  the (raw data) value. The underlying (raw data) value can be `null`.
  """
  value: Value @semanticNonNull
  """
  The type of data underlying `value`. This is provided as a convenience when
  interacting with field-level edits through other apis.
  """
  valueType: ValueType @semanticNonNull
}

type FieldConnection {
  edges: [FieldEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type FieldEdge {
  cursor: String @semanticNonNull
  node: Field @semanticNonNull
}

type InProgress {
  inProgressAt: TimestampOverridable @semanticNonNull
  inProgressBy: Assignable
  openedAt: TimestampOverridable @semanticNonNull
  openedBy: String
}

type Location implements Component & Node & Trackable {
  """
  A globally unique opaque identifier for a node.
  """
  id: ID!
  """
  IANA time zone identifier for this Location.
  """
  timeZone: String @semanticNonNull
  """
  Entrypoint into the "tracking system(s)" for the given Location.
  """
  tracking(
    after: ID
    first: Int
    withStatus: [TaskStateName!]
  ): TrackableConnection @semanticNonNull
}

type Mutation {
  advance(opts: AdvanceFsmOptions!): AdvanceTaskStateMachineResult
    @semanticNonNull
  applyFieldEdits(edits: [FieldInput!]!, entity: ID!): Task @semanticNonNull
  attach(attachments: [URL!]!, entity: ID!): [AttachmentEdge!] @semanticNonNull
  createCustagAsFieldTemplateValueTypeConstraint(
    field: ID!
    name: String!
    order: Int
    parent: ID!
  ): EntityInstanceEdge @semanticNonNull
  createInstance(
    fields: [FieldInput!]
    location: ID!
    name: String
    template: ID!
  ): CreateInstancePayload @semanticNonNull
  createLocation(input: CreateLocationInput!): Location @semanticNonNull
  """
  Template constraints allow you to limit the set of values that are valid for
  a given template and, optionally, field. Practically, this allows you to
  define *enumerations*, e.g. a "string enum" with members 'foo', 'bar' and 'baz'.

  Note that currently constraints are *not* validated in the backend.
  Validation *should* happen on the client, prior to invoking the API.
  Otherwise, the backend willl gladly accept any arbitrary value (assuming, of
  course, that it is of the correct type).
  """
  createTemplateConstraint(
    entity: ID!
    options: TemplateConstraintOptions
    template: ID!
  ): CreateTemplateConstraintResult @deprecated @semanticNonNull
  """
  Delete a Node.
  This operation is a no-op if the node has already been deleted.
  """
  deleteNode(node: ID!): [ID!] @semanticNonNull
  """
  Rebase a Task onto another (Task) chain.
  The net effect of this mutation is that the Task identified by `node` will
  have its root (`Task.root`) set to the Task identified by `base`.
  """
  rebase(base: ID!, node: ID!): Task @semanticNonNull
  updateLocation(input: UpdateLocationInput!): Location @semanticNonNull
}

type NumberValue {
  number: Int
}

type Open {
  openedAt: TimestampOverridable @semanticNonNull
  openedBy: Assignable
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean @semanticNonNull
  hasPreviousPage: Boolean @semanticNonNull
  startCursor: String
}

type Query {
  instances(
    after: String
    first: Int
    """
    TEMPORARY: this should be the customer/organization uuid.
    """
    owner: ID!
    """
    Instances with the given parent (instance).
    """
    parent: [ID!]
  ): EntityInstanceConnection @semanticNonNull
  node(id: ID!): Node!
  templates(
    """
    TEMPORARY: this should be the customer/organization uuid.
    """
    owner: ID!
    """
    Templates of the given type. This maps (currently) to worktemplatetype.
    For example, in Runtime the following template types exist:
    - Run
    - Downtime
    - Idle Time
    Any of these are suitable for this API.

    Also see `Task.chainAgg`, as that API takes a similar parameter `overType`.
    """
    type: [String!]
  ): EntityTemplateConnection @semanticNonNull
  """
  Query for Trackable entities in the given `parent` hierarchy.

  Note that this api does not yet support pagination! The `first` argument is
  used purely for testing at the moment.
  """
  trackables(
    """
    Forward pagination limit. Should only be used in conjunction with `after`.
    """
    first: Int
    """
    By default, this api will only return Trackables that are active. This can
    be overridden using the `includeInactive` flag.
    """
    includeInactive: Boolean
    """
    Identifies the root of the hierarchy in which to search for Trackable
    entities.

    Valid parent types are currently:
    - Customer

    All other parent types will be gracefully ignored.
    """
    parent: ID!
    """
    Allows filtering the returned set of Trackables by the *implementing* type.

    Currently this is only 'Location' (the default) or 'Task'. Note that
    specifying the latter will return a connection of trackable Tasks that
    represent the *chain roots* (i.e. originators). This is for you, Will
    Twait, so you can get started on the history screen. Note also that it will
    only give you *closed* chains, i.e. `workinstancecompleteddate is not null`.
    """
    withImplementation: String
  ): TrackableConnection @semanticNonNull
}

type StringValue {
  string: String
}

"""
A system-level component that identifies an Entity as being applicable to
Tendrel's internal "task processing pipeline". In practice, Tasks most often
represent "jobs" performed by humans. However, this need not always be the
case.

Technically speaking, a Task represents a (1) *named asynchronous process*
that (2) exists in one of three states: open, in progress, or closed.
"""
type Task implements Assignable & Component & Node & Trackable {
  """
  [object Object],[object Object],[object Object]
  """
  assignees: AssignmentConnection
  """
  Attachments associated with the Task as a whole.
  Note that you can also have field-level attachments.
  """
  attachments(
    after: String
    before: String
    first: Int
    last: Int
  ): AttachmentConnection @semanticNonNull
  """
  Inspect the chain (if any) in which the given Task exists.
  As it stands, this can only be used to perform a downwards search of the
  chain, i.e. the given Task is used as the "root" of the search tree.
  """
  chain(
    """
    For use in pagination. Specifies the limit for "forward pagination".
    """
    first: Int
  ): TaskConnection @semanticNonNull
  """
  Given a Task identifying as a node in a chain, create an aggregate view of
  said chain over the type tags given in `overType`. The result is a set of
  aggregates representing the *sum total duration* of nodes tagged with any of
  the given `overType` tags, *including* the given Task (if it is so tagged).

  Colloquially: `chainAgg(overType: ["Foo", "Bar"])` will compute the total
  time spent in all "Foo" or "Bar" tasks in the given chain;

  ```json
  [
    {
      "group": "Foo",
      "value": "26.47", // 26.47 seconds spent doing "Foo" tasks
    },
    {
      "group": "Bar",
      "value": "5.82", // 5.82 seconds spent doing "Bar" tasks
    },
  ]
  ```

  Note that this aggregation uses the given Task as the *root* of the chain.
  Chains are tree-like structures, which means you can chainAgg over a subtree
  by choosing a different root node. Note also that this means you may need to
  do some math depending on the structure of your chain, e.g. in the above
  example it may be that "Foo" remains "InProgress" while "Bar" happens, and
  therefore the aggregate for "Foo" *includes* time spent in "Bar".
  """
  chainAgg(
    """
    Which subtype-hierarchies you are interested in aggregating over.
    """
    overType: [String!]!
  ): [Aggregate!] @semanticNonNull
  description: Description
  displayName: DisplayName
    @deprecated(reason: "Use Task.name instead.")
    @semanticNonNull
  field(byName: String): Field
  """
  The set of Fields for the given Task.
  """
  fields: FieldConnection @semanticNonNull
  """
  Tasks can have an associated StateMachine, which defines a finite set of
  states that the given Task can be in at any given time.
  """
  fsm: TaskStateMachine
  """
  The hash signature of the given Task. This is only useful when interacting
  with APIs that require a hash as a concurrency control mechanism.
  """
  hash: String @semanticNonNull
  """
  A globally unique opaque identifier for a node.
  """
  id: ID!
  name: DisplayName @semanticNonNull
  """
  Identifies the parent of the current Task.

  This is different from previous. Previous models causality, parent models
  ownership. In practice, the parent of a Task will always be a Location.
  Note that currently this only supports workinstances. Tasks whose underlying
  type is a worktemplate will **always have a null parent**.
  """
  parent: Node
  """
  Get the previous Task, which may represent an altogether different chain
  than the current Task.
  """
  previous: Task
  root: Task
  state: TaskState
  """
  Entrypoint into the "tracking system(s)" for the given Task.
  At the moment, sub-task tracking is not supported and therefore `null` will
  always be returned for this field.
  """
  tracking(after: ID, first: Int): TrackableConnection
}

type TaskConnection {
  edges: [TaskEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type TaskEdge {
  cursor: String @semanticNonNull
  node: Task @semanticNonNull
}

"""
Where applicable, Entities can have an associated StateMachine that defines
their current ("active") state in addition to possible next states that they
can "transition into". Typically, an end user does not need to be aware of
this state machine as Tendrel's internal engine maintains the machine and
associated states for a given Entity. However, in some cases it can be useful
to surface this information in userland such that a user can interact
directly with the underlying state machine.
"""
type TaskStateMachine {
  active: Task
  hash: String @semanticNonNull
  transitions: TaskTransitions
}

type TaskTransition {
  cursor: String @semanticNonNull
  id: ID @semanticNonNull
  node: Task @semanticNonNull
  target: Location
}

type TaskTransitions {
  edges: [TaskTransition!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

"""
Template constraints allow you to constrain the *type* of thing that can go
into a field. Currently, this is only supported for Locations (and by that I
mean "primary locations") as a means of "enabling" a template for the given
location.
"""
type TemplateConstraint {
  id: ID @semanticNonNull
}

type TimestampOverridable {
  override: TimestampOverride
  value: Timestamp @semanticNonNull
}

type TimestampOverride {
  overriddenAt: String
  overriddenBy: String
  previousValue: Timestamp @semanticNonNull
}

type TimestampValue {
  timestamp: Timestamp
}

type TrackableConnection {
  edges: [TrackableEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type TrackableEdge {
  cursor: String @semanticNonNull
  node: Trackable @semanticNonNull
}

type ValueCompletion {
  value: Value @semanticNonNull
}

type ValueCompletionConnection {
  edges: [ValueCompletionEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type ValueCompletionEdge {
  cursor: String @semanticNonNull
  node: ValueCompletion @semanticNonNull
}
