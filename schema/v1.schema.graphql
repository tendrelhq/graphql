"""
Indicates that a position is semantically non null: it is only null if there is a matching error in the `errors` array.
In all other cases, the position is non-null.

Tools doing code generation may use this information to generate the position as non-null if field errors are handled out of band:

```graphql
type User {
    # email is semantically non-null and can be generated as non-null by error-handling clients.
    email: String @semanticNonNull
}
```

The `levels` argument indicates what levels are semantically non null in case of lists:

```graphql
type User {
    # friends is semantically non null
    friends: [User] @semanticNonNull # same as @semanticNonNull(levels: [0])

    # every friends[k] is semantically non null
    friends: [User] @semanticNonNull(levels: [1])

    # friends as well as every friends[k] is semantically non null
    friends: [User] @semanticNonNull(levels: [0, 1])
}
```

`levels` are zero indexed.
Passing a negative level or a level greater than the list dimension is an error.
"""
directive @semanticNonNull(levels: [Int] = [0]) on FIELD_DEFINITION

"""
Components characterize Entities as possessing a particular trait.
They are just simple structs, holding all data necessary to model that trait.
"""
interface Component {
  id: ID!
}

"""
Identifies an Entity as being "trackable".
What exactly this means depends on the type underlying said entity and is
entirely user defined.
"""
interface Trackable implements Component {
  id: ID!
  """
  Entrypoint into the "tracking system" for a given Entity. Note that while
  many types admit to being trackable, this does not mean that all entities
  of those types will be trackable. For example, `Location`s admit to being
  trackable, but are only trackable (in practice) when the user has
  explicitly configured them to be so.
  """
  trackable: TrackingSystem
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean @semanticNonNull
  hasPreviousPage: Boolean @semanticNonNull
  startCursor: String
}

type Query {
  trackable: TrackableConnection @semanticNonNull
}

type TrackableConnection {
  edges: [TrackableEdge!] @semanticNonNull
  pageInfo: PageInfo @semanticNonNull
  totalCount: Int @semanticNonNull
}

type TrackableEdge {
  cursor: String @semanticNonNull
  node: Trackable @semanticNonNull
}

"""
Identifies the current (or "active") state of a trackable Entity, as well as
the various legal state transitions that one can perform on said Entity.
"""
type TrackingSystem {
  """
  The current (or "active") state of the trackable Entity.
  It is perfectly valid for a trackable Entity to not be in *any* state, in
  which case it is entirely implementation defined as to the semantic meaning
  of such an "unknown" state. For example, this might indicate to an
  application that the Entity is "idle".
  """
  active: String
  transitions: [String!] @semanticNonNull
}
