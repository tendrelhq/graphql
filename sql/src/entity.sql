BEGIN;

/*
ALTER TABLE workresultinstance DROP CONSTRAINT workresultinstance_workresultinstanceentityvalue_fk;
ALTER TABLE entity.entityfieldinstance DROP CONSTRAINT efi_entityfieldinstancevaluelanguagetypeentityuuid_fk;
ALTER TABLE entity.entityfieldinstance DROP CONSTRAINT efi_entityfieldinstanceentityinstanceentityuuid_fk;
ALTER TABLE entity.entityfieldinstance DROP CONSTRAINT efi_entityfieldinstanceentityfieldentityuuid_fk;
ALTER TABLE entity.entityfieldinstance DROP CONSTRAINT efi_entityfieldinstancecustomerentityuuid_fk;
ALTER TABLE entity.entitytemplate DROP CONSTRAINT entitytemplatetypeentityuuid_entityinstance_fk;
ALTER TABLE entity.entitytemplate DROP CONSTRAINT entitytemplateexternalsystementityuuid_entityinstance_fk;
ALTER TABLE entity.entitytemplate DROP CONSTRAINT entitytemplatecustomerentityuuid_entityinstance_fk;
ALTER TABLE entity.entitytag DROP CONSTRAINT entitytag_entitytagownerentityuuid_fk;
ALTER TABLE entity.entitytag DROP CONSTRAINT entitytag_entitytagentityinstanceentityuuid_fk;
ALTER TABLE entity.entitytag DROP CONSTRAINT entitytag_entitytagcustagentityuuid_fk;
ALTER TABLE entity.entityinstance DROP CONSTRAINT entityinstance_entityinstancetypeentityuuid_fk;
ALTER TABLE entity.entityinstance DROP CONSTRAINT entityinstance_entityinstancesiteentityuuid_fk;
ALTER TABLE entity.entityinstance DROP CONSTRAINT entityinstance_entityinstanceparententityuuid_fk;
ALTER TABLE entity.entityinstance DROP CONSTRAINT entityinstance_entityinstanceexternalsystementityuuid_fk;
ALTER TABLE entity.entityinstance DROP CONSTRAINT entityinstance_entityinstanceentitytemplateentityuuid_fk;
ALTER TABLE entity.entityinstance DROP CONSTRAINT entityinstance_entityinstancecustomerentityuuid_fk;
ALTER TABLE entity.entityinstance DROP CONSTRAINT entityinstance_entityinstancecornerstoneentityuuid_fk;
ALTER TABLE entity.entityfield DROP CONSTRAINT entityfieldwidgetentityuuid_entityinstance_fk;
ALTER TABLE entity.entityfield DROP CONSTRAINT entityfieldformatentityuuid_entityinstance_fk;
ALTER TABLE entity.entityfield DROP CONSTRAINT entityfieldexternalsystementityuuid_entityinstance_fk;
ALTER TABLE entity.entityfield DROP CONSTRAINT entityfieldentitytypeentityuuid_entityinstance_fk;
ALTER TABLE entity.entityfield DROP CONSTRAINT entityfieldentityparenttypeentityuuid_entityinstance_fk;
ALTER TABLE entity.entityfield DROP CONSTRAINT entityfieldcustomerentityuuid_enitityinstance_fk;
ALTER TABLE entity.entitydescription DROP CONSTRAINT entitydescription_workdescriptionmimetypeuuid_fk;
ALTER TABLE entity.entitytag DROP CONSTRAINT entitytag_entitytagentitytemplateentityuuid_fk;
ALTER TABLE entity.entitydescription DROP CONSTRAINT entitydescription_entitytemplate_fk;
ALTER TABLE entity.entitytemplate DROP CONSTRAINT entitytemplateparententityuuid_entitytemplate_fk;
ALTER TABLE entity.entityfield DROP CONSTRAINT entityfield_entityfieldentitytemplateuuid_fkey;
ALTER TABLE entity.entitydescription DROP CONSTRAINT entitydescription_entityfield_fk;
DROP FUNCTION api.delete_systag(uuid,uuid);
DROP FUNCTION api.delete_reason_code(uuid,uuid,text,text);
DROP FUNCTION api.delete_location(uuid,uuid);
DROP FUNCTION api.delete_entity_template(uuid,uuid);
DROP FUNCTION api.delete_entity_tag(uuid,uuid);
DROP FUNCTION api.delete_entity_instance_file(uuid,uuid);
DROP FUNCTION api.delete_entity_instance_field(uuid,uuid);
DROP FUNCTION api.delete_entity_instance(uuid,uuid);
DROP FUNCTION api.delete_entity_field(uuid,uuid);
DROP FUNCTION api.delete_entity_description(uuid,uuid);
DROP FUNCTION api.delete_customer_requested_language(uuid,text);
DROP FUNCTION api.delete_customer(uuid,uuid);
DROP FUNCTION api.delete_custag(uuid,uuid);
DROP VIEW api.runtime_upload;
DROP VIEW api.language;
DROP VIEW api.entity_instance_field_ux;
DROP VIEW api.alltag;
DROP VIEW api.systag;
DROP VIEW api.reason_code;
DROP VIEW api.location;
DROP VIEW api.entity_template;
DROP VIEW api.entity_tag;
DROP VIEW api.entity_instance_file;
DROP VIEW api.entity_instance_field;
DROP VIEW api.entity_instance;
DROP VIEW api.entity_field;
DROP VIEW api.entity_description;
DROP VIEW api.customer_requested_language;
DROP VIEW api.customer;
DROP VIEW api.custag;
DROP TABLE entity.runtime_upload_prepped; --==>> !!! ATTENTION !!! <<==--
DROP TABLE entity.entitytemplate; --==>> !!! ATTENTION !!! <<==--
DROP TABLE entity.entitytag; --==>> !!! ATTENTION !!! <<==--
DROP TABLE entity.entityinstance; --==>> !!! ATTENTION !!! <<==--
DROP TABLE entity.entityfield; --==>> !!! ATTENTION !!! <<==--
DROP TABLE entity.entitydescription; --==>> !!! ATTENTION !!! <<==--
DROP TABLE entity.runtime_upload_staging; --==>> !!! ATTENTION !!! <<==--
DROP FUNCTION entity.util_test_createlog(bigint,bigint,boolean,text,text,text,text,timestamp with time zone,boolean);
DROP PROCEDURE entity.test_entity_withresults();
DROP PROCEDURE entity.test_entity_create(boolean,bigint);
DROP PROCEDURE entity.test_entity();
DROP PROCEDURE entity.import_workresultinstanceentityvalue(text);
DROP PROCEDURE entity.import_entity_systag(text);
DROP PROCEDURE entity.import_entity_location(text);
DROP PROCEDURE entity.import_entity_customer(text);
DROP PROCEDURE entity.import_entity_custag(text);
DROP PROCEDURE entity.import_entity(text);
DROP FUNCTION entity.func_test_template_field(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_template(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_systag(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_location(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_instance_field(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_instance(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_import(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_entitytag(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_entityfileinstance(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_entitydescription(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_entity();
DROP FUNCTION entity.func_test_dataintegrity(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_customer(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_test_custag(bigint,bigint,boolean,text,text);
DROP FUNCTION entity.func_dim_languagetranslation_read_min(uuid,uuid);
DROP PROCEDURE entity.enable_timesheet(uuid,text,uuid,text,uuid,text,text,bigint);
DROP PROCEDURE entity.enable_runtime(uuid,text,uuid,text,uuid,text,bigint,text);
DROP PROCEDURE entity.enable_pinpoint(uuid,text,uuid,text,uuid,text,text,bigint);
DROP PROCEDURE entity.enable_checklist(uuid,text,uuid,text,uuid,text,text,bigint);
DROP PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text);
DROP PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text);
DROP PROCEDURE entity.crud_systag_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_systag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_location_update(uuid,uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,timestamp with time zone,timestamp with time zone,boolean,boolean,text);
DROP PROCEDURE entity.crud_location_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_location_create(uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_entitytemplate_update(uuid,uuid,uuid,text,uuid,text,text,text,integer,boolean,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid);
DROP FUNCTION entity.crud_entitytemplate_read_min(uuid,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entitytemplate_field_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_entitytemplate_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_entitytemplate_create(uuid,uuid,integer,uuid,text,text,boolean,text,uuid,text,uuid,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_entitytag_update(uuid,uuid,uuid,uuid,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint);
DROP FUNCTION entity.crud_entitytag_read_min(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entitytag_read_full(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_entitytag_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_entitytag_create(uuid,uuid,uuid,uuid,uuid,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_entityinstance_update(uuid,uuid,uuid,text,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid);
DROP FUNCTION entity.crud_entityinstance_read_min(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entityinstance_read_full(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_entityinstance_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_entityinstance_create(uuid,uuid,text,uuid,uuid,integer,uuid,text,text,text,uuid,text,uuid,boolean,boolean,uuid,bigint);
DROP PROCEDURE entity.crud_entityfileinstance_update(uuid,uuid,uuid,uuid,text,uuid,boolean,boolean,text,uuid);
DROP FUNCTION entity.crud_entityfileinstance_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entityfileinstance_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_entityfileinstance_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_entityfileinstance_create(uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_entityfieldinstance_update(uuid,uuid,uuid,uuid,text,text,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid);
DROP FUNCTION entity.crud_entityfieldinstance_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entityfieldinstance_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entityfieldinstance_read_api(uuid[],uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_entityfieldinstance_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_entityfieldinstance_create(uuid,uuid,uuid,text,text,uuid,text,uuid,text,text,uuid,boolean,boolean,uuid,bigint);
DROP PROCEDURE entity.crud_entityfield_update(uuid,uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid);
DROP FUNCTION entity.crud_entityfield_read_min(uuid,uuid,uuid,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_entityfield_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_entityfield_create(uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,text,uuid,text,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,uuid,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_entitydescription_update(uuid,uuid,uuid,uuid,text,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid);
DROP FUNCTION entity.crud_entitydescription_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_entitydescription_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_entitydescription_create(uuid,uuid,uuid,text,text,text,text,uuid,uuid,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_customerrequestedlanguage_update(bigint,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint);
DROP PROCEDURE entity.crud_customerrequestedlanguage_delete(uuid,text,bigint);
DROP PROCEDURE entity.crud_customerrequestedlanguage_create(uuid,uuid,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_customer_update(text,text,text,uuid,uuid,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,uuid,text);
DROP FUNCTION entity.crud_customer_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_customer_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_customer_create_tendrel(text,uuid,uuid,text,uuid,boolean,boolean,text,text,text,text,text,uuid,uuid[],text,bigint);
DROP PROCEDURE entity.crud_customer_create(text,uuid,uuid,text,uuid,boolean,boolean,uuid[],bigint);
DROP PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text);
DROP PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text);
DROP FUNCTION entity.crud_custag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_custag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP PROCEDURE entity.crud_custag_delete(uuid,uuid,bigint);
DROP PROCEDURE entity.crud_custag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint);
DROP PROCEDURE entity.crud_admin_create(text,text,text,text,text,uuid,uuid,uuid[],bigint);
DROP PROCEDURE entity.create_runtime_instances();
DROP PROCEDURE entity.create_run_instances(uuid);
DROP PROCEDURE entity.create_pulse_instances();
DROP PROCEDURE entity.create_idle_instances(uuid);
DROP PROCEDURE entity.create_downtime_instances(uuid);
DROP PROCEDURE entity.create_batch_instances(uuid);
DROP FUNCTION entity.crud_systag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_systag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_location_read_min(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_location_read_full(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entitytag_read_api(uuid[],uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP TABLE entity.entityfileinstance; --==>> !!! ATTENTION !!! <<==--
DROP TABLE entity.entityfieldinstance; --==>> !!! ATTENTION !!! <<==--
DROP FUNCTION entity.crud_entityinstance_read_api(uuid[],uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entitytemplate_read_full(uuid,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entityfield_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_entitydescription_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_systag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_customer_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);
DROP FUNCTION entity.crud_custag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid);

DROP SCHEMA entity;
*/

CREATE SCHEMA entity;

GRANT USAGE ON SCHEMA entity TO authenticated;
GRANT USAGE ON SCHEMA entity TO graphql;

-- DEPENDANTS


-- Type: FUNCTION ; Name: entity.crud_custag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_custag_read_api(read_ownerentityuuid uuid[], read_siteentityuuid uuid, read_custagentityuuid uuid, read_custagparententityuuid uuid, read_allcustags boolean, read_custagsenddeleted boolean, read_custagsenddrafts boolean, read_custagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, custagid bigint, custaguuid text, custagentityuuid uuid, custagownerentityuuid uuid, custagownerentityname text, custagparententityuuid uuid, custagparentname text, custagcornerstoneentityid uuid, custagcustomerid bigint, custagcustomeruuid text, custagcustomerentityuuid uuid, custagcustomername text, custagnameuuid text, custagname text, custagdisplaynameuuid text, custagdisplayname text, custagtype text, custagcreateddate timestamp with time zone, custagmodifieddate timestamp with time zone, custagstartdate timestamp with time zone, custagenddate timestamp with time zone, custagexternalid text, custagexternalsystementityuuid uuid, custagexternalsystemenname text, custagmodifiedbyuuid text, custagabbreviationentityuuid uuid, custagabbreviationname text, custagorder integer, systagsenddeleted boolean, systagsenddrafts boolean, systagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	templanguagetranslationtypeid bigint;
BEGIN

-- Need to handle language translation in full version.  minimal version does not use languagetranslation
-- Might want to add a parameter to send in active as a boolean
-- Curretnly ignores site since custag does not care about site.  Custag does.  
-- May want to flip paramaeters to be arrays in the future.  

/*  examples

-- call entity.test_entity()

-- all customers all custags 
select * from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- all custags for a specific customer
select * from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- all custags for a parent
select * from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- fail scenario for parent
select * from entity.crud_custag_read_full(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- specific custags
-- succeed
select * from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

--fail
select * from entity.crud_custag_read_full(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

*/

select ei.entityinstanceoriginalid
into templanguagetranslationtypeid
from entity.entityinstance ei
where entityinstanceuuid=read_languagetranslationtypeentityuuid; 

return query
	SELECT 
		read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
		ei.entityinstanceoriginalid as custagid,
		ei.entityinstanceoriginaluuid as custaguuid,
		ei.entityinstanceuuid as custagentityuuid,
	    ei.entityinstanceownerentityuuid,
		COALESCE(customerlt.languagetranslationvalue, customerlm.languagemastersource) AS customername,	
		ei.entityinstanceparententityuuid as custagparententityuuid,
		COALESCE(parentlt.languagetranslationvalue, parentlm.languagemastersource) AS custagparentname,
		ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
		null::bigint as custagcustomerid,	
		null::text as custagcustomeruuid,
		null::uuid as custagcustomerentityuuid,
		null::text as custagcustomername,
		ei.entityinstancenameuuid as custagnameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS custagname,
		dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
		COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS custagdisplayname,
		ei.entityinstancetype as custagtype,
		ei.entityinstancecreateddate as custagcreateddate,
		ei.entityinstancemodifieddate as custagmodifieddate,	
		ei.entityinstancestartdate as custagstartdate,
		ei.entityinstanceenddate as custagenddate,
		ei.entityinstanceexternalid as custagexternalid,
		ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
		null as custagexternalsystementname,
		ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
		null::uuid as custagabbreviationentityuuid,
		null::text as custagabbreviationname,
		ei.entityinstancecornerstoneorder as custagorder,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
		case when ei.entityinstancedeleted then false
				when ei.entityinstancedraft then false
				when ei.entityinstanceenddate::Date > now()::date 
					and ei.entityinstancestartdate < now() then false
				else true
		end as entityinstanceactive
	from entity.entityinstance ei
		inner join entity.entityinstance customer
			on customer.entityinstanceuuid = ei.entityinstanceownerentityuuid
				and ei.entityinstanceownerentityuuid = ANY(read_ownerentityuuid)
				and ei.entityinstanceentitytemplateentityuuid = '30a317b8-6a56-45b4-8480-f9b58e099c77'
		inner join public.languagemaster customerlm
			on customer.entityinstancenameuuid = customerlm.languagemasteruuid
		left join public.languagetranslations customerlt
			on customerlm.languagemasterid = customerlt.languagetranslationmasterid
				and customerlt.languagetranslationtypeid  = templanguagetranslationtypeid
		inner join entity.entityinstance parent
			on parent.entityinstanceuuid = ei.entityinstanceparententityuuid
		inner join public.languagemaster parentlm
			on parent.entityinstancenameuuid = parentlm.languagemasteruuid
		left join public.languagetranslations parentlt
			on parentlm.languagemasterid = parentlt.languagetranslationmasterid	
				and parentlt.languagetranslationtypeid  = templanguagetranslationtypeid
		inner join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
			on namelt.languagetranslationmasterid  = namelm.languagemasterid
				and namelt.languagetranslationtypeid = templanguagetranslationtypeid
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldentityuuid = '1b29e7b0-0800-4366-b79e-424dd9bafa71' 
		left join languagemaster displaylm
			on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
		left join public.languagetranslations displaylt
			on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
				and displaylt.languagetranslationtypeid = templanguagetranslationtypeid;
return;


End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_custag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_customer_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_customer_read_full(read_customerentityuuid uuid, read_customerownerentityuuid uuid, read_customerparententityuuid uuid, read_allcustomers boolean, read_customersenddeleted boolean, read_customersenddrafts boolean, read_customersendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(customerid bigint, customeruuid text, customerentityuuid uuid, customerownerentityuuid uuid, customerparententityuuid uuid, customercornerstoneentityuuid uuid, customercornerstoneorder integer, customernameuuid text, customername text, customerdisplaynameuuid text, customerdisplayname text, customertypeentityuuid uuid, customertype text, customercreateddate timestamp with time zone, customermodifieddate timestamp with time zone, customerstartdate timestamp with time zone, customerenddate timestamp with time zone, customermodifiedbyuuid text, customerexternalid text, customerexternalsystementityuuid uuid, customerexternalsystemname text, customerrefid bigint, customerrefuuid text, customerlanguagetypeentityuuid uuid, customersenddeleted boolean, customersenddrafts boolean, customersendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare

	templanguagetypeid bigint;
	templanguagetypeuuid uuid;
	templanguagetypeentityuuid uuid;
	allowners boolean; 
	tempcustomersenddeleted boolean[];
	tempcustomersenddrafts boolean[];
	tempcustomersendinactive boolean[];
	tendreluuid uuid;
	englishuuid uuid;
BEGIN

-- Curently ignores language translation.  We should change this in the future for customer. 
-- Might want to add a parameter to send in active as a boolean

/*  Examples

-- specific customer
select * 
from entity.crud_customer_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, false, null,null, null,null)

-- all customers
select * from entity.crud_customer_read_full(null,null, null, true, null,null, null,null)

select * from entity.crud_customer_read_full(null,null, null, true, null,null, null,null,null, null,'190d8c53-b076-460d-8c10-8ca35396429a')

-- customers to a specific owner
select * 
from entity.crud_customer_read_full(null,'f90d618d-5de7-4126-8c65-0afb700c6c61',null,false, null,null, null,null)

-- customers to a specific parent
select * 
from entity.crud_customer_read_full(null,null,'f90d618d-5de7-4126-8c65-0afb700c6c61',false,null,null, null, null)

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';

if read_languagetranslationtypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = read_languagetranslationtypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,templanguagetypeentityuuid);

if templanguagetypeid isNull
	then return;
end if;

if  read_customersenddeleted = false
	then tempcustomersenddeleted = Array[false];
	else tempcustomersenddeleted = Array[true,false];
end if;

if  read_customersenddrafts = false
	then tempcustomersenddrafts = Array[false];
	else tempcustomersenddrafts = Array[true,false];
end if;

if  read_customersendinactive = false
	then tempcustomersendinactive = Array[true];
	else tempcustomersendinactive = Array[true,false];
end if;		

if read_allcustomers = true
	then
	return query 
		select *
		from (SELECT 
	    ei.entityinstanceoriginalid as customerid,
	    ei.entityinstanceoriginaluuid as customeruuid,
	    ei.entityinstanceuuid as customerentityuuid,
	    ei.entityinstanceownerentityuuid as customerownerentityuuid,
	    ei.entityinstanceparententityuuid as customerparententityuuid,	
		ei.entityinstancecornerstoneentityuuid as customercornerstoneentityuuid,
		ei.entityinstancecornerstoneorder as customercornerstoneorder,
		entityinstancenameuuid as customernameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS customername,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
		coalesce(lt.languagetranslationvalue,dn.entityfieldinstancevalue)  as customerdisplayname,  
	    custtype.entityfieldinstancevalue::uuid as customertypeentityuuid,
		etn.systagtype as customertype,
	    ei.entityinstancecreateddate as customercreateddate,
	    ei.entityinstancemodifieddate as customermodifieddate,
	    ei.entityinstancestartdate as customerstartdate,	
	    ei.entityinstanceenddate as customerenddate,
	    ei.entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    ei.entityinstanceexternalid as customerexternalid,
		ei.entityinstanceexternalsystementityuuid as customerexternalsystementityuuid, 
		sys.systagtype as customerexternalsystemname, 
		ei.entityinstancerefid as customerrefid,
		ei.entityinstancerefuuid as customerrefuuid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeuuid,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance ei
		JOIN entity.entityfieldinstance efi 
			on ei.entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and ei.entityinstanceentitytemplatename = 'Customer'
				and ei.entityinstancedeleted = ANY (tempcustomersenddeleted)
				and ei.entityinstancedraft = ANY (tempcustomersenddrafts)
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,templanguagetypeentityuuid)) as sys
			on sys.systagentityuuid = ei.entityinstanceexternalsystementityuuid
		join entity.entityfieldinstance custtype
			on entityinstanceuuid = custtype.entityfieldinstanceentityinstanceentityuuid
				and custtype.entityfieldinstanceentityfieldname = 'customertypeuuid'
		inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,templanguagetypeentityuuid)) as etn
			on etn.systagentityuuid = custtype.entityfieldinstancevalue::uuid
		left join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, templanguagetypeentityuuid, null, false,null,null, null,englishuuid) as foo)
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname'
		left join public.languagetranslations lt
			on lt.languagetranslationmasterid = (select languagemasterid 
													from public.languagemaster 
													where languagemasteruuid = dn.entityfieldinstancevaluelanguagemasteruuid)
				and lt.languagetranslationtypeid = templanguagetypeid) as foo
		where foo.entityinstanceactive = Any (tempcustomersendinactive) ;
		return;
end if;

if read_customerownerentityuuid notNull
then 
return query 
		select *
		from (SELECT 
	    ei.entityinstanceoriginalid as customerid,
	    ei.entityinstanceoriginaluuid as customeruuid,
	    ei.entityinstanceuuid as customerentityuuid,
	    ei.entityinstanceownerentityuuid as customerownerentityuuid,
	    ei.entityinstanceparententityuuid as customerparententityuuid,	
		ei.entityinstancecornerstoneentityuuid as customercornerstoneentityuuid,
		ei.entityinstancecornerstoneorder as customercornerstoneorder,
		entityinstancenameuuid as customernameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS customername,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
		coalesce(lt.languagetranslationvalue,dn.entityfieldinstancevalue)  as customerdisplayname,  
	    custtype.entityfieldinstancevalue::uuid as customertypeentityuuid,
		etn.systagtype as customertype,
	    ei.entityinstancecreateddate as customercreateddate,
	    ei.entityinstancemodifieddate as customermodifieddate,
	    ei.entityinstancestartdate as customerstartdate,	
	    ei.entityinstanceenddate as customerenddate,
	    ei.entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    ei.entityinstanceexternalid as customerexternalid,
		ei.entityinstanceexternalsystementityuuid as customerexternalsystementityuuid, 
		sys.systagtype as customerexternalsystemname, 
		ei.entityinstancerefid as customerrefid,
		ei.entityinstancerefuuid as customerrefuuid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeuuid,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance ei
		JOIN entity.entityfieldinstance efi 
			on ei.entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and ei.entityinstanceentitytemplatename = 'Customer'
				and ei.entityinstanceownerentityuuid = read_customerownerentityuuid
				and ei.entityinstancedeleted = ANY (tempcustomersenddeleted)
				and ei.entityinstancedraft = ANY (tempcustomersenddrafts)
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,templanguagetypeentityuuid)) as sys
			on sys.systagentityuuid = ei.entityinstanceexternalsystementityuuid
		join entity.entityfieldinstance custtype
			on entityinstanceuuid = custtype.entityfieldinstanceentityinstanceentityuuid
				and custtype.entityfieldinstanceentityfieldname = 'customertypeuuid'
		inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,templanguagetypeentityuuid)) as etn
			on etn.systagentityuuid = custtype.entityfieldinstancevalue::uuid
		left join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, templanguagetypeentityuuid, null, false,null,null, null,englishuuid) as foo)
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname'
		left join public.languagetranslations lt
			on lt.languagetranslationmasterid = (select languagemasterid 
													from public.languagemaster 
													where languagemasteruuid = dn.entityfieldinstancevaluelanguagemasteruuid)
				and lt.languagetranslationtypeid = templanguagetypeid) as foo
		where foo.entityinstanceactive = Any (tempcustomersendinactive) ;
		return;
end if;

if read_customerparententityuuid notNull
then 
return query 
		select *
		from (SELECT 
	    ei.entityinstanceoriginalid as customerid,
	    ei.entityinstanceoriginaluuid as customeruuid,
	    ei.entityinstanceuuid as customerentityuuid,
	    ei.entityinstanceownerentityuuid as customerownerentityuuid,
	    ei.entityinstanceparententityuuid as customerparententityuuid,	
		ei.entityinstancecornerstoneentityuuid as customercornerstoneentityuuid,
		ei.entityinstancecornerstoneorder as customercornerstoneorder,
		entityinstancenameuuid as customernameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS customername,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
		coalesce(lt.languagetranslationvalue,dn.entityfieldinstancevalue)  as customerdisplayname,  
	    custtype.entityfieldinstancevalue::uuid as customertypeentityuuid,
		etn.systagtype as customertype,
	    ei.entityinstancecreateddate as customercreateddate,
	    ei.entityinstancemodifieddate as customermodifieddate,
	    ei.entityinstancestartdate as customerstartdate,	
	    ei.entityinstanceenddate as customerenddate,
	    ei.entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    ei.entityinstanceexternalid as customerexternalid,
		ei.entityinstanceexternalsystementityuuid as customerexternalsystementityuuid, 
		sys.systagtype as customerexternalsystemname, 
		ei.entityinstancerefid as customerrefid,
		ei.entityinstancerefuuid as customerrefuuid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeuuid,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance ei
		JOIN entity.entityfieldinstance efi 
			on ei.entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and ei.entityinstanceentitytemplatename = 'Customer'
				and ei.entityinstanceparententityuuid = read_customerparententityuuid
				and ei.entityinstancedeleted = ANY (tempcustomersenddeleted)
				and ei.entityinstancedraft = ANY (tempcustomersenddrafts)
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,templanguagetypeentityuuid)) as sys
			on sys.systagentityuuid = ei.entityinstanceexternalsystementityuuid
		join entity.entityfieldinstance custtype
			on entityinstanceuuid = custtype.entityfieldinstanceentityinstanceentityuuid
				and custtype.entityfieldinstanceentityfieldname = 'customertypeuuid'
		inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,templanguagetypeentityuuid)) as etn
			on etn.systagentityuuid = custtype.entityfieldinstancevalue::uuid
		left join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, templanguagetypeentityuuid, null, false,null,null, null,englishuuid) as foo)
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname'
		left join public.languagetranslations lt
			on lt.languagetranslationmasterid = (select languagemasterid 
													from public.languagemaster 
													where languagemasteruuid = dn.entityfieldinstancevaluelanguagemasteruuid)
				and lt.languagetranslationtypeid = templanguagetypeid) as foo
		where foo.entityinstanceactive = Any (tempcustomersendinactive) ;
		return;
end if;

return query 
		select *
		from (SELECT 
	    ei.entityinstanceoriginalid as customerid,
	    ei.entityinstanceoriginaluuid as customeruuid,
	    ei.entityinstanceuuid as customerentityuuid,
	    ei.entityinstanceownerentityuuid as customerownerentityuuid,
	    ei.entityinstanceparententityuuid as customerparententityuuid,	
		ei.entityinstancecornerstoneentityuuid as customercornerstoneentityuuid,
		ei.entityinstancecornerstoneorder as customercornerstoneorder,
		entityinstancenameuuid as customernameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS customername,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
		coalesce(lt.languagetranslationvalue,dn.entityfieldinstancevalue)  as customerdisplayname,  
	    custtype.entityfieldinstancevalue::uuid as customertypeentityuuid,
		etn.systagtype as customertype,
	    ei.entityinstancecreateddate as customercreateddate,
	    ei.entityinstancemodifieddate as customermodifieddate,
	    ei.entityinstancestartdate as customerstartdate,	
	    ei.entityinstanceenddate as customerenddate,
	    ei.entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    ei.entityinstanceexternalid as customerexternalid,
		ei.entityinstanceexternalsystementityuuid as customerexternalsystementityuuid, 
		sys.systagtype as customerexternalsystemname, 
		ei.entityinstancerefid as customerrefid,
		ei.entityinstancerefuuid as customerrefuuid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeuuid,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance ei
		JOIN entity.entityfieldinstance efi 
			on ei.entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and entityinstanceuuid = read_customerentityuuid
				and ei.entityinstancedeleted = ANY (tempcustomersenddeleted)
				and ei.entityinstancedraft = ANY (tempcustomersenddrafts)
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,templanguagetypeentityuuid)) as sys
			on sys.systagentityuuid = ei.entityinstanceexternalsystementityuuid
		join entity.entityfieldinstance custtype
			on entityinstanceuuid = custtype.entityfieldinstanceentityinstanceentityuuid
				and custtype.entityfieldinstanceentityfieldname = 'customertypeuuid'
		inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,templanguagetypeentityuuid)) as etn
			on etn.systagentityuuid = custtype.entityfieldinstancevalue::uuid
		left join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, templanguagetypeentityuuid, null, false,null,null, null,englishuuid) as foo)
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname'
		left join public.languagetranslations lt
			on lt.languagetranslationmasterid = (select languagemasterid 
													from public.languagemaster 
													where languagemasteruuid = dn.entityfieldinstancevaluelanguagemasteruuid)
				and lt.languagetranslationtypeid = templanguagetypeid) as foo
		where foo.entityinstanceactive = Any (tempcustomersendinactive) ;
	return;
End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_customer_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_customer_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_customer_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_customer_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_systag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_systag_read_full(read_ownerentityuuid uuid, read_siteentityuuid uuid, read_systagentityuuid uuid, read_systagparententityuuid uuid, read_allsystags boolean, read_systagsenddeleted boolean, read_systagsenddrafts boolean, read_systagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, systagid bigint, systaguuid text, systagentityuuid uuid, systagcustomerid bigint, systagcustomeruuid text, systagcustomerentityuuid uuid, systagcustomername text, systagnameuuid text, systagname text, systagdisplaynameuuid text, systagdisplayname text, systagtype text, systagcreateddate timestamp with time zone, systagmodifieddate timestamp with time zone, systagstartdate timestamp with time zone, systagenddate timestamp with time zone, systagexternalid text, systagexternalsystementityuuid uuid, systagexternalsystementname text, systagmodifiedbyuuid text, systagabbreviationentityuuid uuid, systagabbreviationname text, systagparententityuuid uuid, systagparentname text, systagorder integer, systagsenddeleted boolean, systagsenddrafts boolean, systagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	tempsystagsenddeleted boolean[];
	tempsystagsenddrafts boolean[];
	tempsystagsendinactive boolean[];
	tendreluuid uuid;
	englishuuid uuid;
BEGIN

/*  examples

-- all customers all systags 
select * from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- all systags for a specific customer
select * from entity.crud_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- all systags for a parent
select * from entity.crud_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- fail scenario for parent
select * from entity.crud_systag_read_full(null,null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- specific systags
select * from entity.crud_systag_read_full(null, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

select * from entity.crud_systag_read_full(null, null, '580f6ee2-42ca-4a5b-9e18-9ea0c168845a', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_systagsenddeleted = false
	then tempsystagsenddeleted = Array[false];
	else tempsystagsenddeleted = Array[true,false];
end if;

if read_systagsenddrafts = false
	then tempsystagsenddrafts = Array[false];
	else tempsystagsenddrafts = Array[true,false];
end if;

if read_systagsendinactive = false
	then tempsystagsendinactive = Array[true];
	else tempsystagsendinactive = Array[true,false];
end if;

if read_allsystags = true
	then
	return query
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
		ei.entityinstanceoriginalid as systagid,
		ei.entityinstanceoriginaluuid as systaguuid,
		ei.entityinstanceuuid as systagentityuuid,
		cust.customerid as systagcustomerid,	
		cust.customeruuid as systagcustomeruuid,
		cust.customerentityuuid::uuid as systagcustomerentityuuid,
		cust.customername as systagcustomername,
		ei.entityinstancenameuuid as systagnameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS systagname,
		dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
		COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS systagdisplayname,
		ei.entityinstancetype as systagtype,
		ei.entityinstancecreateddate as systagcreateddate,
		ei.entityinstancemodifieddate as systagmodifieddate,	
		ei.entityinstancestartdate as systagstartdate,
		ei.entityinstanceenddate as systagenddate,
		ei.entityinstanceexternalid as systagexternalid,
		ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
		systemname.systagtype as systagexternalsystementname,
		ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
		abb.entityfieldinstancevalue::uuid as systagabbreviationentityuuid,
		abbname.systagtype as systagabbreviationname,
		ei.entityinstanceparententityuuid as systagparententityuuid,
		parname.systagtype as systagparentname,
		ei.entityinstancecornerstoneorder as systagorder,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance ei
		Join (select customerid,customeruuid, customerentityuuid,customername  from entity.crud_customer_read_full(read_ownerentityuuid,null, null,allowners,read_systagsenddeleted,read_systagsenddrafts,read_systagsendinactive, null)) as cust  
			on cust.customerentityuuid = ei.entityinstanceownerentityuuid
				and ei.entityinstanceentitytemplatename = 'System Tag' 
				and ei.entityinstancedeleted = ANY (tempsystagsenddeleted)
				and ei.entityinstancedraft = ANY (tempsystagsenddrafts)
		left join languagemaster namelm
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
			on namelt.languagetranslationmasterid  = namelm.languagemasterid
				and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid) as foo)
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'systagdisplayname' 
		join entity.entityfieldinstance abb
			on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
				and abb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid'      	
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as systemname
			on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as abbname
			on abb.entityfieldinstancevalue =  abbname.systagentityuuid::text
		inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as parname
			on ei.entityinstanceparententityuuid =  parname.systagentityuuid
		left join languagemaster displaylm
			on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
		left join public.languagetranslations displaylt
			on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
				and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid) as foo2)) as foo3
		where foo3.entityinstanceactive = Any (tempsystagsendinactive) ;  
		return;
end if;

if read_systagentityuuid notNull 
	then
	return query
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
		ei.entityinstanceoriginalid as systagid,
		ei.entityinstanceoriginaluuid as systaguuid,
		ei.entityinstanceuuid as systagentityuuid,
		cust.customerid as systagcustomerid,	
		cust.customeruuid as systagcustomeruuid,
		cust.customerentityuuid::uuid as systagcustomerentityuuid,
		cust.customername as systagcustomername,
		ei.entityinstancenameuuid as systagnameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS systagname,
		dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
		COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS systagdisplayname,
		ei.entityinstancetype as systagtype,
		ei.entityinstancecreateddate as systagcreateddate,
		ei.entityinstancemodifieddate as systagmodifieddate,	
		ei.entityinstancestartdate as systagstartdate,
		ei.entityinstanceenddate as systagenddate,
		ei.entityinstanceexternalid as systagexternalid,
		ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
		systemname.systagtype as systagexternalsystementname,
		ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
		abb.entityfieldinstancevalue::uuid as systagabbreviationentityuuid,
		abbname.systagtype as systagabbreviationname,
		ei.entityinstanceparententityuuid as systagparententityuuid,
		parname.systagtype as systagparentname,
		ei.entityinstancecornerstoneorder as systagorder,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid,customername  from entity.crud_customer_read_full(read_ownerentityuuid,null, null,allowners, read_systagsenddeleted,read_systagsenddrafts,read_systagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'System Tag' 
			and ei.entityinstanceuuid = read_systagentityuuid
			and ei.entityinstancedeleted = ANY (tempsystagsenddeleted)
			and ei.entityinstancedraft = ANY (tempsystagsenddrafts)
		left join languagemaster namelm
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
			on namelt.languagetranslationmasterid  = namelm.languagemasterid
				and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid) as foo)
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'systagdisplayname' 
		join entity.entityfieldinstance abb
			on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
				and abb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid'      	
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as systemname
			on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as abbname
			on abb.entityfieldinstancevalue =  abbname.systagentityuuid::text
		inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as parname
			on ei.entityinstanceparententityuuid =  parname.systagentityuuid
		left join languagemaster displaylm
			on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
		left join public.languagetranslations displaylt
			on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
				and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid) as foo2)) as foo3
				where foo3.entityinstanceactive = Any (tempsystagsendinactive) ;   
		return;
end if;

if read_systagparententityuuid isNull and read_ownerentityuuid notNull
	then
	return query
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
		ei.entityinstanceoriginalid as systagid,
		ei.entityinstanceoriginaluuid as systaguuid,
		ei.entityinstanceuuid as systagentityuuid,
		cust.customerid as systagcustomerid,	
		cust.customeruuid as systagcustomeruuid,
		cust.customerentityuuid::uuid as systagcustomerentityuuid,
		cust.customername as systagcustomername,
		ei.entityinstancenameuuid as systagnameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS systagname,
		dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
		COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS systagdisplayname,
		ei.entityinstancetype as systagtype,
		ei.entityinstancecreateddate as systagcreateddate,
		ei.entityinstancemodifieddate as systagmodifieddate,	
		ei.entityinstancestartdate as systagstartdate,
		ei.entityinstanceenddate as systagenddate,
		ei.entityinstanceexternalid as systagexternalid,
		ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
		systemname.systagtype as systagexternalsystementname,
		ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
		abb.entityfieldinstancevalue::uuid as systagabbreviationentityuuid,
		abbname.systagtype as systagabbreviationname,
		ei.entityinstanceparententityuuid as systagparententityuuid,
		parname.systagtype as systagparentname,
		ei.entityinstancecornerstoneorder as systagorder,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid,customername from entity.crud_customer_read_full(read_ownerentityuuid,null, null,allowners, read_systagsenddeleted,read_systagsenddrafts,read_systagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'System Tag'  
			and ei.entityinstanceownerentityuuid = read_ownerentityuuid
			and ei.entityinstanceparententityuuid = read_systagparententityuuid
			and ei.entityinstancedeleted = ANY (tempsystagsenddeleted)
			and ei.entityinstancedraft = ANY (tempsystagsenddrafts)
		left join languagemaster namelm
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
			on namelt.languagetranslationmasterid  = namelm.languagemasterid
				and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid) as foo)
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'systagdisplayname' 
		join entity.entityfieldinstance abb
			on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
				and abb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid'      	
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as systemname
			on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as abbname
			on abb.entityfieldinstancevalue =  abbname.systagentityuuid::text
		inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as parname
			on ei.entityinstanceparententityuuid =  parname.systagentityuuid
		left join languagemaster displaylm
			on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
		left join public.languagetranslations displaylt
			on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
				and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid) as foo2)) as foo3
				where foo3.entityinstanceactive = Any (tempsystagsendinactive) ;   
	return;
end if;

if read_systagparententityuuid notNull and read_ownerentityuuid notNull
	then
	return query
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
		ei.entityinstanceoriginalid as systagid,
		ei.entityinstanceoriginaluuid as systaguuid,
		ei.entityinstanceuuid as systagentityuuid,
		cust.customerid as systagcustomerid,	
		cust.customeruuid as systagcustomeruuid,
		cust.customerentityuuid::uuid as systagcustomerentityuuid,
		cust.customername as systagcustomername,
		ei.entityinstancenameuuid as systagnameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS systagname,
		dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
		COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS systagdisplayname,
		ei.entityinstancetype as systagtype,
		ei.entityinstancecreateddate as systagcreateddate,
		ei.entityinstancemodifieddate as systagmodifieddate,	
		ei.entityinstancestartdate as systagstartdate,
		ei.entityinstanceenddate as systagenddate,
		ei.entityinstanceexternalid as systagexternalid,
		ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
		systemname.systagtype as systagexternalsystementname,
		ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
		abb.entityfieldinstancevalue::uuid as systagabbreviationentityuuid,
		abbname.systagtype as systagabbreviationname,
		ei.entityinstanceparententityuuid as systagparententityuuid,
		parname.systagtype as systagparentname,
		ei.entityinstancecornerstoneorder as systagorder,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid,customername from entity.crud_customer_read_full(read_ownerentityuuid,null, null,allowners, read_systagsenddeleted,read_systagsenddrafts,read_systagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'System Tag'  
			and ei.entityinstanceownerentityuuid = read_ownerentityuuid
			and ei.entityinstanceparententityuuid = read_systagparententityuuid
			and ei.entityinstancedeleted = ANY (tempsystagsenddeleted)
			and ei.entityinstancedraft = ANY (tempsystagsenddrafts)
		left join languagemaster namelm
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
			on namelt.languagetranslationmasterid  = namelm.languagemasterid
				and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid) as foo)
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'systagdisplayname' 
		join entity.entityfieldinstance abb
			on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
				and abb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid'      	
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as systemname
			on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as abbname
			on abb.entityfieldinstancevalue =  abbname.systagentityuuid::text
		inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid)) as parname
			on ei.entityinstanceparententityuuid =  parname.systagentityuuid
		left join languagemaster displaylm
			on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
		left join public.languagetranslations displaylt
			on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
				and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,read_systagsenddeleted, read_systagsenddrafts,read_systagsendinactive,englishuuid) as foo2)) as foo3
				where foo3.entityinstanceactive = Any (tempsystagsendinactive) ;   
		return;
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_systag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entitydescription_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entitydescription_read_full(read_ownerentityuuid uuid, read_entitydescriptionentityuuid uuid, read_entitytemplateentityuuid uuid, read_entityfieldentityuuid uuid, read_entitydescriptionsenddeleted boolean, read_entitydescriptionsenddrafts boolean, read_entitydescriptionsendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entitydescriptionuuid uuid, entitydescriptionownerentityuuid uuid, entitydescriptionownerentityname text, entitydescriptionentitytemplateentityuuid uuid, entitydescriptionentitytemplateentityname text, entitydescriptionentityfieldentityduuid uuid, entitydescriptionentityfieldentitydname text, entitydescriptionname text, entitydescriptionlanguagemasteruuid text, entitydescriptionsoplink text, entitydescriptionfile text, entitydescriptionicon text, entitydescriptiontranslatedname text, entitydescriptioncreateddate timestamp with time zone, entitydescriptionmodifieddate timestamp with time zone, entitydescriptionstartdate timestamp with time zone, entitydescriptionenddate timestamp with time zone, entitydescriptionmodifiedby text, entitydescriptionexternalid text, entitydescriptionexternalsystementityuuid uuid, entitydescriptionrefid bigint, entitydescriptionrefuuid text, entitydescriptiondraft boolean, entitydescriptiondeleted boolean, entitydescriptionactive boolean, entitydescriptionmimetypeuuid uuid, entitydescriptionmimetypename text)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentitydescriptionsenddeleted boolean[]; 
	tempentitydescriptionsenddrafts  boolean[];  
	tempentitydescriptionsendinactive boolean[];
	tendreluuid uuid;
BEGIN

/*  Examples

-- all descriptions
select * from entity.crud_entitydescription_read_full(null, null, null,null, null, null,null,null)

-- all descriptions for an owner
select * from entity.crud_entitydescription_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,null, null, null,null,null)

-- descriptions for an entity
select * from entity.crud_entitydescription_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', 'f42f8873-37a0-450e-97c8-c223955b2f02', null,null, null, null,null,null)

-- all descriptions for a template
select * from entity.crud_entitydescription_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, '2de8bf04-15bd-4df9-b5bc-4eb7fbb8e37e',null, null, null,null,null)

-- all descriptions for a field
select * from entity.crud_entitydescription_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,'3b477e48-82d7-43fa-a8a4-757d4d5ad457', null, null,null,null)

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min(	tendreluuid, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,read_entitydescriptionsenddeleted, read_entitydescriptionsenddrafts,read_entitydescriptionsendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_entitydescriptionsenddeleted isNull and read_entitydescriptionsenddeleted = false
	then tempentitydescriptionsenddeleted = Array[false];
	else tempentitydescriptionsenddeleted = Array[true,false];
end if;

if read_entitydescriptionsenddrafts isNull and read_entitydescriptionsenddrafts = false
	then tempentitydescriptionsenddrafts = Array[false];
	else tempentitydescriptionsenddrafts = Array[true,false];
end if;

if read_entitydescriptionsendinactive isNull and read_entitydescriptionsendinactive = false
	then tempentitydescriptionsendinactive = Array[true];
	else tempentitydescriptionsendinactive = Array[true,false];
end if;

-- probably can do this cealner with less sql

if allowners = true and (read_entitydescriptionentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et.entitydescriptionuuid, 
				et.entitydescriptionownerentityuuid, 
				cust.customername,
				et.entitydescriptionentitytemplateentityuuid, 
				etemplate.entitytemplatename,
				et.entitydescriptionentityfieldentityduuid, 
				efield.entityfieldname,
				et.entitydescriptionname, 
				et.entitydescriptionlanguagemasteruuid,				
				et.entitydescriptionsoplink, 
				et.entitydescriptionfile, 
				et.entitydescriptionicon, 
				entlt.languagetranslationvalue as entitydescriptiontranslatedname,			
				et.entitydescriptioncreateddate, 
				et.entitydescriptionmodifieddate, 
				et.entitydescriptionstartdate, 
				et.entitydescriptionenddate, 
				et.entitydescriptionmodifiedby, 
				et.entitydescriptionexternalid, 
				et.entitydescriptionexternalsystementityuuid, 
				et.entitydescriptionrefid, 
				et.entitydescriptionrefuuid, 
				et.entitydescriptiondraft, 
				et.entitydescriptiondeleted,
			case when et.entitydescriptiondeleted then false
			when et.entitydescriptiondraft then false
			when et.entitydescriptionstartdate::Date > now()::date 
				and et.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et.entitydescriptionmimetypeuuid,
				mime.systagtype
			FROM entity.entitydescription et
				inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entitydescriptionsenddeleted,read_entitydescriptionsenddrafts,read_entitydescriptionsendinactive, null)) as cust
					on cust.customerentityuuid = et.entitydescriptionownerentityuuid
						and et.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
					 	and et.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)
				left join (select * 
							from entity.crud_entitytemplate_read_full(read_ownerentityuuid,read_entitytemplateentityuuid,null,null, null,null)) etemplate
					on etemplate.entitytemplateuuid = et.entitydescriptionentitytemplateentityuuid
				left join (select * 
							from entity.crud_entityfield_read_full(read_ownerentityuuid,null,read_entityfieldentityuuid,	null, null, null,null)) efield
					on efield.entityfielduuid = et.entitydescriptionentityfieldentityduuid	
				left join (select * from entity.crud_systag_read_full(read_ownerentityuuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = et.entitydescriptionmimetypeuuid
				inner join languagemaster entlm
					on et.entitydescriptionlanguagemasteruuid= entlm.languagemasteruuid
				left join public.languagetranslations entlt
					on entlt.languagetranslationmasterid  = entlm.languagemasterid
						and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitydescriptionsenddeleted  , read_entitydescriptionsenddrafts  ,read_entitydescriptionsendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) 
			where et.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
				 and et.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive
		) ;
		return;
end if;

if allowners = false and read_entitydescriptionentityuuid notNull  
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et.entitydescriptionuuid, 
				et.entitydescriptionownerentityuuid, 
				cust.customername,
				et.entitydescriptionentitytemplateentityuuid, 
				etemplate.entitytemplatename,
				et.entitydescriptionentityfieldentityduuid, 
				efield.entityfieldname,
				et.entitydescriptionname, 
				et.entitydescriptionlanguagemasteruuid,
				et.entitydescriptionsoplink, 
				et.entitydescriptionfile, 
				et.entitydescriptionicon, 
				entlt.languagetranslationvalue as entitydescriptiontranslatedname,			
				et.entitydescriptioncreateddate, 
				et.entitydescriptionmodifieddate, 
				et.entitydescriptionstartdate, 
				et.entitydescriptionenddate, 
				et.entitydescriptionmodifiedby, 
				et.entitydescriptionexternalid, 
				et.entitydescriptionexternalsystementityuuid, 
				et.entitydescriptionrefid, 
				et.entitydescriptionrefuuid, 
				et.entitydescriptiondraft, 
				et.entitydescriptiondeleted,
			case when et.entitydescriptiondeleted then false
			when et.entitydescriptiondraft then false
			when et.entitydescriptionstartdate::Date > now()::date 
				and et.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et.entitydescriptionmimetypeuuid,
				mime.systagtype
		FROM entity.entitydescription et
			inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entitydescriptionsenddeleted,read_entitydescriptionsenddrafts,read_entitydescriptionsendinactive, null)) as cust
				on cust.customerentityuuid = et.entitydescriptionownerentityuuid
					and (et.entitydescriptionownerentityuuid = read_ownerentityuuid
						or et.entitydescriptionownerentityuuid = tendreluuid) 
					and et.entitydescriptionuuid = read_entitydescriptionentityuuid	
					and et.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
					and et.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)
				left join (select * 
							from entity.crud_entitytemplate_read_full(read_ownerentityuuid,read_entitytemplateentityuuid,null,null, null,null)) etemplate
					on etemplate.entitytemplateuuid = et.entitydescriptionentitytemplateentityuuid
				left join (select * 
							from entity.crud_entityfield_read_full(read_ownerentityuuid,null,read_entityfieldentityuuid,	null, null, null,null)) efield
					on efield.entityfielduuid = et.entitydescriptionentityfieldentityduuid					
				left join (select * from entity.crud_systag_read_full(read_ownerentityuuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = et.entitydescriptionmimetypeuuid
				inner join languagemaster entlm
					on et.entitydescriptionlanguagemasteruuid= entlm.languagemasteruuid
				left join public.languagetranslations entlt
					on entlt.languagetranslationmasterid  = entlm.languagemasterid
						and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitydescriptionsenddeleted  , read_entitydescriptionsenddrafts  ,read_entitydescriptionsendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive
		) ;
		return;
end if;

if allowners = false and read_entityfieldentityuuid notNull
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et.entitydescriptionuuid, 
				et.entitydescriptionownerentityuuid, 
				cust.customername,
				et.entitydescriptionentitytemplateentityuuid, 
				etemplate.entitytemplatename,
				et.entitydescriptionentityfieldentityduuid, 
				efield.entityfieldname,
				et.entitydescriptionname, 
				et.entitydescriptionlanguagemasteruuid,
				et.entitydescriptionsoplink, 
				et.entitydescriptionfile, 
				et.entitydescriptionicon, 
				entlt.languagetranslationvalue as entitydescriptiontranslatedname,			
				et.entitydescriptioncreateddate, 
				et.entitydescriptionmodifieddate, 
				et.entitydescriptionstartdate, 
				et.entitydescriptionenddate, 
				et.entitydescriptionmodifiedby, 
				et.entitydescriptionexternalid, 
				et.entitydescriptionexternalsystementityuuid, 
				et.entitydescriptionrefid, 
				et.entitydescriptionrefuuid, 
				et.entitydescriptiondraft, 
				et.entitydescriptiondeleted,
			case when et.entitydescriptiondeleted then false
			when et.entitydescriptiondraft then false
			when et.entitydescriptionstartdate::Date > now()::date 
				and et.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et.entitydescriptionmimetypeuuid,
				mime.systagtype
		FROM entity.entitydescription et
			inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entitydescriptionsenddeleted,read_entitydescriptionsenddrafts,read_entitydescriptionsendinactive, null)) as cust
				on cust.customerentityuuid = et.entitydescriptionownerentityuuid
					and (et.entitydescriptionownerentityuuid = read_ownerentityuuid
						or et.entitydescriptionownerentityuuid = tendreluuid) 
					and et.entitydescriptionentityfieldentityduuid = read_entityfieldentityuuid
					and et.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
					and et.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)
				left join (select * 
							from entity.crud_entitytemplate_read_full(read_ownerentityuuid,read_entitytemplateentityuuid,null,null, null,null)) etemplate
					on etemplate.entitytemplateuuid = et.entitydescriptionentitytemplateentityuuid
				left join (select * 
							from entity.crud_entityfield_read_full(read_ownerentityuuid,null,read_entityfieldentityuuid,	null, null, null,null)) efield
					on efield.entityfielduuid = et.entitydescriptionentityfieldentityduuid					
				left join (select * from entity.crud_systag_read_full(read_ownerentityuuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = et.entitydescriptionmimetypeuuid				
				inner join languagemaster entlm
					on et.entitydescriptionlanguagemasteruuid= entlm.languagemasteruuid
				left join public.languagetranslations entlt
					on entlt.languagetranslationmasterid  = entlm.languagemasterid
						and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitydescriptionsenddeleted  , read_entitydescriptionsenddrafts  ,read_entitydescriptionsendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) ) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive) ;
end if;

if allowners = false and read_entitytemplateentityuuid notNull
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et.entitydescriptionuuid, 
				et.entitydescriptionownerentityuuid, 
				cust.customername,
				et.entitydescriptionentitytemplateentityuuid, 
				etemplate.entitytemplatename,
				et.entitydescriptionentityfieldentityduuid, 
				efield.entityfieldname,
				et.entitydescriptionname, 
				et.entitydescriptionlanguagemasteruuid,
				et.entitydescriptionsoplink, 
				et.entitydescriptionfile, 
				et.entitydescriptionicon, 
				entlt.languagetranslationvalue as entitydescriptiontranslatedname,			
				et.entitydescriptioncreateddate, 
				et.entitydescriptionmodifieddate, 
				et.entitydescriptionstartdate, 
				et.entitydescriptionenddate, 
				et.entitydescriptionmodifiedby, 
				et.entitydescriptionexternalid, 
				et.entitydescriptionexternalsystementityuuid, 
				et.entitydescriptionrefid, 
				et.entitydescriptionrefuuid, 
				et.entitydescriptiondraft, 
				et.entitydescriptiondeleted,
			case when et.entitydescriptiondeleted then false
			when et.entitydescriptiondraft then false
			when et.entitydescriptionstartdate::Date > now()::date 
				and et.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et.entitydescriptionmimetypeuuid,
				mime.systagtype
		FROM entity.entitydescription et
			inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entitydescriptionsenddeleted,read_entitydescriptionsenddrafts,read_entitydescriptionsendinactive, null)) as cust
				on cust.customerentityuuid = et.entitydescriptionownerentityuuid
					and (et.entitydescriptionownerentityuuid = read_ownerentityuuid
						or et.entitydescriptionownerentityuuid = tendreluuid) 
					and et.entitydescriptionentitytemplateentityuuid = read_entitytemplateentityuuid
					and et.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
					and et.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)
				left join (select * 
							from entity.crud_entitytemplate_read_full(read_ownerentityuuid,read_entitytemplateentityuuid,null,null, null,null)) etemplate
					on etemplate.entitytemplateuuid = et.entitydescriptionentitytemplateentityuuid
				left join (select * 
							from entity.crud_entityfield_read_full(read_ownerentityuuid,null,read_entityfieldentityuuid,	null, null, null,null)) efield
					on efield.entityfielduuid = et.entitydescriptionentityfieldentityduuid					
				left join (select * from entity.crud_systag_read_full(read_ownerentityuuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = et.entitydescriptionmimetypeuuid				
				inner join languagemaster entlm
					on et.entitydescriptionlanguagemasteruuid= entlm.languagemasteruuid
				left join public.languagetranslations entlt
					on entlt.languagetranslationmasterid  = entlm.languagemasterid
						and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitydescriptionsenddeleted  , read_entitydescriptionsenddrafts  ,read_entitydescriptionsendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive) ;
end if;

if allowners = false and read_entitytemplateentityuuid isNull 
	and read_entityfieldentityuuid isNull and read_entitydescriptionentityuuid isNull  
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et.entitydescriptionuuid, 
				et.entitydescriptionownerentityuuid, 
				cust.customername,
				et.entitydescriptionentitytemplateentityuuid, 
				etemplate.entitytemplatename,
				et.entitydescriptionentityfieldentityduuid, 
				efield.entityfieldname,
				et.entitydescriptionname, 
				et.entitydescriptionlanguagemasteruuid,
				et.entitydescriptionsoplink, 
				et.entitydescriptionfile, 
				et.entitydescriptionicon, 
				entlt.languagetranslationvalue as entitydescriptiontranslatedname,			
				et.entitydescriptioncreateddate, 
				et.entitydescriptionmodifieddate, 
				et.entitydescriptionstartdate, 
				et.entitydescriptionenddate, 
				et.entitydescriptionmodifiedby, 
				et.entitydescriptionexternalid, 
				et.entitydescriptionexternalsystementityuuid, 
				et.entitydescriptionrefid, 
				et.entitydescriptionrefuuid, 
				et.entitydescriptiondraft, 
				et.entitydescriptiondeleted,
			case when et.entitydescriptiondeleted then false
			when et.entitydescriptiondraft then false
			when et.entitydescriptionstartdate::Date > now()::date 
				and et.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et.entitydescriptionmimetypeuuid,
				mime.systagtype
		FROM entity.entitydescription et
			inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entitydescriptionsenddeleted,read_entitydescriptionsenddrafts,read_entitydescriptionsendinactive, null)) as cust
				on cust.customerentityuuid = et.entitydescriptionownerentityuuid
					and (et.entitydescriptionownerentityuuid = read_ownerentityuuid
						or et.entitydescriptionownerentityuuid = tendreluuid) 
					and et.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
					and et.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)
				left join (select * 
							from entity.crud_entitytemplate_read_full(read_ownerentityuuid,read_entitytemplateentityuuid,null,null, null,null)) etemplate
					on etemplate.entitytemplateuuid = et.entitydescriptionentitytemplateentityuuid
				left join (select * 
							from entity.crud_entityfield_read_full(read_ownerentityuuid,null,read_entityfieldentityuuid,	null, null, null,null)) efield
					on efield.entityfielduuid = et.entitydescriptionentityfieldentityduuid					
				left join (select * from entity.crud_systag_read_full(read_ownerentityuuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = et.entitydescriptionmimetypeuuid				
				inner join languagemaster entlm
					on et.entitydescriptionlanguagemasteruuid= entlm.languagemasteruuid
				left join public.languagetranslations entlt
					on entlt.languagetranslationmasterid  = entlm.languagemasterid
						and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitydescriptionsenddeleted  , read_entitydescriptionsenddrafts  ,read_entitydescriptionsendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive
		) ;
		return;
end if;
End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entitydescription_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitydescription_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitydescription_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entitydescription_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityfield_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityfield_read_full(read_ownerentityuuid uuid, read_entitytemplateentityuuid uuid, read_entityfieldentityuuid uuid, read_entityfieldsenddeleted boolean, read_entityfieldsenddrafts boolean, read_entityfieldsendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entityfielduuid uuid, entityfieldentitytemplateentityuuid uuid, entityfieldcreateddate timestamp with time zone, entityfieldmodifieddate timestamp with time zone, entityfieldstartdate timestamp with time zone, entityfieldenddate timestamp with time zone, entityfieldlanguagemasteruuid text, entityfieldtranslatedname text, entityfieldorder bigint, entityfielddefaultvalue text, entityfieldiscalculated boolean, entityfieldiseditable boolean, entityfieldisvisible boolean, entityfieldisrequired boolean, entityfieldformatentityuuid uuid, entityfieldformatname text, entityfieldwidgetentityuuid uuid, entityfieldwidgetname text, entityfieldexternalid text, entityfieldexternalsystementityuuid uuid, entityfieldexternalsystemname text, entityfieldmodifiedbyuuid text, entityfieldmodifiedby text, entityfieldrefid bigint, entityfieldrefuuid text, entityfieldisprimary boolean, entityfieldtranslate boolean, entityfieldname text, entityfieldownerentityuuid uuid, entityfieldcustomername text, entityfieldtypeentityuuid uuid, entityfieldtypename text, entityfieldparententityuuid uuid, entityfieldsitename text, entityfieldentitytypeentityuuid uuid, entityfieldentitytypename text, entityfieldentityparenttypeentityuuid uuid, entityfieldparenttypename text, entityfielddeleted boolean, entityfielddraft boolean, entityfieldactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentityfieldsenddeleted boolean[]; 
	tempentityfieldsenddrafts  boolean[];  
	tempentityfieldsendinactive boolean[];
BEGIN

/*  Examples

-- all customers no entity template no field
select * from entity.crud_entityfield_read_full(null, null, null,null, null, null,null)

select * from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- specific customer no entity template no field
select * from entity.crud_entityfield_read_full(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null, null, null,null)

-- specific entity template
select * 
from entity.crud_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,	null, null, null,null)

-- specific entity field
select * 
from entity.crud_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',	null, null, null,null)

-- negative tests - empty or wrong cutomer returns nothing
select * 
from entity.crud_entityfield_read_full(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',	null,null, null, null,null)

select * 
from entity.crud_entityfield_read_full(null,null,	'd15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)

*/

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false, read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_entityfieldsenddeleted isNull and read_entityfieldsenddeleted = false
	then tempentityfieldsenddeleted = Array[false];
	else tempentityfieldsenddeleted = Array[true,false];
end if;

if read_entityfieldsenddrafts isNull and read_entityfieldsenddrafts = false
	then tempentityfieldsenddrafts = Array[false];
	else tempentityfieldsenddrafts = Array[true,false];
end if;

if read_entityfieldsendinactive isNull and read_entityfieldsendinactive = false
	then tempentityfieldsendinactive = Array[true];
	else tempentityfieldsendinactive = Array[true,false];
end if;

-- probably can do this cleaner with less sql

if allowners = true and (read_entitytemplateentityuuid isNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			ef.entityfielduuid, 
			ef.entityfieldentitytemplateentityuuid, 
			ef.entityfieldcreateddate, 
			ef.entityfieldmodifieddate, 
			ef.entityfieldstartdate, 
			ef.entityfieldenddate, 
			ef.entityfieldlanguagemasteruuid, 
			COALESCE(enflt.languagetranslationvalue, enflm.languagemastersource),
			ef.entityfieldorder, 
			ef.entityfielddefaultvalue, 
			ef.entityfieldiscalculated, 
			ef.entityfieldiseditable, 
			ef.entityfieldisvisible, 
			ef.entityfieldisrequired, 
			ef.entityfieldformatentityuuid, 
			format.custagtype as entityfieldformatname,			
			ef.entityfieldwidgetentityuuid, 
			widget.custagtype as entityfieldwidgetname,
			ef.entityfieldexternalid,
			ef.entityfieldexternalsystementityuuid, 
			efexsys.systagtype as entityfieldexternalsystemname,
			ef.entityfieldmodifiedbyuuid, 
			fieldmodby.workerfullname as fieldmodifiedby,			
			ef.entityfieldrefid, 
			ef.entityfieldrefuuid,
			ef.entityfieldisprimary, 
			ef.entityfieldtranslate, 
			ef.entityfieldname, 
			ef.entityfieldownerentityuuid, 
			cust.customername as entityfieldcustomername,			
			ef.entityfieldtypeentityuuid, 
			eft.systagtype as entityfieldtypename,			
			ef.entityfieldparententityuuid, 
			siten.languagemastersource as entityfieldsitename,				
			ef.entityfieldentitytypeentityuuid, 
			efet.systagtype as entityfieldentitytypename,			
			ef.entityfieldentityparenttypeentityuuid,
			efpt.systagtype as entityfieldparenttypename,
				ef.entityfielddeleted,
				ef.entityfielddraft,
				case when ef.entityfieldenddate notnull and ef.entityfieldenddate::Date < now()::date
					then false
					else true
				end as entityfieldsendinactive
		from entity.entityfield ef
			inner join (select * from entity.crud_customer_read_full(null, null, null,true, read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,null)) as cust
				on cust.customerentityuuid = ef.entityfieldownerentityuuid
					and ef.entityfielddeleted = ANY (tempentityfieldsenddeleted)
				 	and ef.entityfielddraft = ANY (tempentityfieldsenddrafts)
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as site
				on site.locationentityuuid = ef.entityfieldparententityuuid
			left join languagemaster siten
				on siten.languagemasteruuid = site.locationnameuuid
			inner join languagemaster enflm
				on ef.entityfieldlanguagemasteruuid = enflm.languagemasteruuid
			left join public.languagetranslations enflt
				on enflt.languagetranslationmasterid  = enflm.languagemasterid
					and enflt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeuuid, null, false,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) 
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as format
				on ef.entityfieldformatentityuuid = format.custagentityuuid	
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as widget
				on ef.entityfieldwidgetentityuuid = widget.custagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efexsys
				on ef.entityfieldexternalsystementityuuid = efexsys.systagentityuuid	
			left join workerinstance workerintfield
				on workerintfield.workerinstanceuuid = ef.entityfieldmodifiedbyuuid 
			left join worker fieldmodby
				on fieldmodby.workerid = workerintfield.workerinstanceworkerid	
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as eft
				on ef.entityfieldtypeentityuuid = eft.systagentityuuid	 
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efet
				on ef.entityfieldentitytypeentityuuid = efet.systagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efpt
				on ef.entityfieldentityparenttypeentityuuid = efpt.systagentityuuid) as foo
		where  foo.entityfieldsendinactive = Any (tempentityfieldsendinactive);		
--		return;
end if;

if allowners = false and (read_entitytemplateentityuuid isNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			ef2.entityfielduuid, 
			ef2.entityfieldentitytemplateentityuuid, 
			ef2.entityfieldcreateddate, 
			ef2.entityfieldmodifieddate, 
			ef2.entityfieldstartdate, 
			ef2.entityfieldenddate, 
			ef2.entityfieldlanguagemasteruuid, 
			COALESCE(enflt.languagetranslationvalue, enflm.languagemastersource),			
			ef2.entityfieldorder, 
			ef2.entityfielddefaultvalue, 
			ef2.entityfieldiscalculated, 
			ef2.entityfieldiseditable, 
			ef2.entityfieldisvisible, 
			ef2.entityfieldisrequired, 
			ef2.entityfieldformatentityuuid, 
			format.custagtype as entityfieldformatname,			
			ef2.entityfieldwidgetentityuuid, 
			widget.custagtype as entityfieldwidgetname,
			ef2.entityfieldexternalid,
			ef2.entityfieldexternalsystementityuuid, 
			efexsys.systagtype as entityfieldexternalsystemname,
			ef2.entityfieldmodifiedbyuuid, 
			fieldmodby.workerfullname as fieldmodifiedby,			
			ef2.entityfieldrefid, 
			ef2.entityfieldrefuuid,
			ef2.entityfieldisprimary, 
			ef2.entityfieldtranslate, 
			ef2.entityfieldname, 
			ef2.entityfieldownerentityuuid, 
			cust.customername as entityfieldcustomername,			
			ef2.entityfieldtypeentityuuid, 
			eft.systagtype as entityfieldtypename,			
			ef2.entityfieldparententityuuid, 
			siten.languagemastersource as entityfieldsitename,				
			ef2.entityfieldentitytypeentityuuid, 
			efet.systagtype as entityfieldentitytypename,			
			ef2.entityfieldentityparenttypeentityuuid,
			efpt.systagtype as entityfieldparenttypename,
				ef2.entityfielddeleted,
				ef2.entityfielddraft,
				case when ef2.entityfieldenddate notnull and ef2.entityfieldenddate::Date < now()::date
					then false
					else true
				end as entityfieldsendinactive
		from entity.entityfield ef2
			inner join (select * from entity.crud_customer_read_full(null, null, null,true, read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,null)) as cust
				on cust.customerentityuuid = ef2.entityfieldownerentityuuid
					and ef2.entityfieldownerentityuuid = read_ownerentityuuid
					and ef2.entityfielddeleted = ANY (tempentityfieldsenddeleted)
				 	and ef2.entityfielddraft = ANY (tempentityfieldsenddrafts)
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entityfieldsenddeleted ,read_entityfieldsenddrafts ,read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as site
				on site.locationentityuuid = ef2.entityfieldparententityuuid
			left join languagemaster siten
				on siten.languagemasteruuid = site.locationnameuuid
			inner join languagemaster enflm
				on ef2.entityfieldlanguagemasteruuid = enflm.languagemasteruuid
			left join public.languagetranslations enflt
				on enflt.languagetranslationmasterid  = enflm.languagemasterid
					and enflt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeuuid, null, false,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid))
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as format
				on ef2.entityfieldformatentityuuid = format.custagentityuuid	
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as widget
				on ef2.entityfieldwidgetentityuuid = widget.custagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efexsys
				on ef2.entityfieldexternalsystementityuuid = efexsys.systagentityuuid	
			left join workerinstance workerintfield
				on workerintfield.workerinstanceuuid = ef2.entityfieldmodifiedbyuuid 
			left join worker fieldmodby
				on fieldmodby.workerid = workerintfield.workerinstanceworkerid	
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as eft
				on ef2.entityfieldtypeentityuuid = eft.systagentityuuid	 
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efet
				on ef2.entityfieldentitytypeentityuuid = efet.systagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efpt
				on ef2.entityfieldentityparenttypeentityuuid = efpt.systagentityuuid) as foo
		where  foo.entityfieldsendinactive = Any (tempentityfieldsendinactive);	
--	return;
end if;

if allowners = false and (read_entitytemplateentityuuid notNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			ef3.entityfielduuid, 
			ef3.entityfieldentitytemplateentityuuid, 
			ef3.entityfieldcreateddate, 
			ef3.entityfieldmodifieddate, 
			ef3.entityfieldstartdate, 
			ef3.entityfieldenddate, 
			ef3.entityfieldlanguagemasteruuid, 
			COALESCE(enflt.languagetranslationvalue, enflm.languagemastersource),			
			ef3.entityfieldorder, 
			ef3.entityfielddefaultvalue, 
			ef3.entityfieldiscalculated, 
			ef3.entityfieldiseditable, 
			ef3.entityfieldisvisible, 
			ef3.entityfieldisrequired, 
			ef3.entityfieldformatentityuuid, 
			format.custagtype as entityfieldformatname,			
			ef3.entityfieldwidgetentityuuid, 
			widget.custagtype as entityfieldwidgetname,
			ef3.entityfieldexternalid,
			ef3.entityfieldexternalsystementityuuid, 
			efexsys.systagtype as entityfieldexternalsystemname,
			ef3.entityfieldmodifiedbyuuid, 
			fieldmodby.workerfullname as fieldmodifiedby,			
			ef3.entityfieldrefid, 
			ef3.entityfieldrefuuid,
			ef3.entityfieldisprimary, 
			ef3.entityfieldtranslate, 
			ef3.entityfieldname, 
			ef3.entityfieldownerentityuuid, 
			cust.customername as entityfieldcustomername,			
			ef3.entityfieldtypeentityuuid, 
			eft.systagtype as entityfieldtypename,			
			ef3.entityfieldparententityuuid, 
			siten.languagemastersource as entityfieldsitename,				
			ef3.entityfieldentitytypeentityuuid, 
			efet.systagtype as entityfieldentitytypename,			
			ef3.entityfieldentityparenttypeentityuuid,
			efpt.systagtype as entityfieldparenttypename,
				ef3.entityfielddeleted,
				ef3.entityfielddraft,
				case when ef3.entityfieldenddate notnull and ef3.entityfieldenddate::Date < now()::date
					then false
					else true
				end as entityfieldsendinactive
		from entity.entityfield ef3
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive, null)) as cust
				on cust.customerentityuuid = ef3.entityfieldownerentityuuid
					and ef3.entityfieldownerentityuuid = read_ownerentityuuid
					and ef3.entityfieldentitytemplateentityuuid = read_entitytemplateentityuuid
					and ef3.entityfielddeleted = ANY (tempentityfieldsenddeleted)
				 	and ef3.entityfielddraft = ANY (tempentityfieldsenddrafts)
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entityfieldsenddeleted ,read_entityfieldsenddrafts ,read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as site
				on site.locationentityuuid = ef3.entityfieldparententityuuid
			left join languagemaster siten
				on siten.languagemasteruuid = site.locationnameuuid
			inner join languagemaster enflm
				on ef3.entityfieldlanguagemasteruuid = enflm.languagemasteruuid
			left join public.languagetranslations enflt
				on enflt.languagetranslationmasterid  = enflm.languagemasterid
					and enflt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeuuid, null, false,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) 
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as format
				on ef3.entityfieldformatentityuuid = format.custagentityuuid	
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as widget
				on ef3.entityfieldwidgetentityuuid = widget.custagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efexsys
				on ef3.entityfieldexternalsystementityuuid = efexsys.systagentityuuid	
			left join workerinstance workerintfield
				on workerintfield.workerinstanceuuid = ef3.entityfieldmodifiedbyuuid 
			left join worker fieldmodby
				on fieldmodby.workerid = workerintfield.workerinstanceworkerid	
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as eft
				on ef3.entityfieldtypeentityuuid = eft.systagentityuuid	 
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efet
				on ef3.entityfieldentitytypeentityuuid = efet.systagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efpt
				on ef3.entityfieldentityparenttypeentityuuid = efpt.systagentityuuid) as foo
		where  foo.entityfieldsendinactive = Any (tempentityfieldsendinactive);
--		return;

end if;

if allowners = false and (read_entityfieldentityuuid notNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			ef4.entityfielduuid, 
			ef4.entityfieldentitytemplateentityuuid, 
			ef4.entityfieldcreateddate, 
			ef4.entityfieldmodifieddate, 
			ef4.entityfieldstartdate, 
			ef4.entityfieldenddate, 
			ef4.entityfieldlanguagemasteruuid, 
			COALESCE(enflt.languagetranslationvalue, enflm.languagemastersource),			
			ef4.entityfieldorder, 
			ef4.entityfielddefaultvalue, 
			ef4.entityfieldiscalculated, 
			ef4.entityfieldiseditable, 
			ef4.entityfieldisvisible, 
			ef4.entityfieldisrequired, 
			ef4.entityfieldformatentityuuid, 
			format.custagtype as entityfieldformatname,			
			ef4.entityfieldwidgetentityuuid, 
			widget.custagtype as entityfieldwidgetname,
			ef4.entityfieldexternalid,
			ef4.entityfieldexternalsystementityuuid, 
			efexsys.systagtype as entityfieldexternalsystemname,
			ef4.entityfieldmodifiedbyuuid, 
			fieldmodby.workerfullname as fieldmodifiedby,			
			ef4.entityfieldrefid, 
			ef4.entityfieldrefuuid,
			ef4.entityfieldisprimary, 
			ef4.entityfieldtranslate, 
			ef4.entityfieldname, 
			ef4.entityfieldownerentityuuid, 
			cust.customername as entityfieldcustomername,			
			ef4.entityfieldtypeentityuuid, 
			eft.systagtype as entityfieldtypename,			
			ef4.entityfieldparententityuuid, 
			siten.languagemastersource as entityfieldsitename,				
			ef4.entityfieldentitytypeentityuuid, 
			efet.systagtype as entityfieldentitytypename,			
			ef4.entityfieldentityparenttypeentityuuid,
			efpt.systagtype as entityfieldparenttypename,
				ef4.entityfielddeleted,
				ef4.entityfielddraft,
				case when ef4.entityfieldenddate notnull and ef4.entityfieldenddate::Date < now()::date
					then false
					else true
				end as entityfieldsendinactive
		from entity.entityfield ef4
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive, null)) as cust
				on cust.customerentityuuid = ef4.entityfieldownerentityuuid
					and ef4.entityfieldownerentityuuid = read_ownerentityuuid
					and ef4.entityfielduuid = read_entityfieldentityuuid
					and ef4.entityfielddeleted = ANY (tempentityfieldsenddeleted)
				 	and ef4.entityfielddraft = ANY (tempentityfieldsenddrafts)
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entityfieldsenddeleted ,read_entityfieldsenddrafts ,read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as site
				on site.locationentityuuid = ef4.entityfieldparententityuuid
			left join languagemaster siten
				on siten.languagemasteruuid = site.locationnameuuid
			inner join languagemaster enflm
				on ef4.entityfieldlanguagemasteruuid = enflm.languagemasteruuid
			left join public.languagetranslations enflt
				on enflt.languagetranslationmasterid  = enflm.languagemasterid
					and enflt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeuuid, null, false,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid))
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as format
				on ef4.entityfieldformatentityuuid = format.custagentityuuid	
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as widget
				on ef4.entityfieldwidgetentityuuid = widget.custagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted,read_entityfieldsenddrafts,read_entityfieldsendinactive,read_languagetranslationtypeuuid)) as efexsys
				on ef4.entityfieldexternalsystementityuuid = efexsys.systagentityuuid	
			left join workerinstance workerintfield
				on workerintfield.workerinstanceuuid = ef4.entityfieldmodifiedbyuuid 
			left join worker fieldmodby
				on fieldmodby.workerid = workerintfield.workerinstanceworkerid	
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as eft
				on ef4.entityfieldtypeentityuuid = eft.systagentityuuid	 
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efet
				on ef4.entityfieldentitytypeentityuuid = efet.systagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,read_languagetranslationtypeuuid)) as efpt
				on ef4.entityfieldentityparenttypeentityuuid = efpt.systagentityuuid) as foo
		where  foo.entityfieldsendinactive = Any (tempentityfieldsendinactive);
--		return;

end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityfield_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfield_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfield_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityfield_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entitytemplate_read_full(uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entitytemplate_read_full(read_ownerentityuuid uuid, read_entitytemplateentityuuid uuid, read_entitytemplatesenddeleted boolean, read_entitytemplatesenddrafts boolean, read_entitytemplatesendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entitytemplateuuid uuid, entitytemplateownerentityuuid uuid, entitytemplatecustomername text, entitytemplateparententityuuid uuid, entitytemplatesitename text, entitytemplatetypeentityuuid uuid, entitytemplatetype text, entitytemplateisprimary boolean, entitytemplatescanid text, entitytemplatenameuuid text, entitytemplatename text, entitytemplateorder integer, entitytemplatemodifiedbyuuid text, entitytemplatemodifiedby text, entitytemplatestartdate timestamp with time zone, entitytemplateenddate timestamp with time zone, entitytemplatecreateddate timestamp with time zone, entitytemplatemodifieddate timestamp with time zone, entitytemplateexternalid text, entitytemplaterefid bigint, entitytemplaterefuuid text, entitytemplateexternalsystementityuuid uuid, entitytemplateexternalsystem text, entitytemplatedeleted boolean, entitytemplatedraft boolean, entitytemplateactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentitytemplatesenddeleted boolean[]; 
	tempentitytemplatesenddrafts  boolean[];  
	tempentitytemplatesendinactive boolean[];
	tendreluuid uuid;
BEGIN

/*  Examples

-- all customers no entity template
select * from entity.crud_entitytemplate_read_full(null, null, null, null, null,null)

-- specific customer no entity template
select * from entity.crud_entitytemplate_read_full(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null, null,null)

-- specific entity template
select * 
from entity.crud_entitytemplate_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','957df2f9-051f-4af5-95ee-ea3760fbb83b',	null, null, null,null)

-- negative test - empty or wrong cutomer returns nothing
select * 
from entity.crud_entitytemplate_read_full(null,'957df2f9-051f-4af5-95ee-ea3760fbb83b',null, null, null,	null)

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min(tendreluuid, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if  read_entitytemplatesenddeleted = false
	then tempentitytemplatesenddeleted = Array[false];
	else tempentitytemplatesenddeleted = Array[true,false];
end if;

if  read_entitytemplatesenddrafts = false
	then tempentitytemplatesenddrafts = Array[false];
	else tempentitytemplatesenddrafts = Array[true,false];
end if;

if   read_entitytemplatesendinactive = false
	then tempentitytemplatesendinactive = Array[true];
	else tempentitytemplatesendinactive = Array[true,false];
end if;

-- probably can do this cealner with less sql

if allowners = true and (read_entitytemplateentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			et.entitytemplateuuid, 
			et.entitytemplateownerentityuuid, 
			cust.customername,
			et.entitytemplateparententityuuid,
			parentn.languagemastersource as parentname,	
			et.entitytemplatetypeentityuuid,
			enttype.systagname as entitytemplatetype,
			et.entitytemplateisprimary,
			et.entitytemplatescanid,
			et.entitytemplatenameuuid,
			COALESCE(entlt.languagetranslationvalue, entlm.languagemastersource),
			et.entitytemplateorder, 
			et.entitytemplatemodifiedbyuuid,
			templatemodby.workerfullname as templatemodifiedby,
			et.entitytemplatestartdate, 
			et.entitytemplateenddate, 
			et.entitytemplatecreateddate, 
			et.entitytemplatemodifieddate, 
			et.entitytemplateexternalid, 
			et.entitytemplaterefid, 
			et.entitytemplaterefuuid,
			et.entitytemplateexternalsystementityuuid, 
			systemtype.systagtype as externalsystem,
			et.entitytemplatedeleted,
			et.entitytemplatedraft,
	case when et.entitytemplatedeleted then false
			when et.entitytemplatedraft then false
			when et.entitytemplateenddate::Date > now()::date 
				and et.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive
		from entity.entitytemplate et
			inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as cust
				on cust.customerentityuuid = et.entitytemplateownerentityuuid
					and et.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				 	and et.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)
			left join (select * from entity.crud_entitytemplate_read_min(null, null, null, null, null,null)) as parent
				on parent.entitytemplateuuid = et.entitytemplateparententityuuid
			left join languagemaster parentn
				on parentn.languagemasteruuid = parent.entitytemplatenameuuid
			inner join (select * from entity.crud_systag_read_full(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) as enttype
				on et.entitytemplatetypeentityuuid = enttype.systagentityuuid
			inner join languagemaster entlm
				on et.entitytemplatenameuuid = entlm.languagemasteruuid
			left join public.languagetranslations entlt
				on entlt.languagetranslationmasterid  = entlm.languagemasterid
					and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) 
			left join workerinstance workerint
				on workerint.workerinstanceuuid = et.entitytemplatemodifiedbyuuid 
			left join worker templatemodby
				on templatemodby.workerid = workerint.workerinstanceworkerid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) as systemtype
				on et.entitytemplateexternalsystementityuuid = systemtype.systagentityuuid) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive);
		return;
end if;

if allowners = false and (read_entitytemplateentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			et2.entitytemplateuuid, 
			et2.entitytemplateownerentityuuid, 
			cust.customername,
			et2.entitytemplateparententityuuid,
			parentn.languagemastersource as parentname,
			et2.entitytemplatetypeentityuuid,
			enttype.systagtype as entitytemplatetype,
			et2.entitytemplateisprimary,
			et2.entitytemplatescanid,
			et2.entitytemplatenameuuid,
			COALESCE(entlt.languagetranslationvalue, entlm.languagemastersource),
			et2.entitytemplateorder, 
			et2.entitytemplatemodifiedbyuuid,
			templatemodby.workerfullname as templatemodifiedby,
			et2.entitytemplatestartdate, 
			et2.entitytemplateenddate, 
			et2.entitytemplatecreateddate, 
			et2.entitytemplatemodifieddate, 
			et2.entitytemplateexternalid, 
			et2.entitytemplaterefid, 
			et2.entitytemplaterefuuid,
			et2.entitytemplateexternalsystementityuuid, 
			systemtype.systagtype as externalsystem,
				et2.entitytemplatedeleted,
				et2.entitytemplatedraft,
	case when et2.entitytemplatedeleted then false
			when et2.entitytemplatedraft then false
			when et2.entitytemplateenddate::Date > now()::date 
				and et2.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive
		from entity.entitytemplate et2
			inner join (select * from entity.crud_customer_read_full(null, null,null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as cust
				on cust.customerentityuuid = et2.entitytemplateownerentityuuid
					and et2.entitytemplateownerentityuuid = read_ownerentityuuid
					and et2.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				 	and et2.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)
			left join (select * from entity.crud_entitytemplate_read_min(null, null, null, null, null,null)) as parent
				on parent.entitytemplateuuid = et.entitytemplateparententityuuid
			left join languagemaster parentn
				on parentn.languagemasteruuid = parent.entitytemplatenameuuid
			inner join (select * from entity.crud_systag_read_full(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) as enttype
				on et.entitytemplatetypeentityuuid = enttype.systagentityuuid
			inner join languagemaster entlm
				on et2.entitytemplatenameuuid = entlm.languagemasteruuid
			left join public.languagetranslations entlt
				on entlt.languagetranslationmasterid  = entlm.languagemasterid
					and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) 
			left join workerinstance workerint
				on workerint.workerinstanceuuid = et2.entitytemplatemodifiedbyuuid 
			left join worker templatemodby
				on templatemodby.workerid = workerint.workerinstanceworkerid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) as systemtype
				on et2.entitytemplateexternalsystementityuuid = systemtype.systagentityuuid) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive);
		return;
end if;

if allowners = false and (read_entitytemplateentityuuid notNull)
	then
		return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			et3.entitytemplateuuid, 
			et3.entitytemplateownerentityuuid, 
			cust.customername,
			et3.entitytemplateparententityuuid,
			parentn.languagemastersource as parentname,
			et3.entitytemplatetypeentityuuid,
			enttype.systagtype as entitytemplatetype,
			et3.entitytemplateisprimary,
			et3.entitytemplatescanid,
			et3.entitytemplatenameuuid,
			COALESCE(entlt.languagetranslationvalue, entlm.languagemastersource),
			et3.entitytemplateorder, 
			et3.entitytemplatemodifiedbyuuid,
			templatemodby.workerfullname as templatemodifiedby,
			et3.entitytemplatestartdate, 
			et3.entitytemplateenddate, 
			et3.entitytemplatecreateddate, 
			et3.entitytemplatemodifieddate, 
			et3.entitytemplateexternalid, 
			et3.entitytemplaterefid, 
			et3.entitytemplaterefuuid,
			et3.entitytemplateexternalsystementityuuid, 
			systemtype.systagtype as externalsystem,
				et3.entitytemplatedeleted,
				et3.entitytemplatedraft,
	case when et3.entitytemplatedeleted then false
			when et3.entitytemplatedraft then false
			when et3.entitytemplateenddate::Date > now()::date 
				and et3.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive
		from entity.entitytemplate et3
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as cust
				on cust.customerentityuuid = et3.entitytemplateownerentityuuid
					and (et3.entitytemplateownerentityuuid = read_ownerentityuuid
						or et3.entitytemplateownerentityuuid = tendreluuid)
					and et3.entitytemplateuuid = read_entitytemplateentityuuid
					and et3.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				 	and et3.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)
			left join (select * from entity.crud_entitytemplate_read_min(null, null, null, null, null,null)) as parent
				on parent.entitytemplateuuid = et.entitytemplateparententityuuid
			left join languagemaster parentn
				on parentn.languagemasteruuid = parent.entitytemplatenameuuid
			inner join (select * from entity.crud_systag_read_full(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) as enttype
				on et.entitytemplatetypeentityuuid = enttype.systagentityuuid
			inner join languagemaster entlm
				on et3.entitytemplatenameuuid = entlm.languagemasteruuid
			left join public.languagetranslations entlt
				on entlt.languagetranslationmasterid  = entlm.languagemasterid
					and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) 
			left join workerinstance workerint
				on workerint.workerinstanceuuid = et3.entitytemplatemodifiedbyuuid 
			left join worker templatemodby
				on templatemodby.workerid = workerint.workerinstanceworkerid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,read_languagetranslationtypeuuid)) as systemtype
				on et3.entitytemplateexternalsystementityuuid = systemtype.systagentityuuid ) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive);
		return;
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entitytemplate_read_full(uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_read_full(uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_read_full(uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_read_full(uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityinstance_read_api(uuid[],uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityinstance_read_api(read_entityinstanceownerentityuuid uuid[], read_entityinstanceentityuuid uuid, read_entityinstanceparententityuuid uuid, read_entityinstancecornerstoneentityuuid uuid, read_entityinstanceentitytemplateentityuuid uuid, read_entityinstancetypeentityuuid uuid, read_allentityinstances boolean, read_entityinstancetag uuid, read_entityinstancesenddeleted boolean, read_entityinstancesenddrafts boolean, read_entityinstancesendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entityinstanceoriginalid bigint, entityinstanceoriginaluuid text, entityinstanceuuid uuid, entityinstanceownerentityuuid uuid, entityinstanceownerentityname text, entityinstanceparententityuuid uuid, entityinstanceparententityname text, entityinstancecornerstoneentityuuid uuid, entityinstancecornerstoneentitname text, entityinstancecornerstoneorder integer, entityinstanceentitytemplateentityuuid uuid, entityinstanceentitytemplatename text, entityinstanceentitytemplatetranslatedname text, entityinstancetypeentityuuid uuid, entityinstancetype text, entityinstancenameuuid text, entityinstancename text, entityinstancescanid text, entityinstancesiteentityuuid uuid, entityinstancecreateddate timestamp with time zone, entityinstancemodifieddate timestamp with time zone, entityinstancemodifiedbyuuid text, entityinstancestartdate timestamp with time zone, entityinstanceenddate timestamp with time zone, entityinstanceexternalid text, entityinstanceexternalsystementityuuid uuid, entityinstanceexternalsystementityname text, entityinstancerefid bigint, entityinstancerefuuid text, entityinstancedeleted boolean, entityinstancedraft boolean, entityinstanceactive boolean, entityinstancetagentityuuid uuid)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allcustomers boolean; 
	tempentityinstancesenddeleted boolean[];
	tempentityinstancesenddrafts boolean[];
	tempentityinstancesendinactive boolean[];
	tempentityinstanceparententityuuid uuid[];
	tempentityinstancecornerstoneentityuuid uuid[];
	tempentityinstanceentitytemplateentityuuid uuid[];
	tempentityinstancetypeentityuuid uuid[];
	tempentityinstancetag uuid[];
	templanguagetranslationtypeid bigint;
BEGIN

-- Curently ignores language translation.  We should change this in the future for location. 
-- Might want to add a parameter to send in active as a boolean
-- probably should move this to use arrays for in parameters

/*  examples

-- call entity.test_entity()

-- all customers all entities all tags
select * from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific customer all entities all tags
select * from entity.crud_entityinstance_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific instance

select * from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	'0ce5be8d-2bec-4219-be97-07dc154b2e3b', --read_entityinstanceentityuuid uuid,
	'24855715-9228-4f41-bfe6-493f4c374a6e', --read_entityinstanceparententityuuid uuid,
	'2ab5461d-ad96-4560-a36d-d0fa53bce0f0', --read_entityinstancecornerstoneentityuuid uuid,
	'0b9f3142-e7ed-4f78-8504-ccd2eb505075', --read_entityinstanceentitytemplateentityuuid uuid,
	'67af22cb-3183-4e6e-8542-7968f744965a', --read_entityinstancetypeentityuuid uuid,
	false,
	'f3fe9cae-c21e-4dba-9a10-008cfa6dca39', --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific parent
select entityinstanceparententityuuid,* from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	'24855715-9228-4f41-bfe6-493f4c374a6e', --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific cornerstone 
select * from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	'2ab5461d-ad96-4560-a36d-d0fa53bce0f0', --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific template 
select * from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	'0b9f3142-e7ed-4f78-8504-ccd2eb505075', --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific tag 
select * from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	'f3fe9cae-c21e-4dba-9a10-008cfa6dca39', --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

select * from entity.entitytag where entitytagentityinstanceentityuuid = '0ce5be8d-2bec-4219-be97-07dc154b2e3b'

select * from entity.entityinstance where entityinstanceuuid = ??

select * from entity.entityinstance limit 100

*/

if read_languagetranslationtypeentityuuid isNull
	then read_languagetranslationtypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'; 
end if;

templanguagetranslationtypeid =  (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeentityuuid, null, false,read_entityinstancesenddeleted, read_entityinstancesenddrafts, read_entityinstancesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'));

-- all entities

	return query 
		SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid,
			ei.entityinstanceoriginaluuid,
			ei.entityinstanceuuid,
			ei.entityinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstanceparententityuuid,	
			COALESCE(ltparent.languagetranslationvalue,lmparent.languagemastersource),
			ei.entityinstancecornerstoneentityuuid,
			COALESCE(ltcorner.languagetranslationvalue,lmcorner.languagemastersource),
			ei.entityinstancecornerstoneorder, 
			ei.entityinstanceentitytemplateentityuuid,			
			ei.entityinstanceentitytemplatename, 
			COALESCE(lttemplate.languagetranslationvalue,lmtemplate.languagemastersource),
			ei.entityinstancetypeentityuuid,
			ei.entityinstancetype, 
			ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
			COALESCE(ltname.languagetranslationvalue,lmname.languagemastersource),
			ei.entityinstancescanid, 
			ei.entityinstancesiteentityuuid,  
			ei.entityinstancecreateddate,
			ei.entityinstancemodifieddate,
			ei.entityinstancemodifiedbyuuid,
			ei.entityinstancestartdate ,	
			ei.entityinstanceenddate,
			ei.entityinstanceexternalid, 
			null::uuid, 
			null::text, 
			ei.entityinstancerefid, 
			ei.entityinstancerefuuid, 
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
			case when ei.entityinstancedeleted then false
					when ei.entityinstancedraft then false
					when ei.entityinstanceenddate::Date > now()::date 
						and ei.entityinstancestartdate < now() then false
					else true
			end as entityinstanceactive,
			null::uuid as entityinstancetagentityuuid			
		from entity.entityinstance ei
		inner join entity.entityinstance customer
			on customer.entityinstanceuuid = ei.entityinstanceownerentityuuid
				and ei.entityinstanceownerentityuuid = ANY(read_entityinstanceownerentityuuid)
		inner join public.languagemaster lmowner
			on customer.entityinstancenameuuid = lmowner.languagemasteruuid
		left join public.languagetranslations ltowner
			on lmowner.languagemasterid = ltowner.languagetranslationmasterid
				and ltowner.languagetranslationtypeid  = templanguagetranslationtypeid
			join  entity.entityinstance eiparent
				on ei.entityinstanceparententityuuid = eiparent.entityinstanceuuid
			join languagemaster lmparent
				on eiparent.entityinstancenameuuid = lmparent.languagemasteruuid
			left join public.languagetranslations ltparent
				on ltparent.languagetranslationmasterid  = lmparent.languagemasterid
					and ltparent.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eicorner
				on ei.entityinstancecornerstoneentityuuid = eicorner.entityinstanceuuid
			join languagemaster lmcorner
				on eicorner.entityinstancenameuuid = lmcorner.languagemasteruuid
			left join public.languagetranslations ltcorner
				on ltcorner.languagetranslationmasterid  = lmcorner.languagemasterid
					and ltcorner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entitytemplate eitemplate
				on eitemplate.entitytemplateuuid = ei.entityinstanceentitytemplateentityuuid
			join languagemaster lmtemplate
				on eitemplate.entitytemplatenameuuid = lmtemplate.languagemasteruuid
			left join public.languagetranslations lttemplate
				on lttemplate.languagetranslationmasterid  = lmtemplate.languagemasterid
					and lttemplate.languagetranslationtypeid = templanguagetranslationtypeid 
			join languagemaster lmname
				on ei.entityinstancenameuuid = lmname.languagemasteruuid
			left join public.languagetranslations ltname
				on ltname.languagetranslationmasterid  = lmname.languagemasterid
					and ltname.languagetranslationtypeid = templanguagetranslationtypeid
			left join  entity.entityinstance eisystem
				on ei.entityinstanceexternalsystementityuuid = eisystem.entityinstanceuuid
			left join languagemaster lmsystem
				on eisystem.entityinstancenameuuid = lmsystem.languagemasteruuid
			left join public.languagetranslations ltsystem
				on ltsystem.languagetranslationmasterid  = lmsystem.languagemasterid
					and ltsystem.languagetranslationtypeid = templanguagetranslationtypeid;
		return;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityinstance_read_api(uuid[],uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_api(uuid[],uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_api(uuid[],uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_api(uuid[],uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: TABLE ; Name: entityfieldinstance; Owner: tendreladmin

CREATE TABLE entity.entityfieldinstance (
    entityfieldinstanceuuid uuid NOT NULL,
    entityfieldinstanceentityinstanceentityuuid uuid NOT NULL,
    entityfieldinstanceownerentityuuid uuid NOT NULL,
    entityfieldinstancevalue text,
    entityfieldinstancevaluelanguagemasteruuid text,
    entityfieldinstancecreateddate timestamp(3) with time zone NOT NULL,
    entityfieldinstancemodifieddate timestamp(3) with time zone,
    entityfieldinstancestartdate timestamp(3) with time zone,
    entityfieldinstanceenddate timestamp(3) with time zone,
    entityfieldinstanceentityfieldentityuuid uuid NOT NULL,
    entityfieldinstancemodifiedbyuuid text,
    entityfieldinstancerefid bigint,
    entityfieldinstancerefuuid text,
    entityfieldinstanceentityfieldname text,
    entityfieldinstancevaluelanguagetypeentityuuid uuid,
    entityfieldinstancedeleted boolean NOT NULL,
    entityfieldinstancedraft boolean NOT NULL
);


ALTER TABLE entity.entityfieldinstance ALTER entityfieldinstanceuuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.entityfieldinstance ALTER entityfieldinstancecreateddate SET DEFAULT now();
ALTER TABLE entity.entityfieldinstance ALTER entityfieldinstancemodifieddate SET DEFAULT now();
ALTER TABLE entity.entityfieldinstance ALTER entityfieldinstancedeleted SET DEFAULT false;
ALTER TABLE entity.entityfieldinstance ALTER entityfieldinstancedraft SET DEFAULT false;

ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT entityfieldinstance_entityfieldinstanceuuid_pk PRIMARY KEY (entityfieldinstanceuuid);
ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstancecustomerentityuuid_fk FOREIGN KEY (entityfieldinstanceownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstanceentityfieldentityuuid_fk FOREIGN KEY (entityfieldinstanceentityfieldentityuuid) REFERENCES entity.entityfield(entityfielduuid) NOT VALID;
ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstanceentityinstanceentityuuid_fk FOREIGN KEY (entityfieldinstanceentityinstanceentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstancemodifiedbyuuid_fk FOREIGN KEY (entityfieldinstancemodifiedbyuuid) REFERENCES workerinstance(workerinstanceuuid) NOT VALID;
ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstancevaluelanguagemasteruuid_fk FOREIGN KEY (entityfieldinstancevaluelanguagemasteruuid) REFERENCES languagemaster(languagemasteruuid) NOT VALID;
ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstancevaluelanguagetypeentityuuid_fk FOREIGN KEY (entityfieldinstancevaluelanguagetypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

CREATE INDEX efi_entityfieldinstancecompleteddate_idx ON entity.entityfieldinstance USING btree (entityfieldinstanceenddate);
CREATE INDEX efi_entityfieldinstancecustomerentityuuid_idx ON entity.entityfieldinstance USING btree (entityfieldinstanceownerentityuuid);
CREATE INDEX efi_entityfieldinstancedeleted_idx ON entity.entityfieldinstance USING btree (entityfieldinstancedeleted);
CREATE INDEX efi_entityfieldinstancedraft_idx ON entity.entityfieldinstance USING btree (entityfieldinstancedraft);
CREATE INDEX efi_entityfieldinstanceentityfieldentityuuid_idx ON entity.entityfieldinstance USING btree (entityfieldinstanceentityfieldentityuuid);
CREATE INDEX efi_entityfieldinstanceentityfieldname_idx ON entity.entityfieldinstance USING btree (entityfieldinstanceentityfieldname);
CREATE INDEX efi_entityfieldinstanceentityinstanceuuid ON entity.entityfieldinstance USING btree (entityfieldinstanceentityinstanceentityuuid);
CREATE INDEX efi_entityfieldinstancemodifiedbyuuid_idx ON entity.entityfieldinstance USING btree (entityfieldinstancemodifiedbyuuid);
CREATE INDEX efi_entityfieldinstancemodifieddate_idx ON entity.entityfieldinstance USING btree (entityfieldinstancemodifieddate);
CREATE INDEX efi_entityfieldinstancestartdate_idx ON entity.entityfieldinstance USING btree (entityfieldinstancestartdate);
CREATE INDEX efi_entityfieldinstancevalue_idx ON entity.entityfieldinstance USING btree (entityfieldinstancevalue);
CREATE INDEX efi_entityfieldinstancevaluelanguagemasteruuid_idx ON entity.entityfieldinstance USING btree (entityfieldinstancevaluelanguagemasteruuid);
CREATE INDEX efi_entityfieldinstancevaluelanguagetypeentityuuid_idx ON entity.entityfieldinstance USING btree (entityfieldinstancevaluelanguagetypeentityuuid);

GRANT INSERT ON entity.entityfieldinstance TO authenticated;
GRANT SELECT ON entity.entityfieldinstance TO authenticated;
GRANT UPDATE ON entity.entityfieldinstance TO authenticated;
GRANT DELETE ON entity.entityfieldinstance TO graphql;
GRANT INSERT ON entity.entityfieldinstance TO graphql;
GRANT REFERENCES ON entity.entityfieldinstance TO graphql;
GRANT SELECT ON entity.entityfieldinstance TO graphql;
GRANT TRIGGER ON entity.entityfieldinstance TO graphql;
GRANT TRUNCATE ON entity.entityfieldinstance TO graphql;
GRANT UPDATE ON entity.entityfieldinstance TO graphql;

-- Type: TABLE ; Name: entityfileinstance; Owner: tendreladmin

CREATE TABLE entity.entityfileinstance (
    entityfileinstanceuuid uuid NOT NULL,
    entityfileinstanceownerentityuuid uuid,
    entityfileinstanceentityentityinstanceentityuuid uuid,
    entityfileinstanceentityfieldinstanceentityuuid uuid,
    entityfileinstancestoragelocation text,
    entityfileinstancemimetypeuuid uuid,
    entityfileinstancecreateddate timestamp(3) with time zone NOT NULL,
    entityfileinstancemodifieddate timestamp(3) with time zone NOT NULL,
    entityfileinstanceexternalid text,
    entityfileinstancerefid bigint,
    entityfileinstancerefuuid text,
    entityfileinstancedraft boolean,
    entityfileinstancedeleted boolean,
    entityfileinstanceexternalsystemuuid uuid,
    entityfileinstancemodifiedby text
);


ALTER TABLE entity.entityfileinstance ALTER entityfileinstanceuuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.entityfileinstance ALTER entityfileinstancecreateddate SET DEFAULT now();
ALTER TABLE entity.entityfileinstance ALTER entityfileinstancemodifieddate SET DEFAULT now();

ALTER TABLE entity.entityfileinstance ADD CONSTRAINT entityfileinstance_pkey PRIMARY KEY (entityfileinstanceuuid);

GRANT INSERT ON entity.entityfileinstance TO authenticated;
GRANT SELECT ON entity.entityfileinstance TO authenticated;
GRANT UPDATE ON entity.entityfileinstance TO authenticated;
GRANT DELETE ON entity.entityfileinstance TO graphql;
GRANT INSERT ON entity.entityfileinstance TO graphql;
GRANT REFERENCES ON entity.entityfileinstance TO graphql;
GRANT SELECT ON entity.entityfileinstance TO graphql;
GRANT TRIGGER ON entity.entityfileinstance TO graphql;
GRANT TRUNCATE ON entity.entityfileinstance TO graphql;
GRANT UPDATE ON entity.entityfileinstance TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entitytag_read_api(uuid[],uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entitytag_read_api(read_ownerentityuuid uuid[], read_entitytagentityuuid uuid, read_entitytagentityinstanceuuid uuid, read_entitytagtemplateentityuuid uuid, read_entitytagcustagentityuuid uuid, read_allentitytags boolean, read_entitytagsenddeleted boolean, read_entitytagsenddrafts boolean, read_entitytagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entitytaguuid uuid, entitytagownerentityuuid uuid, entitytagownername text, entitytagentityinstanceentityuuid uuid, entitytagentityinstanceentityname text, entitytagentitytemplateentityuuid uuid, entitytagentitytemplatename text, entitytagcreateddate timestamp with time zone, entitytagmodifieddate timestamp with time zone, entitytagstartdate timestamp with time zone, entitytagenddate timestamp with time zone, entitytagrefid bigint, entitytagrefuuid text, entitytagmodifiedbyuuid text, entitytagcustagparententityuuid uuid, entitytagparentcustagtype text, entitytagcustagentityuuid uuid, entitytagcustagtype text, entitytagsenddeleted boolean, entitytagsenddrafts boolean, entitytagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	templanguagetranslationtypeid bigint;
BEGIN

/*  examples

-- all customers all entitytags

select * from entity.crud_entitytag_read_full(null, null,null,null, null, true, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific tag
select * from entity.crud_entitytag_read_full('ccda3933-c740-40ec-9a2b-a9f1a7d4db28','8cd49ef4-2b70-410b-85aa-4b67f617066a',null,null, null, false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all tags for a specific instance
select * from entity.crud_entitytag_read_full('ccda3933-c740-40ec-9a2b-a9f1a7d4db28',null,'d57f7b9c-fe72-463a-9cc9-1cb03ad4a812',null, null, false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a template
select * from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all tags for a template no instances
select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a tag
select * from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, null, 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a template and a tag
select * from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, '0b9f3142-e7ed-4f78-8504-ccd2eb505075', 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

*/

select ei.entityinstanceoriginalid
into templanguagetranslationtypeid
from entity.entityinstance ei
where entityinstanceuuid=read_languagetranslationtypeentityuuid; 

return query 
		SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
		COALESCE(customerlt.languagetranslationvalue, customerlm.languagemastersource) AS customername,
	    et.entitytagentityinstanceentityuuid,
		COALESCE(instancelt.languagetranslationvalue, instancelm.languagemastersource) AS entityinstancename,
	    et.entitytagentitytemplateentityuuid,
		COALESCE(templatelt.languagetranslationvalue, templatelm.languagemastersource) AS entitytemplatename,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
		custag.entityinstanceparententityuuid,  
		COALESCE(parentlt.languagetranslationvalue, parentlm.languagemastersource) AS custagparentname,
	    et.entitytagcustagentityuuid,
		COALESCE(custaglt.languagetranslationvalue, custaglm.languagemastersource) AS custagname,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
		inner join entity.entityinstance customer
			on customer.entityinstanceuuid = et.entitytagownerentityuuid
				and et.entitytagownerentityuuid = ANY(read_ownerentityuuid)
		inner join public.languagemaster customerlm
			on customer.entityinstancenameuuid = customerlm.languagemasteruuid
		left join public.languagetranslations customerlt
			on customerlm.languagemasterid = customerlt.languagetranslationmasterid
				and customerlt.languagetranslationtypeid  = templanguagetranslationtypeid
		left join entity.entitytemplate template
			on template.entitytemplateuuid = et.entitytagentitytemplateentityuuid
		left join public.languagemaster templatelm
			on template.entitytemplatenameuuid = templatelm.languagemasteruuid
		left join public.languagetranslations templatelt
			on templatelm.languagemasterid = templatelt.languagetranslationmasterid
				and templatelt.languagetranslationtypeid  = templanguagetranslationtypeid
		left join entity.entityinstance instance
			on instance.entityinstanceuuid = et.entitytagentityinstanceentityuuid		
		left join public.languagemaster instancelm
			on instance.entityinstancenameuuid = instancelm.languagemasteruuid
		left join public.languagetranslations instancelt
			on instancelm.languagemasterid = instancelt.languagetranslationmasterid
				and instancelt.languagetranslationtypeid  = templanguagetranslationtypeid
		inner join entity.entityinstance custag
			on custag.entityinstanceuuid = et.entitytagcustagentityuuid		
		inner join public.languagemaster custaglm
			on custag.entityinstancenameuuid = custaglm.languagemasteruuid
		left join public.languagetranslations custaglt
			on custaglm.languagemasterid = custaglt.languagetranslationmasterid
				and custaglt.languagetranslationtypeid  = templanguagetranslationtypeid
		inner join entity.entityinstance parent
			on parent.entityinstanceuuid = custag.entityinstanceparententityuuid
		inner join public.languagemaster parentlm
			on parent.entityinstancenameuuid = parentlm.languagemasteruuid
		left join public.languagetranslations parentlt
			on parentlm.languagemasterid = parentlt.languagetranslationmasterid	
				and parentlt.languagetranslationtypeid  = templanguagetranslationtypeid
		;	
return;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entitytag_read_api(uuid[],uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_api(uuid[],uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_api(uuid[],uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_api(uuid[],uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_location_read_full(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_location_read_full(read_locationownerentityuuid uuid, read_locationentityuuid uuid, read_locationparententityuuid uuid, read_locationcornerstoneentityuuid uuid, read_alllocations boolean, read_locationtag uuid, read_locationsenddeleted boolean, read_locationsenddrafts boolean, read_locationsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, locationid bigint, locationuuid text, locationentityuuid uuid, locationownerentityuuid uuid, locationparententityuuid uuid, locationcornerstoneentityuuid uuid, locationcustomerid bigint, locationcustomeruuid text, locationcustomerentityuuid uuid, locationcustomername text, locationnameuuid text, locationname text, locationdisplaynameuuid text, locationdisplayname text, locationscanid text, locationcreateddate timestamp with time zone, locationmodifieddate timestamp with time zone, locationmodifiedbyuuid text, locationstartdate timestamp with time zone, locationenddate timestamp with time zone, locationexternalid text, locationexternalsystementityuuid uuid, locationexternalsystementname text, locationcornerstoneorder integer, locationlatitude numeric, locationlongitude numeric, locationradius numeric, locationtimezone text, locationtagentityuuid uuid, locationtagname text, locationsenddeleted boolean, locationsenddrafts boolean, locationsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allcustomers boolean; 
	templocationsenddeleted boolean[];
	templocationsenddrafts boolean[];
	templocationsendinactive boolean[];
	tendreluuid uuid;
	englishuuid uuid;
BEGIN

-- Curently ignores language translation.  We should change this in the future for location. 
-- Might want to add a parameter to send in active as a boolean
-- probably should move this to use arrays for in parameters

/*  examples

-- call entity.test_entity()

-- all customers all locations all tags
select * from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 10

-- all locations for a specific customer all tags
select * from entity.crud_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all locations for a specific customer and specific tag
select * from entity.crud_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,true,'1aefd363-45aa-4986-80e9-e8e212059a85',null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- specific parent
select * from entity.crud_location_read_full('92eba0ba-b271-40d0-8d64-6de19b3df6f7',null,'36a3c4ef-07ce-4295-9132-8c323099dcc4',null,false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- specific cornerstone
select * from entity.crud_location_read_full('58f4032b-d614-4f7d-97e7-e20240205229',null,null,'dceec0cf-f626-4775-807a-3bacc70de8eb',false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- specific location 

select * from entity.crud_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','af4dc39d-7d4a-46a4-9ad0-980c23bff933',null,null,false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- negative test
-- ADD SOME.  DID NOT DO THIS YET. 

*/

-- A future version with all customers???
-- all locations ignore tags.  This can return duplicates.

if read_locationownerentityuuid isNull
	then allcustomers = true;
	else allcustomers = false;
end if;

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';

if  read_locationsenddeleted = false
	then templocationsenddeleted = Array[false];
	else templocationsenddeleted = Array[true,false];
end if;

if  read_locationsenddrafts = false
	then templocationsenddrafts = Array[false];
	else templocationsenddrafts = Array[true,false];
end if;

if  read_locationsendinactive = false
	then templocationsendinactive = Array[true];
	else templocationsendinactive = Array[true,false];
end if;

if allcustomers = true and read_alllocations = true and read_locationtag isNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			cust.customername as systagcustomername,
			ei.entityinstancenameuuid as locationnameuuid,
			COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS locationname,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS locationdisplayname,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			systemname.systagtype as locationexternalsystementname,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			custagname.custagtype as locationtagname,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid, customername  
				from entity.crud_customer_read_full(read_locationownerentityuuid,null, null, allcustomers,  null, null, null,read_languagetranslationtypeentityuuid)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location' 
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as custagname
				on read_locationtag =  custagname.custagentityuuid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as systemname
				on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
			left join languagemaster namelm
				on ei.entityinstancenameuuid = namelm.languagemasteruuid
			left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo)
			left join languagemaster displaylm
				on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
			left join public.languagetranslations displaylt
				on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
					and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo2)) as foo3
		where foo3.entityinstanceactive = Any (templocationsendinactive) ;  
		return;
end if;

-- all locations for a customer

if allcustomers = false and read_alllocations = true and read_locationtag isNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			cust.customername as systagcustomername,
			ei.entityinstancenameuuid as locationnameuuid,
			COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS locationname,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS locationdisplayname,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			systemname.systagtype as locationexternalsystementname,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			custagname.custagtype as locationtagname,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid, customername  
				from entity.crud_customer_read_full(read_locationownerentityuuid,null, null, allcustomers, null, null, null,read_languagetranslationtypeentityuuid)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as custagname
				on read_locationtag =  custagname.custagentityuuid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as systemname
				on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
			left join languagemaster namelm
				on ei.entityinstancenameuuid = namelm.languagemasteruuid
			left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo)
			left join languagemaster displaylm
				on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
			left join public.languagetranslations displaylt
				on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
					and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo2)) as foo3
		where foo3.entityinstanceactive = Any (templocationsendinactive) ;
		return;
end if;

-- all locations for a parent 

if allcustomers = false and read_alllocations = false 
	and read_locationparententityuuid notNull and read_locationtag isNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			cust.customername as systagcustomername,
			ei.entityinstancenameuuid as locationnameuuid,
			COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS locationname,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS locationdisplayname,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			systemname.systagtype as locationexternalsystementname,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			custagname.custagtype as locationtagname,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid, customername  from entity.crud_customer_read_full(read_locationownerentityuuid,null, null, allcustomers, null, null, null,read_languagetranslationtypeentityuuid)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstanceparententityuuid  = read_locationparententityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as custagname
				on read_locationtag =  custagname.custagentityuuid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as systemname
				on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
			left join languagemaster namelm
				on ei.entityinstancenameuuid = namelm.languagemasteruuid
			left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo)
			left join languagemaster displaylm
				on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
			left join public.languagetranslations displaylt
				on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
					and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo2)) as foo3
		where foo3.entityinstanceactive = Any (templocationsendinactive) ;
		return;
end if;

-- all locations for a cornerstone 

if allcustomers = false and read_alllocations = false 
	and read_locationcornerstoneentityuuid notNull and read_locationtag isNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			cust.customername as systagcustomername,
			ei.entityinstancenameuuid as locationnameuuid,
			COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS locationname,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS locationdisplayname,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			systemname.systagtype as locationexternalsystementname,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			custagname.custagtype as locationtagname,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid, customername  from entity.crud_customer_read_full(read_locationownerentityuuid,null, null, allcustomers,null, null, null, read_languagetranslationtypeentityuuid)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstancecornerstoneentityuuid  = read_locationcornerstoneentityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as custagname
				on read_locationtag =  custagname.custagentityuuid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as systemname
				on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
			left join languagemaster namelm
				on ei.entityinstancenameuuid = namelm.languagemasteruuid
			left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo)
			left join languagemaster displaylm
				on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
			left join public.languagetranslations displaylt
				on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
					and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo2)) as foo3
		where foo3.entityinstanceactive = Any (templocationsendinactive) ;
		return;
end if;

-- all locations for a specific customer and specific tag
if allcustomers = false and read_alllocations = true and read_locationtag notNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			cust.customername as systagcustomername,
			ei.entityinstancenameuuid as locationnameuuid,
			COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS locationname,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS locationdisplayname,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			systemname.systagtype as locationexternalsystementname,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			read_locationtag as locationtagentityuuid,
			custagname.custagtype as locationtagname,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid, customername  from entity.crud_customer_read_full(read_locationownerentityuuid,null, null, allcustomers, null, null, null,read_languagetranslationtypeentityuuid)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			join entity.entitytag enttag  -- this filters to the correct tag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid
					and enttag.entitytagcustagentityuuid = read_locationtag
			inner join (select * from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as custagname
				on read_locationtag =  custagname.custagentityuuid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as systemname
				on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
			left join languagemaster namelm
				on ei.entityinstancenameuuid = namelm.languagemasteruuid
			left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo)
			left join languagemaster displaylm
				on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
			left join public.languagetranslations displaylt
				on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
					and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo2)) as foo3
		where foo3.entityinstanceactive = Any (templocationsendinactive) ;
		return;
end if;

-- specific location 
if allcustomers = false and read_alllocations = false and read_locationentityuuid notNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			cust.customername as systagcustomername,
			ei.entityinstancenameuuid as locationnameuuid,
			COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS locationname,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS locationdisplayname,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			systemname.systagtype as locationexternalsystementname,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			custagname.custagtype as locationtagname,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid, customername  from entity.crud_customer_read_full(read_locationownerentityuuid,null, null, allcustomers, null, null, null,read_languagetranslationtypeentityuuid)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstanceuuid = read_locationentityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			inner join entity.entityinstance site
				on ei.entityinstancesiteentityuuid = site.entityinstanceuuid
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as custagname
				on read_locationtag =  custagname.custagentityuuid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as systemname
				on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid
			left join languagemaster namelm
				on ei.entityinstancenameuuid = namelm.languagemasteruuid
			left join public.languagetranslations namelt
				on namelt.languagetranslationmasterid  = namelm.languagemasterid
					and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo)
			left join languagemaster displaylm
				on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
			left join public.languagetranslations displaylt
				on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
					and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, null, null, false,null,null, null,englishuuid) as foo2)
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid) as foo3
		where foo3.entityinstanceactive = Any (templocationsendinactive) ;
		return;
				
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_location_read_full(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_location_read_full(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_location_read_full(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_location_read_full(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_location_read_min(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_location_read_min(read_locationownerentityuuid uuid, read_locationentityuuid uuid, read_locationparententityuuid uuid, read_locationcornerstoneentityuuid uuid, read_alllocations boolean, read_locationtag uuid, read_locationsenddeleted boolean, read_locationsenddrafts boolean, read_locationsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, locationid bigint, locationuuid text, locationentityuuid uuid, locationownerentityuuid uuid, locationparententityuuid uuid, locationcornerstoneentityuuid uuid, locationcustomerid bigint, locationcustomeruuid text, locationcustomerentityuuid uuid, locationnameuuid text, locationdisplaynameuuid text, locationscanid text, locationcreateddate timestamp with time zone, locationmodifieddate timestamp with time zone, locationmodifiedbyuuid text, locationstartdate timestamp with time zone, locationenddate timestamp with time zone, locationexternalid text, locationexternalsystementityuuid uuid, locationcornerstoneorder integer, locationlatitude numeric, locationlongitude numeric, locationradius numeric, locationtimezone text, locationtagentityuuid uuid, locationsenddeleted boolean, locationsenddrafts boolean, locationsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allcustomers boolean; 
	templocationsenddeleted boolean[];
	templocationsenddrafts boolean[];
	templocationsendinactive boolean[];
	tendreluuid uuid;
BEGIN

-- Curently ignores language translation.  We should change this in the future for location. 
-- Might want to add a parameter to send in active as a boolean
-- probably should move this to use arrays for in parameters

/*  examples

-- call entity.test_entity()

-- all customers all locations all tags
select * from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 10
-- all locations for a specific customer all tags
select * from entity.crud_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all locations for a specific customer and specific tag
select * from entity.crud_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,true,'1aefd363-45aa-4986-80e9-e8e212059a85',null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- specific parent
select * from entity.crud_location_read_min('92eba0ba-b271-40d0-8d64-6de19b3df6f7',null,'36a3c4ef-07ce-4295-9132-8c323099dcc4',null,false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- specific cornerstone
select * from entity.crud_location_read_min('58f4032b-d614-4f7d-97e7-e20240205229',null,null,'dceec0cf-f626-4775-807a-3bacc70de8eb',false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- specific location 

select * from entity.crud_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','af4dc39d-7d4a-46a4-9ad0-980c23bff933',null,null,false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- negative test
-- ADD SOME.  DID NOT DO THIS YET. 

*/

-- A future version with all customers???
-- all locations ignore tags.  This can return duplicates.

if read_locationownerentityuuid isNull
	then allcustomers = true;
	else allcustomers = false;
end if;

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if  read_locationsenddeleted = false
	then templocationsenddeleted = Array[false];
	else templocationsenddeleted = Array[true,false];
end if;

if  read_locationsenddrafts = false
	then templocationsenddrafts = Array[false];
	else templocationsenddrafts = Array[true,false];
end if;

if  read_locationsendinactive = false
	then templocationsendinactive = Array[true];
	else templocationsendinactive = Array[true,false];
end if;

if allcustomers = true and read_alllocations = true and read_locationtag isNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			ei.entityinstancenameuuid as locationnameuuid,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_locationownerentityuuid,null,null,allcustomers, null,null,null,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location' 
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid) as foo
		where foo.entityinstanceactive = Any (templocationsendinactive) ; 
		return;
end if;

-- all locations for a customer

if allcustomers = false and read_alllocations = true and read_locationtag isNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			ei.entityinstancenameuuid as locationnameuuid,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_locationownerentityuuid,null,null,allcustomers, null,null,null,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid) as foo
		where foo.entityinstanceactive = Any (templocationsendinactive) ; 
			return;
end if;

-- all locations for a parent 

if allcustomers = false and read_alllocations = false 
	and read_locationparententityuuid notNull and read_locationtag isNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			ei.entityinstancenameuuid as locationnameuuid,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_locationownerentityuuid,null,null,allcustomers, null,null,null,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstanceparententityuuid  = read_locationparententityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid) as foo
		where foo.entityinstanceactive = Any (templocationsendinactive) ; 
			return;
end if;

if allcustomers = false and read_alllocations = false 
	and read_locationcornerstoneentityuuid notNull and read_locationtag isNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			ei.entityinstancenameuuid as locationnameuuid,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_locationownerentityuuid,null,null,allcustomers, null,null,null,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstancecornerstoneentityuuid  = read_locationcornerstoneentityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid) as foo
		where foo.entityinstanceactive = Any (templocationsendinactive) ; 
			return;
end if;

-- all locations for a specific customer and specific tag
if allcustomers = false and read_alllocations = true and read_locationtag notNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			ei.entityinstancenameuuid as locationnameuuid,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			read_locationtag as locationtagentityuuid,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_locationownerentityuuid,null,null,allcustomers, null,null,null,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone' 
			join entity.entitytag enttag  -- this filters to the correct tag.  Should I check by tempalte?
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid
					and enttag.entitytagcustagentityuuid = read_locationtag) as foo
		where foo.entityinstanceactive = Any (templocationsendinactive) ; 
		return;

end if;

-- specific location 
if allcustomers = false and read_alllocations = false and read_locationentityuuid notNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid as locationid,
			ei.entityinstanceoriginaluuid as locationuuid,
			ei.entityinstanceuuid as locationentityuuid,
			ei.entityinstanceownerentityuuid as locationownerentityuuid,	
			ei.entityinstanceparententityuuid as locationparententityuuid,	
			ei.entityinstancecornerstoneentityuuid  as locationcornerstoneentityuuid,
			cust.customerid as locationcustomerid,	
			cust.customeruuid as locationcustomeruuid,
			cust.customerentityuuid as locationcustomerentityuuid,
			ei.entityinstancenameuuid as locationnameuuid,
			dn.entityfieldinstancevaluelanguagemasteruuid as locationdisplaynameuuid,
			ei.entityinstancescanid as locationscanid,
			ei.entityinstancecreateddate as locationcreateddate,
			ei.entityinstancemodifieddate as locationmodifieddate,
			ei.entityinstancemodifiedbyuuid as locationmodifiedbyuuid,
			ei.entityinstancestartdate as locationstartdate,	
			ei.entityinstanceenddate as locationenddate,
			ei.entityinstanceexternalid as locationexternalid,
			ei.entityinstanceexternalsystementityuuid as locationexternalsystementityuuid,
			ei.entityinstancecornerstoneorder as  locationcornerstoneorder,
			lat.entityfieldinstancevalue::numeric as locationlatitude,	
			lon.entityfieldinstancevalue::numeric as locationlongitude,
			rad.entityfieldinstancevalue::numeric as locationradius,	
			tz.entityfieldinstancevalue as locationtimezone,
			enttag.entitytagcustagentityuuid as locationtagentityuuid,
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_locationownerentityuuid,null,null,allcustomers, null,null,null,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Location'  
					and ei.entityinstanceownerentityuuid = read_locationownerentityuuid
					and ei.entityinstanceuuid = read_locationentityuuid
					and ei.entityinstancedeleted = ANY (templocationsenddeleted)
					and ei.entityinstancedraft = ANY (templocationsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'locationdisplayname' 
			join entity.entityfieldinstance lat
				on ei.entityinstanceuuid = lat.entityfieldinstanceentityinstanceentityuuid
					and lat.entityfieldinstanceentityfieldname = 'locationlatitude' 
			join entity.entityfieldinstance lon
				on ei.entityinstanceuuid = lon.entityfieldinstanceentityinstanceentityuuid
					and lon.entityfieldinstanceentityfieldname = 'locationlongitude' 
			join entity.entityfieldinstance rad
				on ei.entityinstanceuuid = rad.entityfieldinstanceentityinstanceentityuuid
					and rad.entityfieldinstanceentityfieldname = 'locationradius' 
			join entity.entityfieldinstance tz
				on ei.entityinstanceuuid = tz.entityfieldinstanceentityinstanceentityuuid
					and tz.entityfieldinstanceentityfieldname = 'locationtimezone'
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid) as foo
		where foo.entityinstanceactive = Any (templocationsendinactive) ; 
				return;
				
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_location_read_min(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_location_read_min(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_location_read_min(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_location_read_min(uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_systag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_systag_read_min(read_ownerentityuuid uuid, read_siteentityuuid uuid, read_systagentityuuid uuid, read_systagparententityuuid uuid, read_allsystags boolean, read_systagsenddeleted boolean, read_systagsenddrafts boolean, read_systagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, systagid bigint, systaguuid text, systagentityuuid uuid, systagcustomerid bigint, systagcustomeruuid text, systagcustomerentityuuid uuid, systagnameuuid text, systagdisplaynameuuid text, systagtype text, systagcreateddate timestamp with time zone, systagmodifieddate timestamp with time zone, systagstartdate timestamp with time zone, systagenddate timestamp with time zone, systagexternalid text, systagexternalsystementityuuid uuid, systagmodifiedbyuuid text, systagabbreviationentityuuid uuid, systagparententityuuid uuid, systagorder integer, systagsenddeleted boolean, systagsenddrafts boolean, systagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	tempsystagsenddeleted boolean[];
	tempsystagsenddrafts boolean[];
	tempsystagsendinactive boolean[];
	tendreluuid uuid;
BEGIN

/*  examples

-- all customers all systags 
select * from entity.crud_systag_read_min(null,null,null, null, true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- all systags for a specific customer
select * from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- all systags for a parent
select * from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- fail scenario for parent
select * from entity.crud_systag_read_min(null,null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- specific systags
select * from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

select systagentityuuid 
from entity.crud_systag_read_min(null, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,null,null,null'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

select * from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '580f6ee2-42ca-4a5b-9e18-9ea0c168845a', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if  read_systagsenddeleted = false
	then tempsystagsenddeleted = Array[false];
	else tempsystagsenddeleted = Array[true,false];
end if;

if read_systagsenddrafts = false
	then tempsystagsenddrafts = Array[false];
	else tempsystagsenddrafts = Array[true,false];
end if;

if read_systagsendinactive = false
	then tempsystagsendinactive = Array[true];
	else tempsystagsendinactive = Array[true,false];
end if;

if read_allsystags = true
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as systagid,
	ei.entityinstanceoriginaluuid as systaguuid,
	ei.entityinstanceuuid as systagentityuuid,
	cust.customerid as systagcustomerid,	
	cust.customeruuid as systagcustomeruuid,
	cust.customerentityuuid::uuid as systagcustomerentityuuid,
	ei.entityinstancenameuuid as systagnameuuid,
	dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
	ei.entityinstancetype as systagtype,
	ei.entityinstancecreateddate as systagcreateddate,
	ei.entityinstancemodifieddate as systagmodifieddate,	
	ei.entityinstancestartdate as systagstartdate,
	ei.entityinstanceenddate as systagenddate,
	ei.entityinstanceexternalid as systagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as systagabbreviationentityuuid,
	ei.entityinstanceparententityuuid as systagparententityuuid,
	ei.entityinstancecornerstoneorder as systagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid  
				from entity.crud_customer_read_min(read_ownerentityuuid,null, null,allowners, read_systagsenddeleted,read_systagsenddrafts,read_systagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'System Tag' 
			and ei.entityinstancedeleted = ANY (tempsystagsenddeleted)
			and ei.entityinstancedraft = ANY (tempsystagsenddrafts)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'systagdisplayname' 
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid' ) as foo
		where foo.entityinstanceactive = Any (tempsystagsendinactive) ; 
	return;

end if;

if read_systagentityuuid notNull
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as systagid,
	ei.entityinstanceoriginaluuid as systaguuid,
	ei.entityinstanceuuid as systagentityuuid,
	cust.customerid as systagcustomerid,	
	cust.customeruuid as systagcustomeruuid,
	cust.customerentityuuid::uuid as systagcustomerentityuuid,
	ei.entityinstancenameuuid as systagnameuuid,
	dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
	ei.entityinstancetype as systagtype,
	ei.entityinstancecreateddate as systagcreateddate,
	ei.entityinstancemodifieddate as systagmodifieddate,	
	ei.entityinstancestartdate as systagstartdate,
	ei.entityinstanceenddate as systagenddate,
	ei.entityinstanceexternalid as systagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as systagabbreviationentityuuid,
	ei.entityinstanceparententityuuid as systagparententityuuid,
	ei.entityinstancecornerstoneorder as systagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min (read_ownerentityuuid,null, null,allowners, read_systagsenddeleted,read_systagsenddrafts,read_systagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'System Tag'
			and ei.entityinstanceuuid = read_systagentityuuid
			and ei.entityinstancedeleted = ANY (tempsystagsenddeleted)
			and ei.entityinstancedraft = ANY (tempsystagsenddrafts)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'systagdisplayname' 
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid') as foo
		where foo.entityinstanceactive = Any (tempsystagsendinactive) ;
		return;

end if;

if read_systagparententityuuid isNull and read_ownerentityuuid notNull
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as systagid,
	ei.entityinstanceoriginaluuid as systaguuid,
	ei.entityinstanceuuid as systagentityuuid,
	cust.customerid as systagcustomerid,	
	cust.customeruuid as systagcustomeruuid,
	cust.customerentityuuid::uuid as systagcustomerentityuuid,
	ei.entityinstancenameuuid as systagnameuuid,
	dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
	ei.entityinstancetype as systagtype,
	ei.entityinstancecreateddate as systagcreateddate,
	ei.entityinstancemodifieddate as systagmodifieddate,	
	ei.entityinstancestartdate as systagstartdate,
	ei.entityinstanceenddate as systagenddate,
	ei.entityinstanceexternalid as systagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as systagabbreviationentityuuid,
	ei.entityinstanceparententityuuid as systagparententityuuid,
	ei.entityinstancecornerstoneorder as systagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid from entity.crud_customer_read_min(read_ownerentityuuid,null, null,allowners,read_systagsenddeleted,read_systagsenddrafts,read_systagsendinactive, null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'System Tag'  
			and ei.entityinstanceownerentityuuid = read_ownerentityuuid
			and ei.entityinstanceparententityuuid = read_systagparententityuuid
			and ei.entityinstancedeleted = ANY (tempsystagsenddeleted)
			and ei.entityinstancedraft = ANY (tempsystagsenddrafts)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'systagdisplayname' 
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid') as foo
		where foo.entityinstanceactive = Any (tempsystagsendinactive) ;
		return;
end if;

if read_systagparententityuuid notNull and read_ownerentityuuid notNull
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as systagid,
	ei.entityinstanceoriginaluuid as systaguuid,
	ei.entityinstanceuuid as systagentityuuid,
	cust.customerid as systagcustomerid,	
	cust.customeruuid as systagcustomeruuid,
	cust.customerentityuuid::uuid as systagcustomerentityuuid,
	ei.entityinstancenameuuid as systagnameuuid,
	dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
	ei.entityinstancetype as systagtype,
	ei.entityinstancecreateddate as systagcreateddate,
	ei.entityinstancemodifieddate as systagmodifieddate,	
	ei.entityinstancestartdate as systagstartdate,
	ei.entityinstanceenddate as systagenddate,
	ei.entityinstanceexternalid as systagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as systagabbreviationentityuuid,
	ei.entityinstanceparententityuuid as systagparententityuuid,
	ei.entityinstancecornerstoneorder as systagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid from entity.crud_customer_read_min(read_ownerentityuuid,null, null,allowners,read_systagsenddeleted,read_systagsenddrafts,read_systagsendinactive, null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'System Tag'  
			and ei.entityinstanceownerentityuuid = read_ownerentityuuid
			and ei.entityinstanceparententityuuid = read_systagparententityuuid
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'systagdisplayname' 
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid') as foo
		where foo.entityinstanceactive = Any (tempsystagsendinactive) ;
		return;
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_systag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_systag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_systag_read_api(read_ownerentityuuid uuid[], read_siteentityuuid uuid, read_systagentityuuid uuid, read_systagparententityuuid uuid, read_allsystags boolean, read_systagsenddeleted boolean, read_systagsenddrafts boolean, read_systagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, systagid bigint, systaguuid text, systagentityuuid uuid, systagownerentityuuid uuid, systagownerentityname text, systagparententityuuid uuid, systagparentname text, systagcornerstoneentityid uuid, systagcustomerid bigint, systagcustomeruuid text, systagcustomerentityuuid uuid, systagcustomername text, systagnameuuid text, systagname text, systagdisplaynameuuid text, systagdisplayname text, systagtype text, systagcreateddate timestamp with time zone, systagmodifieddate timestamp with time zone, systagstartdate timestamp with time zone, systagenddate timestamp with time zone, systagexternalid text, systagexternalsystementityuuid uuid, systagexternalsystemenname text, systagmodifiedbyuuid text, systagabbreviationentityuuid uuid, systagabbreviationname text, systagorder integer, systagsenddeleted boolean, systagsenddrafts boolean, systagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	templanguagetranslationtypeid bigint;
BEGIN

-- Need to handle language translation in full version.  minimal version does not use languagetranslation
-- Might want to add a parameter to send in active as a boolean
-- Curretnly ignores site since systag does not care about site.  systag does.  
-- May want to flip paramaeters to be arrays in the future.  

/*  examples

-- call entity.test_entity()

-- all customers all systags 
select * from entity.crud_systag_read_api(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- all systags for a specific customer
select * from entity.crud_systag_read_api(ARRAY['f90d618d-5de7-4126-8c65-0afb700c6c61'],null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- all systags for a parent
select * from entity.crud_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- fail scenario for parent
select * from entity.crud_systag_read_full(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- specific systags
-- succeed
select * from entity.crud_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

--fail
select * from entity.crud_systag_read_full(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

*/

select ei.entityinstanceoriginalid
into templanguagetranslationtypeid
from entity.entityinstance ei
where entityinstanceuuid=read_languagetranslationtypeentityuuid; 

return query
	SELECT 
		read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
		ei.entityinstanceoriginalid as systagid,
		ei.entityinstanceoriginaluuid as systaguuid,
		ei.entityinstanceuuid as systagentityuuid,
	    ei.entityinstanceownerentityuuid,
		COALESCE(customerlt.languagetranslationvalue, customerlm.languagemastersource) AS customername,	
		ei.entityinstanceparententityuuid as systagparententityuuid,
		COALESCE(parentlt.languagetranslationvalue, parentlm.languagemastersource) AS systagparentname,
		ei.entityinstancecornerstoneentityuuid  as systagcornerstoneentityid,
		null::bigint as systagcustomerid,	
		null::text as systagcustomeruuid,
		null::uuid as systagcustomerentityuuid,
		null::text as systagcustomername,
		ei.entityinstancenameuuid as systagnameuuid,
		COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS systagname,
		dn.entityfieldinstancevaluelanguagemasteruuid as systagdisplaynameuuid,
		COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS systagdisplayname,
		ei.entityinstancetype as systagtype,
		ei.entityinstancecreateddate as systagcreateddate,
		ei.entityinstancemodifieddate as systagmodifieddate,	
		ei.entityinstancestartdate as systagstartdate,
		ei.entityinstanceenddate as systagenddate,
		ei.entityinstanceexternalid as systagexternalid,
		ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
		null as systagexternalsystementname,
		ei.entityinstancemodifiedbyuuid as systagmodifiedbyuuid,
		null::uuid as systagabbreviationentityuuid,
		null::text as systagabbreviationname,
		ei.entityinstancecornerstoneorder as systagorder,
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
		case when ei.entityinstancedeleted then false
				when ei.entityinstancedraft then false
				when ei.entityinstanceenddate::Date > now()::date 
					and ei.entityinstancestartdate < now() then false
				else true
		end as entityinstanceactive
	from entity.entityinstance ei
		inner join entity.entityinstance customer
			on customer.entityinstanceuuid = ei.entityinstanceownerentityuuid
				and (ei.entityinstanceownerentityuuid = ANY(read_ownerentityuuid)
					or	ei.entityinstanceownerentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61')
				and ei.entityinstanceentitytemplateentityuuid = 'def05966-06b2-483e-8988-d0f898e45e6c'
		inner join public.languagemaster customerlm
			on customer.entityinstancenameuuid = customerlm.languagemasteruuid
		left join public.languagetranslations customerlt
			on customerlm.languagemasterid = customerlt.languagetranslationmasterid
				and customerlt.languagetranslationtypeid  = templanguagetranslationtypeid
		inner join entity.entityinstance parent
			on parent.entityinstanceuuid = ei.entityinstanceparententityuuid
		inner join public.languagemaster parentlm
			on parent.entityinstancenameuuid = parentlm.languagemasteruuid
		left join public.languagetranslations parentlt
			on parentlm.languagemasterid = parentlt.languagetranslationmasterid	
				and parentlt.languagetranslationtypeid  = templanguagetranslationtypeid
		inner join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
			on ei.entityinstancenameuuid = namelm.languagemasteruuid
		left join public.languagetranslations namelt
			on namelt.languagetranslationmasterid  = namelm.languagemasterid
				and namelt.languagetranslationtypeid = templanguagetranslationtypeid
		join entity.entityfieldinstance dn
			on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldentityuuid = 'cf94ce9c-edd3-4c7b-8128-ab598fc9710a' 
		left join languagemaster displaylm
			on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
		left join public.languagetranslations displaylt
			on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
				and displaylt.languagetranslationtypeid = templanguagetranslationtypeid;
return;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_systag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_systag_read_api(uuid[],uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.create_batch_instances(uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.create_batch_instances(IN etl_batch uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare
	templanguagemasterid bigint;
	parenttypeid bigint;
	locationtypeid bigint;

Begin
-- create new batches for the owner  

update entity.runtime_upload_prepped
set batchinstanceuuid = wi.id
from public.workinstance wi
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (1014)
where uploadbatchid = workinstanceexternalid and batchinstanceuuid isNull 	
	and customerid = workinstancecustomerid and import_batch = etl_batch;

if ((select count(*) from entity.runtime_upload_prepped where batchinstanceuuid isNull and import_batch = etl_batch) > 0)
	then
		INSERT INTO public.workinstance(
			workinstancecustomerid,
			workinstanceworktemplateid,
			workinstancesiteid,
			workinstancetypeid,
			workinstancestatusid,
			workinstancetargetstartdate,
			workinstancestartdate, 
			workinstancecompleteddate, 	
			workinstanceexternalid, 	
			workinstancetimezone,
			workinstancemodifiedby,
			workinstancerefuuid)
		(select 
		 	batches.customerid,
			(select worktemplateid 
				from worktemplate wt
					inner join public.worktemplatetype wtt
						on worktemplatetypeworktemplateuuid = wt.id
							and worktemplatecustomerid = batches.customerid
							and worktemplatetypesystagid = 1014 ), -- fix this
			batches.siteid,
			811,
			707,
			batches.mindate,
			batches.mindate, 
			null,  	
			batches.uploadbatchid,
			batches.timezone,
		 	(select workerinstanceid from workerinstance where workerinstanceuuid = batches.modby), 
			batches.uploadbatchid 
		from (select customerid,uploadowneruuid,uploadbatchid,siteid,timezone,  min(uploadstartdate) as mindate, min(uploademployeetendreluuid) as modby
				from entity.runtime_upload_prepped
					left join (
						select languagemastersource, workinstancecustomerid 
						from workinstance wi
							inner join worktemplate wt
								on workinstanceworktemplateid = worktemplateid
							inner join public.worktemplatetype wtt
								on worktemplatetypeworktemplateuuid = wt.id
									and worktemplatetypesystagid = 1014  -- fix this
							inner join languagemaster
								on workinstancenameid = languagemasteruuid
						group by languagemastersource,workinstancecustomerid) batches
						on languagemastersource = uploadbatchid
							and workinstancecustomerid = customerid
				where languagemastersource isNull and import_batch = etl_batch
				group by customerid,uploadowneruuid,uploadbatchid,siteid,timezone) batches);
		
		INSERT INTO public.languagemaster(
				languagemastercustomerid,
				languagemastersourcelanguagetypeid,
				languagemastersource,
				languagemastermodifiedby,
				languagemasterrefid)
		select workinstancecustomerid, 20, workinstanceexternalid, workinstancemodifiedby, workinstanceid
		from workinstance
			inner join worktemplate wt
				on workinstanceworktemplateid = worktemplateid
					and workinstancenameid isNull
					and workinstanceexternalid notNull
					and workinstancestatusid = 707
			inner join public.worktemplatetype wtt
				on worktemplatetypeworktemplateuuid = wt.id
					and worktemplatetypesystagid = 1014;
		
		update workinstance
		set workinstancenameid = languagemasteruuid
		from languagemaster
		where workinstanceid = languagemasterrefid
			and workinstancenameid isNull;
		
		-- load the location result instance
		
		INSERT INTO public.workresultinstance(
			workresultinstanceworkinstanceid, 
			workresultinstancecustomerid, 
			workresultinstancevalue, 
			workresultinstancecreateddate, 
			workresultinstancemodifieddate,
			workresultinstancestartdate, 
			workresultinstancecompleteddate, 
			workresultinstanceworkresultid, 
			workresultinstanceexternalid, 
			workresultinstancevaluelanguagetypeid, 
			workresultinstancemodifiedby,
			workresultinstancestatusid,
			workresultinstancetimezone)
		(select 
		 	workinstanceid,
		 	workinstancecustomerid,  
			workinstancesiteid,  
		 	workinstancecreateddate,
		 	workinstancemodifieddate,
		 	workinstancestartdate,
		 	workinstancecompleteddate,
		 	workresultid,
		 	workinstanceexternalid,
		 	languageid,
		 	workinstancemodifiedby, 
			967,   -- this is result closed
			workinstancetimezone
		from workinstance 
			inner join (select uploadbatchid, customerid, languageid, etl_batch
						from entity.runtime_upload_prepped prep
						where  import_batch = etl_batch
						group by uploadbatchid,customerid, languageid, etl_batch)batches
				on row(workinstancerefuuid,workinstancecustomerid) = row(batches.uploadbatchid, batches.customerid)
					and workinstancestatusid = 707
			inner join  workresult
		 		on workresultworktemplateid = workinstanceworktemplateid
		 			and workresultentitytypeid = 852
		 			and workresultisprimary = true			
			left join workresultinstance
				on  workresultinstanceworkresultid = workresultid
					and workresultinstanceworkinstanceid = workinstanceid
		where workresultinstanceid isNull);
		
							
		-- load the worker result instance
		
		INSERT INTO public.workresultinstance(
			workresultinstanceworkinstanceid, 
			workresultinstancecustomerid, 
			workresultinstancevalue, 
			workresultinstancecreateddate, 
			workresultinstancemodifieddate,
			workresultinstancestartdate, 
			workresultinstancecompleteddate, 
			workresultinstanceworkresultid, 
			workresultinstanceexternalid, 
			workresultinstancevaluelanguagetypeid, 
			workresultinstancemodifiedby,
			workresultinstancestatusid,
			workresultinstancetimezone)
		(select 
		 	workinstanceid,
		 	workinstancecustomerid,  
			workinstancemodifiedby,  
		 	workinstancecreateddate,
		 	workinstancemodifieddate,
		 	workinstancestartdate,
		 	workinstancecompleteddate,
		 	workresultid,
		 	workinstanceexternalid,
		 	languageid,
		 	workinstancemodifiedby, 
			967,   -- this is result closed
			workinstancetimezone
		from workinstance 
			inner join (select uploadbatchid, customerid, languageid
						from entity.runtime_upload_prepped prep
						where  import_batch = etl_batch
						group by uploadbatchid,customerid, languageid)batches
				on row(workinstancerefuuid,workinstancecustomerid) = row(batches.uploadbatchid, batches.customerid)
					and workinstancestatusid = 707
			inner join  workresult
		 		on workresultworktemplateid = workinstanceworktemplateid
		 			and workresultentitytypeid = 850
		 			and workresultisprimary = true			
			left join workresultinstance
				on  workresultinstanceworkresultid = workresultid
					and workresultinstanceworkinstanceid = workinstanceid
		where workresultinstanceid isNull);
		
		INSERT INTO public.workresultinstance(
			workresultinstanceworkinstanceid, 
			workresultinstancecustomerid, 
			workresultinstancevalue, 
			workresultinstancecreateddate, 
			workresultinstancemodifieddate,
			workresultinstancestartdate, 
			workresultinstancecompleteddate, 
			workresultinstanceworkresultid, 
			workresultinstanceexternalid, 
			workresultinstancevaluelanguagetypeid, 
			workresultinstancemodifiedby,
			workresultinstancestatusid,
			workresultinstancetimezone)
		(select 
		 	workinstanceid,
		 	workinstancecustomerid,
			null,
		 	workinstancecreateddate,
		 	workinstancemodifieddate,
		 	workinstancestartdate,
		 	workinstancecompleteddate,
		 	workresultid,
		 	workinstanceexternalid,
		 	languageid,
			workinstancemodifiedby,
			966,   -- this is result open
			workinstancetimezone
		from workinstance 
			inner join (select uploadbatchid, customerid, languageid
						from entity.runtime_upload_prepped prep
						where  import_batch = etl_batch
						group by uploadbatchid,customerid, languageid)batches
				on row(workinstancerefuuid,workinstancecustomerid) = row(batches.uploadbatchid, batches.customerid)
					and workinstancestatusid = 707
			inner join  workresult
		 		on workresultworktemplateid = workinstanceworktemplateid
		 			and workresulttypeid = 737	
			left join workresultinstance
				on  workresultinstanceworkresultid = workresultid
					and workresultinstanceworkinstanceid = workinstanceid
		where workresultinstanceid isNull);
		
		update public.workinstance
		set workinstanceoriginatorworkinstanceid = workinstanceid,
			workinstancemodifieddate = clock_timestamp()
		where workinstanceoriginatorworkinstanceid isNull;

		update entity.runtime_upload_prepped
		set batchinstanceuuid = wi.id
		from public.workinstance wi
			inner join worktemplate wt
				on workinstanceworktemplateid = worktemplateid
			inner join public.worktemplatetype wtt
				on worktemplatetypeworktemplateuuid = wt.id
					and worktemplatetypesystagid in (1014)
		where uploadbatchid = workinstanceexternalid and batchinstanceuuid isNull 	and customerid = workinstancecustomerid  and import_batch = etl_batch;
end if;

RAISE NOTICE 'batch instances loaded';

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.create_batch_instances(uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_batch_instances(uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_batch_instances(uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.create_batch_instances(uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.create_downtime_instances(uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.create_downtime_instances(IN etl_batch uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare
	templanguagemasterid bigint;
	parenttypeid bigint;
	locationtypeid bigint;

Begin
-- create new batches for the owner  

-- need to check if we need to update a record (by id??)

-- update the workinstanace
update public.workinstance wi
set workinstancecompleteddate = uploadenddate,
	workinstancemodifieddate = now(),
	workinstancestatusid = case when uploadenddate notNull
								then 710
								else prepwi.workinstancestatusid
							end,
	workinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped  prep
	inner join public.workinstance prepwi
		on customerid = prepwi.workinstancecustomerid
			and uploadrecordid = prepwi.workinstanceexternalid
			and import_batch = etl_batch
	inner join worktemplate wt
		on prepwi.workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (989)
where wi.workinstancecustomerid = prep.customerid
	and prepwi.workinstanceid = wi.workinstanceid;

-- update the ourput and reject counts - do this for each possble workresult

update public.workresultinstance wri_ins
set workresultinstancevalue = uploadunitrejectcount,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (989)			
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultname = 'Reject Count'
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;

update public.workresultinstance wri_ins
set workresultinstancevalue = uploadunitrunoutput,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (989)	
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultname = 'Run Output Count'
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;

update public.workresultinstance wri_ins
set workresultinstancevalue = uploadunitrunoutput,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (989)	
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresulttypeid = 737	
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;


-- ad all missing records

INSERT INTO public.workinstance(
	workinstancecustomerid,
	workinstanceworktemplateid,
	workinstancesiteid,
	workinstancetypeid,
	workinstancestatusid,
	workinstancetargetstartdate,
	workinstancestartdate, 
	workinstancecompleteddate, 	
	workinstanceexternalid, 	
	workinstancetimezone,
	workinstancemodifiedby,
	workinstancerefuuid,
	workinstanceoriginatorworkinstanceid)
select 
	customerid,
	templateid,
	siteid,
	811,
	case
		when uploadenddate isNull
		then 707
		else 710
	End,
	uploadstartdate,
	uploadstartdate,
	uploadenddate,
	uploadrecordid, 
	timezone,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	uploadowneruuid||'-'||uploadrecordid||'-'||uploadlocationuuid||'-'||uploadstartdate,  -- refid = owner+row+location+activity+timestamp?
	(select workinstanceid from workinstance where id = batchinstanceuuid)
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		uploademployeetendreluuid,
		uploadowneruuid,
		uploadrunid,
		uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (989)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid	
	where uploadactivityname = 'Downtime' and workinstanceid isNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate,uploadrunid, timezone, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run;

-- location

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,  
	locationid,  
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
 	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		uploademployeetendreluuid,
		uploadowneruuid,
		uploadrecordid,
		locationid, 
		uploadactivityname, 
		batchinstanceuuid,
		languageid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (989)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Downtime' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, locationid, uploadactivityname,batchinstanceuuid,languageid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresultentitytypeid = 852
 			and workresultisprimary = true			
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

					
-- load the worker result instance

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,  
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
 	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ), 
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,
		uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (989)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Downtime' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresultentitytypeid = 850
 			and workresultisprimary = true			
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- load TAT

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	case when workinstancestatusid = 710
		then EXTRACT(EPOCH FROM (uploadenddate - uploadstartdate))
		else null
	end,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		workinstancestatusid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (989)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Downtime' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,workinstancestatusid,customerid,templateid, siteid, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresulttypeid = 737	
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- rason code

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	uploadreasoncodename,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		uploadreasoncodename,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (989)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Downtime' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid,uploadreasoncodename, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  view_workresult
 		on workresultworktemplateid = templateid
 			and workresultname = 'Reason Code'
			 and languagetranslationtypeid = 20
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- the rest are empty

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	null,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (989)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Downtime' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone,languageid, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

update public.workinstance
set workinstanceoriginatorworkinstanceid = workinstanceid,
	workinstancemodifieddate = clock_timestamp()
where workinstanceoriginatorworkinstanceid isNull;

RAISE NOTICE 'downtime instances loaded';

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.create_downtime_instances(uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_downtime_instances(uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_downtime_instances(uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.create_downtime_instances(uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.create_idle_instances(uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.create_idle_instances(IN etl_batch uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare
	templanguagemasterid bigint;
	parenttypeid bigint;
	locationtypeid bigint;

Begin
-- create new batches for the owner  

-- need to check if we need to update a record (by id??)

-- update the workinstanace
update public.workinstance wi
set workinstancecompleteddate = uploadenddate,
	workinstancemodifieddate = now(),
	workinstancestatusid = case when uploadenddate notNull
								then 710
								else prepwi.workinstancestatusid
							end,
	workinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped  prep
	inner join public.workinstance prepwi
		on customerid = prepwi.workinstancecustomerid
			and uploadrecordid = prepwi.workinstanceexternalid
			and import_batch = etl_batch
	inner join worktemplate wt
		on prepwi.workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (988)
where wi.workinstancecustomerid = prep.customerid
	and prepwi.workinstanceid = wi.workinstanceid;

-- update the ourput and reject counts - do this for each possble workresult

update public.workresultinstance wri_ins
set workresultinstancevalue = uploadunitrejectcount,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (988)			
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultname = 'Reject Count'
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;

update public.workresultinstance wri_ins
set workresultinstancevalue = uploadunitrunoutput,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (988)	
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultname = 'Run Output Count'
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;


update public.workresultinstance wri_ins
set workresultinstancevalue = uploadunitrunoutput,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (988)	
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresulttypeid = 737	
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;


-- ad all missing records

INSERT INTO public.workinstance(
	workinstancecustomerid,
	workinstanceworktemplateid,
	workinstancesiteid,
	workinstancetypeid,
	workinstancestatusid,
	workinstancetargetstartdate,
	workinstancestartdate, 
	workinstancecompleteddate, 	
	workinstanceexternalid, 	
	workinstancetimezone,
	workinstancemodifiedby,
	workinstancerefuuid,
	workinstanceoriginatorworkinstanceid)
select 
	customerid,
	templateid,
	siteid,
	811,
	case
		when uploadenddate isNull
		then 707
		else 710
	End,
	uploadstartdate,
	uploadstartdate,
	uploadenddate,
	uploadrecordid, 
	timezone,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	uploadowneruuid||'-'||uploadrecordid||'-'||uploadlocationuuid||'-'||uploadstartdate,  -- refid = owner+row+location+activity+timestamp?
	(select workinstanceid from workinstance where id = batchinstanceuuid)
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		uploademployeetendreluuid,
		uploadowneruuid,
		uploadrunid,
		uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (988)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid	
	where uploadactivityname = 'Idle Time' and workinstanceid isNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate,uploadrunid, timezone, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run;

-- location

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,  
	locationid,  
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
 	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		uploademployeetendreluuid,
		uploadowneruuid,
		uploadrecordid,
		locationid, 
		uploadactivityname, 
		batchinstanceuuid,
		languageid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (988)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Idle Time' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, locationid, uploadactivityname,batchinstanceuuid,languageid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresultentitytypeid = 852
 			and workresultisprimary = true			
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

					
-- load the worker result instance

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,  
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
 	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ), 
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,
		uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (988)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Idle Time' and workinstanceid notNull and import_batch = etl_batch 
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresultentitytypeid = 850
 			and workresultisprimary = true			
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- load TAT

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	case when workinstancestatusid = 710
		then EXTRACT(EPOCH FROM (uploadenddate - uploadstartdate))
		else null
	end,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		workinstancestatusid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (988)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Idle Time' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,workinstancestatusid,customerid,templateid, siteid, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresulttypeid = 737	
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- rason code

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	uploadreasoncodename,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		uploadreasoncodename,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (988)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Idle Time' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid,uploadreasoncodename, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  view_workresult
 		on workresultworktemplateid = templateid
 			and workresultname = 'Reason Code'
			 and languagetranslationtypeid = 20
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- the rest are empty

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	null,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (988)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Idle Time' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone,languageid, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

update public.workinstance
set workinstanceoriginatorworkinstanceid = workinstanceid,
	workinstancemodifieddate = clock_timestamp()
where workinstanceoriginatorworkinstanceid isNull;

RAISE NOTICE 'idle instances loaded';

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.create_idle_instances(uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_idle_instances(uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_idle_instances(uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.create_idle_instances(uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.create_pulse_instances(); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.create_pulse_instances()
 LANGUAGE plpgsql
AS $procedure$
Declare
	templanguagemasterid bigint;
	parenttypeid bigint;
	locationtypeid bigint;

Begin

-- eventually this loads pulse records.  For now it removes 'Pulse' activities.

delete from entity.runtime_upload_prepped
where uploadactivityname = 'Pulse';

/*
INSERT INTO public.workinstance(
	workinstancecustomerid,
	workinstanceworktemplateid,
	workinstancesiteid,
	workinstancetypeid,
	workinstancestatusid,
	workinstancetargetstartdate,
	workinstancestartdate, 
	workinstancecompleteddate, 	
	workinstanceexternalid, 	
	workinstancetimezone,
	workinstancemodifiedby,
	workinstancerefuuid,
	workinstanceoriginatorworkinstanceid)
select 
	customerid,
	templateid,
	siteid,
	811,
	case
		when uploadenddate isNull
		then 707
		else 710
	End,
	uploadstartdate,
	uploadstartdate,
	uploadenddate,
	uploadrecordid, 
	timezone,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	uploadowneruuid||'-'||uploadrecordid||'-'||uploadlocationuuid||'-'||uploadstartdate,  -- refid = owner+row+location+activity+timestamp?
	(select workinstanceid from workinstance where id = batchinstanceuuid)
from entity.runtime_upload_prepped
where uploadactivityname = 'Run';

-- load the location result instance

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	workinstancecustomerid,  
	prep.locationid,  
 	workinstancecreateddate,
 	workinstancemodifieddate,
 	workinstancestartdate,
 	workinstancecompleteddate,
 	workresultid,
 	workinstanceexternalid,
 	languageid,
 	workinstancemodifiedby, 
	967,   -- this is result closed
	workinstancetimezone
from entity.runtime_upload_prepped prep
	join workinstance wi
		on prep.customerid = workinstancecustomerid
			and workinstancerefuuid = (prep.uploadowneruuid||'-'||prep.uploadrecordid||'-'||prep.uploadlocationuuid||'-'||prep.uploadstartdate)
			and workinstancestatusid in (707,710)
	inner join  workresult
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultentitytypeid = 852
 			and workresultisprimary = true			
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

					
-- load the worker result instance

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	workinstancecustomerid,  
	workinstancemodifiedby,  
 	workinstancecreateddate,
 	workinstancemodifieddate,
 	workinstancestartdate,
 	workinstancecompleteddate,
 	workresultid,
 	workinstanceexternalid,
 	languageid,
 	workinstancemodifiedby, 
	967,   -- this is result closed
	workinstancetimezone
from entity.runtime_upload_prepped prep
	join workinstance wi
		on prep.customerid = workinstancecustomerid
			and workinstancerefuuid = (prep.uploadowneruuid||'-'||prep.uploadrecordid||'-'||prep.uploadlocationuuid||'-'||prep.uploadstartdate)
			and workinstancestatusid in (707,710)
	inner join  workresult
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultentitytypeid = 850
 			and workresultisprimary = true			
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- load TAT

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	workinstancecustomerid,
	case when workinstancestatusid = 710
		then EXTRACT(EPOCH FROM (workinstancecompleteddate - workinstancestartdate))
		else null
	end,
 	workinstancecreateddate,
 	workinstancemodifieddate,
 	workinstancestartdate,
 	workinstancecompleteddate,
 	workresultid,
 	workinstanceexternalid,
 	languageid,
	workinstancemodifiedby,
	967,   -- this is result closed
	workinstancetimezone
from entity.runtime_upload_prepped prep
	join workinstance wi
		on prep.customerid = workinstancecustomerid
			and workinstancerefuuid = (prep.uploadowneruuid||'-'||prep.uploadrecordid||'-'||prep.uploadlocationuuid||'-'||prep.uploadstartdate)
			and workinstancestatusid in (707,710)
	inner join  workresult
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresulttypeid = 737	
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- reject count -- need to match with name so use the view and english

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	workinstancecustomerid,
	uploadunitrejectcount,
 	workinstancecreateddate,
 	workinstancemodifieddate,
 	workinstancestartdate,
 	workinstancecompleteddate,
 	workresultid,
 	workinstanceexternalid,
 	languageid,
	workinstancemodifiedby,
	967,   -- this is result closed
	workinstancetimezone
from entity.runtime_upload_prepped prep
	join workinstance wi
		on prep.customerid = workinstancecustomerid
			and workinstancerefuuid = (prep.uploadowneruuid||'-'||prep.uploadrecordid||'-'||prep.uploadlocationuuid||'-'||prep.uploadstartdate)
			and workinstancestatusid in (707,710)
	inner join  view_workresult
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultname = 'Reject Count'
			 and languagetranslationtypeid = 20
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- output

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	workinstancecustomerid,
	uploadunitrunoutput,
 	workinstancecreateddate,
 	workinstancemodifieddate,
 	workinstancestartdate,
 	workinstancecompleteddate,
 	workresultid,
 	workinstanceexternalid,
 	languageid,
	workinstancemodifiedby,
	967,   -- this is result closed
	workinstancetimezone
from entity.runtime_upload_prepped prep
	join workinstance wi
		on prep.customerid = workinstancecustomerid
			and workinstancerefuuid = (prep.uploadowneruuid||'-'||prep.uploadrecordid||'-'||prep.uploadlocationuuid||'-'||prep.uploadstartdate)
			and workinstancestatusid in (707,710)
	inner join  view_workresult
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultname = 'Run Output'
			 and languagetranslationtypeid = 20
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- the rest are empty

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	workinstancecustomerid,
	null,
 	workinstancecreateddate,
 	workinstancemodifieddate,
 	workinstancestartdate,
 	workinstancecompleteddate,
 	workresultid,
 	workinstanceexternalid,
 	languageid,
	workinstancemodifiedby,
	967,   -- this is result closed
	workinstancetimezone
from entity.runtime_upload_prepped prep
	join workinstance wi
		on prep.customerid = workinstancecustomerid
			and workinstancerefuuid = (prep.uploadowneruuid||'-'||prep.uploadrecordid||'-'||prep.uploadlocationuuid||'-'||prep.uploadstartdate)
			and workinstancestatusid in (707,710)
	inner join  workresult
 		on workresultworktemplateid = workinstanceworktemplateid
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

update public.workinstance
set workinstanceoriginatorworkinstanceid = workinstanceid,
	workinstancemodifieddate = clock_timestamp()
where workinstanceoriginatorworkinstanceid isNull;
*/

RAISE NOTICE 'pulse instances discarded';

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.create_pulse_instances() FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_pulse_instances() TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_pulse_instances() TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.create_pulse_instances() TO graphql;

-- Type: PROCEDURE ; Name: entity.create_run_instances(uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.create_run_instances(IN etl_batch uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare
	templanguagemasterid bigint;
	parenttypeid bigint;
	locationtypeid bigint;

Begin

-- check if run exists.  Update run if it does.  

-- update the workinstanace
update public.workinstance wi
set workinstancecompleteddate = case when uploadenddate notNull
	 									then (uploadenddate + interval '1 millisecond')
										 else uploadenddate
									end,
	workinstancemodifieddate = now(),
	workinstancestatusid = case when uploadenddate notNull
								then 710
								else prepwi.workinstancestatusid
							end,
	workinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped  prep
	inner join public.workinstance prepwi
		on customerid = prepwi.workinstancecustomerid
			and uploadrecordid = prepwi.workinstanceexternalid
			and import_batch = etl_batch
	inner join worktemplate wt
		on prepwi.workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (987)
where wi.workinstancecustomerid = prep.customerid
	and prepwi.workinstanceid = wi.workinstanceid;

-- update the ourput and reject counts - do this for each possble workresult

update public.workresultinstance wri_ins
set workresultinstancevalue = uploadunitrejectcount,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (987)			
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultname = 'Reject Count'
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;

update public.workresultinstance wri_ins
set workresultinstancevalue = uploadunitrunoutput,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			 and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (987)	
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresultname = 'Run Output Count'
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;
			 
update public.workresultinstance wri_ins
set workresultinstancevalue = 	case when workinstancestatusid = 710
									then EXTRACT(EPOCH FROM (uploadenddate - uploadstartdate))
									else null
								end,
	workresultinstancecompleteddate = uploadenddate,
	workresultinstancemodifieddate = now(),
	workresultinstancemodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid)
from entity.runtime_upload_prepped prep
	inner join public.workinstance wi
		on workinstanceexternalid = uploadrecordid
			and workinstancecustomerid = prep.customerid
			 and import_batch = etl_batch
	inner join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	inner join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (987)	
	inner join public.workresultinstance wri
		on wri.workresultinstanceworkinstanceid = workinstanceid
	inner join  view_workresult wr
 		on workresultworktemplateid = workinstanceworktemplateid
 			and workresulttypeid = 737	
			and languagetranslationtypeid = 20
where wri_ins.workresultinstanceid = wri.workresultinstanceid;

-- if it does not exist create it  
-- handle duplicates.

INSERT INTO public.workinstance(
	workinstancecustomerid,
	workinstanceworktemplateid,
	workinstancesiteid,
	workinstancetypeid,
	workinstancestatusid,
	workinstancetargetstartdate,
	workinstancestartdate, 
	workinstancecompleteddate, 	
	workinstanceexternalid, 	
	workinstancetimezone,
	workinstancemodifiedby,
	workinstancerefuuid,
	workinstanceoriginatorworkinstanceid,
	workinstancepreviousid)
select 
	customerid,
	templateid,
	siteid,
	811,
	case
		when uploadenddate isNull
		then 707
		else 710
	End,
	uploadstartdate,
	(uploadstartdate - interval '1 millisecond'),
	case when uploadenddate notNull
		then (uploadenddate + interval '1 millisecond')
		 else uploadenddate
	end,
	uploadrecordid, 
	timezone,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	uploadowneruuid||'-'||uploadrecordid||'-'||uploadlocationuuid||'-'||uploadstartdate,  -- refid = owner+row+location+activity+timestamp?
	(select workinstanceid from workinstance where id = batchinstanceuuid),
	(select workinstanceid from workinstance where id = batchinstanceuuid)	
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (987)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid	
	where uploadactivityname = 'Run' and workinstanceid isNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run;

-- load the location result instance

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,  
	locationid,  
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
 	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		uploademployeetendreluuid,
		uploadowneruuid,
		uploadrecordid,
		locationid, 
		uploadactivityname, 
		batchinstanceuuid,
		languageid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (987)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Run' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, locationid, uploadactivityname,batchinstanceuuid,languageid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresultentitytypeid = 852
 			and workresultisprimary = true			
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

					
-- load the worker result instance

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,  
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
 	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ), 
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,
		uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (987)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Run' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresultentitytypeid = 850
 			and workresultisprimary = true			
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- load TAT

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	case when workinstancestatusid = 710
		then EXTRACT(EPOCH FROM (uploadenddate - uploadstartdate))
		else null
	end,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		workinstancestatusid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (987)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Run' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,workinstancestatusid,customerid,templateid, siteid, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
 			and workresulttypeid = 737	
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- reject count -- need to match with name so use the view and english

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	uploadunitrejectcount,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadunitrejectcount) as uploadunitrejectcount,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (987)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Run' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  view_workresult
 		on workresultworktemplateid = templateid
 			and workresultname = 'Reject Count'
			 and languagetranslationtypeid = 20
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- output

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	uploadunitrunoutput,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadunitrunoutput) as uploadunitrunoutput,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (987)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Run' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone, languageid,uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  view_workresult
 		on workresultworktemplateid = templateid
 			and workresultname = 'Run Output'
			 and languagetranslationtypeid = 20
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

-- the rest are empty

INSERT INTO public.workresultinstance(
	workresultinstanceworkinstanceid, 
	workresultinstancecustomerid, 
	workresultinstancevalue, 
	workresultinstancecreateddate, 
	workresultinstancemodifieddate,
	workresultinstancestartdate, 
	workresultinstancecompleteddate, 
	workresultinstanceworkresultid, 
	workresultinstanceexternalid, 
	workresultinstancevaluelanguagetypeid, 
	workresultinstancemodifiedby,
	workresultinstancestatusid,
	workresultinstancetimezone)
(select 
 	workinstanceid,
 	customerid,
	null,
 	now(),
 	now(),
 	uploadstartdate,
 	uploadenddate,
 	workresultid,
 	uploadrecordid,
 	languageid,
	(select workerinstanceid from workerinstance where workerinstanceuuid = uploademployeetendreluuid ),
	967,   -- this is result closed
	timezone
from (select workinstanceid,
		customerid,
		templateid, 
		siteid, 
		uploadstartdate, 
		timezone, 
		languageid,
		uploademployeetendreluuid,
		uploadowneruuid,uploadrecordid,
		uploadlocationuuid, 
		uploadactivityname, 
		batchinstanceuuid,
		max(uploadenddate) as uploadenddate
	from entity.runtime_upload_prepped prep
		left join (select * from public.workinstance wi
						inner join worktemplate wt
							on workinstanceworktemplateid = worktemplateid
						inner join public.worktemplatetype wtt
							on worktemplatetypeworktemplateuuid = wt.id
								and worktemplatetypesystagid in (987)) run		
		on	workinstancecustomerid = prep.customerid
			and workinstanceexternalid = uploadrecordid
	where uploadactivityname = 'Run' and workinstanceid notNull and import_batch = etl_batch
	group by workinstanceid,customerid,templateid, siteid, uploadstartdate, timezone,languageid, uploademployeetendreluuid,uploadowneruuid,uploadrecordid, uploadlocationuuid, uploadactivityname,batchinstanceuuid) as run
	inner join  workresult
 		on workresultworktemplateid = templateid
	left join workresultinstance
		on  workresultinstanceworkresultid = workresultid
			and workresultinstanceworkinstanceid = workinstanceid
where workresultinstanceid isNull);

update public.workinstance
set workinstanceoriginatorworkinstanceid = workinstanceid,
	workinstancemodifieddate = clock_timestamp()
where workinstanceoriginatorworkinstanceid isNull;

update entity.runtime_upload_prepped
set workinstanceuuid = wi.id
from workinstance wi
	left join worktemplate wt
		on workinstanceworktemplateid = worktemplateid
	left join public.worktemplatetype wtt
		on worktemplatetypeworktemplateuuid = wt.id
			and worktemplatetypesystagid in (987)
where workinstanceexternalid = uploadrecordid
	and workinstancecustomerid = customerid
	and workinstanceuuid isNull
	 and import_batch = etl_batch;

RAISE NOTICE 'run instances loaded';

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.create_run_instances(uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_run_instances(uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_run_instances(uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.create_run_instances(uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.create_runtime_instances(); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.create_runtime_instances()
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	temprow RECORD;
	templocationentityuuid uuid;
	tempcode RECORD;
	tempsystaguuid text;
	tempsystagid bigint;
	tempreasoncodeuuid uuid;
	etl_batch uuid;

Begin

-- call entity.create_runtime_instances()

etl_batch = (select * from gen_random_uuid());

INSERT INTO entity.runtime_upload_prepped(
	uploadowneruuid, 
	uploadbatchid, 
	uploadrecordid, 
	uploadpreviousrecordid, 
	uploadparentuuid, 
	uploadparentname, 
	uploadlocationuuid, 
	uploadlocationname, 
	uploadstartdate, 
	uploadenddate, 
	uploadduration, 
	uploademployee, 
	uploademployeeid, 
	uploademployeetendreluuid, 
	uploadactivityuuid, 
	uploadactivityname, 
	uploadreasoncodeuuid, 
	uploadreasoncodename, 
	uploadunitrunoutput, 
	uploadunitrejectcount, 
	uploadresultuuid, 
	uploadresultname, 
	uploadunittypename, 
	uploadunittypeuuid, 
	uploadunitvalue, 
	uploadcreateddate,
	uploadrunid,
	originaluuid,
	import_batch)
select
	st.uploadowneruuid, 
	st.uploadbatchid, 
	st.uploadrecordid, 
	st.uploadpreviousrecordid, 
	st.uploadparentuuid, 
	st.uploadparentname, 
	st.uploadlocationuuid, 
	st.uploadlocationname, 
	st.uploadstartdate, 
	st.uploadenddate, 
	st.uploadduration, 
	st.uploademployee, 
	st.uploademployeeid, 
	st.uploademployeetendreluuid, 
	st.uploadactivityuuid, 
	st.uploadactivityname, 
	st.uploadreasoncodeuuid, 
	st.uploadreasoncodename, 
	st.uploadunitrunoutput, 
	st.uploadunitrejectcount, 
	st.uploadresultuuid, 
	st.uploadresultname, 
	st.uploadunittypename, 
	st.uploadunittypeuuid, 
	st.uploadunitvalue, 
	st.uploadcreateddate,
	st.uploadrunid,
	st.uploaduuid,
	etl_batch
from entity.runtime_upload_staging st
	left join entity.runtime_upload_prepped pp
		on st.uploaduuid = pp.originaluuid
where pp.uploaduuid isNull
order by uploadstartdate
;

delete from entity.runtime_upload_staging
where uploaduuid in (select originaluuid 
						from entity.runtime_upload_prepped
						where import_batch = etl_batch);

-- get customer needed for workinstances

update  entity.runtime_upload_prepped
set customerid = (select customerid 
					from entity.crud_customer_read_min(uploadowneruuid,null, null, false,null,null,null, null))
where customerid isNull and import_batch = etl_batch;

-- process the location
update entity.runtime_upload_prepped
	set uploadlocationname = location.locationname,
		locationid = location.locationid,
		timezone = locationtimezone
from ( select locationentityuuid,locationname, locationid,locationtimezone,locationcustomerid 
		from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) location
where locationentityuuid = uploadlocationuuid
	and locationcustomerid = customerid
	and uploadlocationname isNull
	and import_batch = etl_batch;

update entity.runtime_upload_prepped
	set uploadlocationuuid = locationentityuuid,
		locationid = location.locationid,
		timezone = locationtimezone
from ( select locationentityuuid,locationname , locationid, locationcustomerid, locationtimezone 
	from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) location
	where uploadlocationname = location.locationname
		and locationcustomerid = customerid
		and uploadlocationuuid isNull
		and import_batch = etl_batch;
		
-- process parents

update entity.runtime_upload_prepped
	set uploadparentname = location.locationname,
		siteid = location.locationid,
		timezone = location.locationtimezone
from ( select locationentityuuid,locationname , locationid , locationtimezone, locationcustomerid 
		from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) location
where locationentityuuid = uploadparentuuid
	and uploadparentname isNull
	and import_batch = etl_batch;

update entity.runtime_upload_prepped
	set uploadlocationuuid = locationentityuuid,
		siteid = location.locationid,
		timezone = location.locationtimezone
from ( select locationentityuuid,locationname , locationid , locationtimezone, locationcustomerid 
	from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) location
	where uploadparentname = location.locationname
		and locationcustomerid = customerid
		and uploadlocationuuid isNull
		and import_batch = etl_batch;

-- Need to harden this.  Skip if there are 2 sites?  grab the first site?  Right now this will be random.

update entity.runtime_upload_prepped
	set uploadparentname = location.locationname,
		uploadparentuuid = location.locationentityuuid,
		siteid = location.locationid,
		timezone = locationtimezone
from ( select locationentityuuid,locationname, locationid,locationtimezone,locationcustomerid, locationparententityuuid 
		from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) location
where locationentityuuid = locationparententityuuid
	and locationcustomerid = customerid
	and uploadparentuuid isNull
	and import_batch = etl_batch;

-- create missing records

BEGIN FOR temprow IN
		SELECT uploadowneruuid, uploadparentuuid,uploadlocationname, timezone
		from entity.runtime_upload_prepped 
		where uploadlocationuuid isNull and import_batch = etl_batch
		group by uploadowneruuid, uploadparentuuid,uploadlocationname, timezone
	LOOP
		call entity.crud_location_create(
			temprow.uploadowneruuid, --create_locationownerentityuuid
			temprow.uploadparentuuid,	--create_locationparententityuuid   -- Null if self
			null,   --create_locationcornerstoneentityuuid
			null, --create_locationcornerstoneorder 
			null, -- create_locationtaguuid,
			'Runtime Location',  -- create_locationtag   -- need to lookup the runtime tag
			temprow.uploadlocationname,  -- create_locationname
			temprow.uploadlocationname,  -- locationdisplayname 
			null, -- locationscanid	
			temprow.timezone,  -- locationtimezone   -- Defaults to UTC
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- languagetypeuuid  
			null, -- locationexternalid
			null, -- locationexternalsystemuuid
			null, -- locationlatitude 
			null, -- locationlongitude
			null, -- locationradius
			null,
			null,
			templocationentityuuid, -- OUT create_locationentityuuid
			null);
	  	--update entity.runtime_upload_prepped
		--	set uploadlocationuuid = templocationentityuuid    
		--where uploadlocationname = temprow.uploadlocationname and import_batch = etl_batch;
	END LOOP;
END;

-- update location id
update entity.runtime_upload_prepped prep
	set locationid = location.locationid,
		uploadlocationuuid = locationentityuuid,
	siteid = location.locationid,
	timezone = locationtimezone
from ( select locationentityuuid,locationname , locationid, locationcustomerid, locationtimezone 
	from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) location
	where uploadlocationname = location.locationname
		and locationcustomerid = customerid
		and prep.locationid isNull
		and import_batch = etl_batch;


update entity.runtime_upload_prepped
	set uploadstartdate = (uploadenddate - make_interval(secs => uploadduration))
where uploadstartdate isNull and import_batch = etl_batch;

update entity.runtime_upload_prepped
	set uploadenddate = (uploadstartdate + make_interval(secs => uploadduration))
where uploadenddate isNull and import_batch = etl_batch;

-- find/create the employee

update entity.runtime_upload_prepped
	set uploademployeetendreluuid = workerinstanceuuid
from workerinstance 
where workerinstanceexternalid = uploademployeeid
	and workerinstancecustomerid = customerid
	and uploademployeetendreluuid isNull
	and import_batch = etl_batch;

update entity.runtime_upload_prepped
	set uploademployeetendreluuid = workerinstanceuuid
from worker
	inner join workerinstance
		on workerinstanceworkerid = workerid
where workerfullname = uploademployee
	and workerinstancecustomerid = customerid
	and uploademployeetendreluuid isNull and import_batch = etl_batch;

-- create the employee
INSERT INTO public.worker(
	workerlastname, 
	workerfirstname, 
	workeremail, 
	workerstartdate, 
	workerfullname, 
	workerlanguageid, 
	workerusername, 
	workerpassword,
	workerexternalid,
	workermodifiedby)
select 
	'Uploaded',
	uploademployeeid,  
	uploademployeeid||'@'||'Uploaded',
	now(),
	uploademployee, 
	20,
	uploademployeeid||'@'||uploadowneruuid,
	uploademployeeid||'@'||uploadowneruuid,
	uploademployeeid,
	null
from entity.runtime_upload_prepped
	left join worker
		on uploademployeeid||'@'||uploadowneruuid = workerusername
where workerid isNull and uploademployee isNull and uploademployeeid notNull and uploademployeetendreluuid isNull and import_batch = etl_batch
group by uploademployeeid,  
	uploademployeeid||'@'||'Uploaded',
	uploademployee, 
	uploademployeeid,
	uploademployeeid||'@'||uploadowneruuid,
	uploademployeeid;

--- future -- handle name being uploaded

INSERT INTO public.workerinstance(
	workerinstanceworkerid, 
	workerinstancecustomerid, 
	workerinstancestartdate, 
	workerinstancelanguageid, 
	workerinstanceexternalid,
	workerinstancescanid, 
	workerinstanceuserroleid,
	workerinstancemodifiedby)
select 
	workerid,
	customerid,
	now(),
	20,
	workerexternalid,
	uploademployeeid,  
	773,  -- worker role
	null
from worker w
	inner join entity.runtime_upload_prepped p
		on w.workerusername = p.uploademployeeid||'@'||p.uploadowneruuid
			and import_batch = etl_batch
	left join workerinstance
		on workerinstanceworkerid = workerid  
			and workerinstancecustomerid = customerid
where workerinstanceid isnull
group by workerid,customerid,workerexternalid,uploademployeeid;

update entity.runtime_upload_prepped
	set uploademployeetendreluuid = workerinstanceuuid
from worker
	inner join workerinstance 
		on workerinstanceworkerid = workerid
where uploademployeeid||'@'||uploadowneruuid = workerusername
	and workerinstancecustomerid = customerid
	and uploademployeetendreluuid isNull
	and import_batch = etl_batch;

-- find create the activities

update entity.runtime_upload_prepped
	set uploadactivityuuid = wt.id,
		templateid = wt.worktemplateid
from view_worktemplate wt
where wt.worktemplatename = uploadactivityname
	and wt.worktemplatecustomerid = customerid
	and wt.languagetranslationtypeid = 20
	and uploadactivityuuid isNull
	and import_batch = etl_batch;

-- find/create the reason code 

update entity.runtime_upload_prepped
	set uploadreasoncodeuuid = entityinstanceuuid
from entity.entityinstance
where entityinstanceownerentityuuid = uploadowneruuid
	and entityinstancetype = uploadreasoncodename
	and entityinstanceentitytemplatename = 'Customer Tag'
	and entityinstanceparententityuuid = 'f875b28c-ccc9-4c69-b5b4-9f10ad89d23b'
	and uploadreasoncodeuuid isNull
	and import_batch = etl_batch;

-- if the reason code does not exist, create it

BEGIN FOR tempcode IN
		SELECT uploadowneruuid, uploadreasoncodename 
		from entity.runtime_upload_prepped 
		where uploadreasoncodeuuid isNull 
			and uploadreasoncodename notNull 
			and import_batch = etl_batch
		group by uploadowneruuid, uploadreasoncodename 
	LOOP
		call entity.crud_custag_create(
			tempcode.uploadowneruuid, --create_systagownerentityuuid
			'f875b28c-ccc9-4c69-b5b4-9f10ad89d23b' , --create_systagparententityuuid
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			tempcode.uploadreasoncodename,  -- create_systag
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null, 
			null, 
			tempsystagid, -- OUT create_systagid
			tempsystaguuid, -- OUT create_systaguuid text,
			tempreasoncodeuuid, -- OUT create_systagentityuuid uuid
			null);
	  	update entity.runtime_upload_prepped
			set uploadreasoncodeuuid = tempreasoncodeuuid    
		where uploadreasoncodename = tempcode.uploadreasoncodename and import_batch = etl_batch;
	END LOOP;
END;

-- add the constraint for the reason code

INSERT INTO public.worktemplateconstraint(
	worktemplateconstraintcreateddate, 
	worktemplateconstraintmodifieddate, 
	worktemplateconstraintmodifiedby, 
	worktemplateconstraintrefid, 
	worktemplateconstraintrefuuid, 
	worktemplateconstraintconstrainedtypeid, 
	worktemplateconstraintconstraintid, 
	worktemplateconstrainttemplateid, 
	worktemplateconstraintresultid, 
	worktemplateconstraintcustomerid, 
	worktemplateconstraintcustomeruuid)
select 
	now(),
	now(),
	337,
	null,
	null,
	'systag_4bbc3e18-de10-4f93-aabb-b1d051a2923d',
	custaguuid,
	wt.id,
	wr.id,
	wt.worktemplatecustomerid,
	(select customeruuid from public.customer where customerid = worktemplatecustomerid)
from worktemplate wt
	inner join (select templateid, uploadreasoncodeuuid, uploadreasoncodename
				from entity.runtime_upload_prepped prep
				where uploadreasoncodename notNull and import_batch = etl_batch
				group by templateid, uploadreasoncodeuuid, uploadreasoncodename ) batch
		on templateid = worktemplateid
	inner join view_workresult wr
		on  workresultworktemplateid = worktemplateid
			and languagetranslationtypeid = 20
			and workresultname = 'Reason Code'
	inner join public.custag
		on custagcustomerid = worktemplatecustomerid
			and custagid = (select entityinstanceoriginalid from entity.entityinstance where entityinstanceuuid = batch.uploadreasoncodeuuid::uuid)
	left join public.worktemplateconstraint
		on worktemplateconstrainttemplateid = wt.id
			and worktemplateconstraintresultid = wr.id
			and custagsystaguuid = worktemplateconstraintconstrainedtypeid
			and custaguuid = worktemplateconstraintconstraintid
			and custagcustomerid = worktemplateconstraintcustomerid
where worktemplateconstraintid isNull;

-- need result logic to create and update random results.  Come back to this.  

-- insert instances

call entity.create_batch_instances(etl_batch);
call entity.create_run_instances(etl_batch);
call entity.create_pulse_instances(); -- at this point this does nothing.  
call entity.create_downtime_instances(etl_batch);
call entity.create_idle_instances(etl_batch);

-- find the workinstanceid

update entity.runtime_upload_prepped
set workinstanceuuid = id
from workinstance
where workinstancerefuuid = (uploadowneruuid||'-'||uploadrecordid||'-'||uploadlocationuuid||'-'||uploadstartdate)
	and workinstancecustomerid = customerid
	and workinstanceuuid isNull
	and import_batch = etl_batch;

-- tie records to their run 

update workinstance
set workinstancepreviousid = run_id
from (select prep.workinstanceuuid,runs.workinstanceid as run_id, customerid
		from entity.runtime_upload_prepped prep
			inner join ( select *, 
								case when workinstancecompleteddate isNull
									then (now() + interval '5 minutes')
									else workinstancecompleteddate
								end as calcenddate
						from public.workinstance wi
							inner join worktemplate wt
								on workinstanceworktemplateid = worktemplateid
									and workinstancecustomerid in (select distinct customerid from entity.runtime_upload_prepped where import_batch = etl_batch)
									and workinstancestartdate <= (select max(uploadstartdate) from entity.runtime_upload_prepped where import_batch = etl_batch)
									and workinstancestartdate > (select max(uploadstartdate) from entity.runtime_upload_prepped where import_batch = etl_batch) - interval '30 days'
							inner join public.worktemplatetype wtt
								on worktemplatetypeworktemplateuuid = wt.id
									and worktemplatetypesystagid in  (987)
							inner join  workresult
								on workresultworktemplateid = workinstanceworktemplateid
									and workresultentitytypeid = 852
									and workresultisprimary = true	
							inner join workresultinstance
								on workresultinstanceworkresultid = workresultid
									and workresultinstanceworkinstanceid = workinstanceid) runs
				on customerid = workinstancecustomerid
					and locationid::text = workresultinstancevalue
					and uploadstartdate >  workinstancestartdate
					and uploadenddate < calcenddate
					and templateid in (select worktemplateid
										from worktemplate
											inner join public.worktemplatetype 
												on worktemplatetypeworktemplateuuid = id
													and worktemplatetypesystagid in  (988, 989)
													and worktemplatecustomerid = customerid)
			where import_batch = etl_batch) p2
where id = p2.workinstanceuuid
	and workinstancecustomerid = customerid;

delete from entity.runtime_upload_prepped where import_batch = etl_batch;

END; 

$procedure$;


REVOKE ALL ON PROCEDURE entity.create_runtime_instances() FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_runtime_instances() TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.create_runtime_instances() TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.create_runtime_instances() TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_admin_create(text,text,text,text,text,uuid,uuid,uuid[],bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_admin_create(INOUT create_adminfirstname text, INOUT create_adminlastname text, IN create_adminemailaddress text, IN create_adminphonenumber text, IN create_adminidentityid text, IN create_adminidentitysystemuuid uuid, OUT create_adminid bigint, OUT create_adminuuid text, IN create_customerentityuuid uuid, IN create_languagetypeuuids uuid[], IN create_modifiedby bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare

-- Customer temp values
    tempcustomerid                 bigint;
	tempcustomeruuid				text;
	tempcustomerentityuuid			uuid;
    tempbillingsystemid            bigint;
-- Worker Temp Values
    tempidentitysystemid           text;
    tempworkeridentitysystemid     bigint;
    tempusername                   text;
    tempworkeruuid                 text;
-- General temp values
    templanguagemasterid           bigint;
	templanguagemasteruuid 			text;
    templanguagetypeuuid           text;
    templanguagetypeid           bigint;
	englishuuid uuid;
	tempcustomerdeleted boolean;
	tempcustomerdraft boolean;
	tempworkeridentitysystemuuid text;

Begin

englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';

-- setup language
	if create_languagetypeuuids isNull
		then templanguagetypeid = 20;
		Else select systagid, systaguuid
				into templanguagetypeid, templanguagetypeuuid
				from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
				where systagentityuuid = create_languagetypeuuids[1]	
			; 
	end if;

    templanguagetypeuuid = (select systaguuid
                            from systag
                            where systagid = templanguagetypeid);

-- setup customer info
if create_customerentityuuid isNull
	then return;
	else tempcustomerentityuuid = create_customerentityuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,tempcustomerentityuuid,null,false,null,null,null, null);

-- probably return an error if the entity is not set to a customer.  Need to sort this out.  
if tempcustomerid isNull
	then return;
end if;

    -- Add dummy values for admin if necessary

    if create_adminfirstname isNull
    then
        create_adminfirstname = 'Unknown';
    End if;

    if create_adminlastname isNull
    then
        create_adminlastname = 'Unknown';
    End if;

    if create_adminemailaddress isNull
    then
        tempusername = create_adminphonenumber;
        create_adminemailaddress = 'Unknown';
    Else
        tempusername = create_adminemailaddress;
    End if;

-- insert the worker

	select systagid, systaguuid
	into tempworkeridentitysystemid, tempworkeridentitysystemuuid
	from entity.crud_systag_read_min(null,null,null, null, true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as lang
	where systagentityuuid = create_adminidentitysystemuuid;	
									
    tempworkeruuid = (select workeruuid
                      from worker
                      where workeridentityid = create_adminidentityid
                        and workeridentitysystemuuid = tempworkeridentitysystemuuid);

    if tempworkeruuid isNull
    then
        INSERT INTO public.worker(workerlastname,
                                  workerfirstname,
                                  workeremail,
                                  workerstartdate,
                                  workerfullname,
                                  workerlanguageid,
                                  workerusername, -- this is email or phone number
                                  workeridentityid,
                                  workeridentitysystemid,
                                  workeridentitysystemuuid,
                                  workermodifiedby)
        values (create_adminlastname,
                create_adminfirstname,
                create_adminemailaddress,
                clock_timestamp(),
                create_adminfirstname || ' ' || create_adminlastname,
                templanguagetypeid,
                tempusername,
                create_adminidentityid,
                tempworkeridentitysystemid,
                tempworkeridentitysystemuuid,
                create_modifiedby)
        Returning workeruuid into tempworkeruuid;
    end if;

-- insert the worker instance

    INSERT INTO public.workerinstance(workerinstanceworkerid,
                                      workerinstanceworkeruuid,
                                      workerinstancecustomerid,
                                      workerinstancecustomeruuid,
                                      workerinstancestartdate,
                                      workerinstancelanguageid,
                                      workerinstancelanguageuuid,
                                      workerinstancescanid,
                                      workerinstanceuserroleid,
                                      workerinstanceuserroleuuid,
                                      workerinstancemodifiedby)
    select workerid,
           workeruuid,
           tempcustomerid,
           tempcustomeruuid,
           clock_timestamp(),
           templanguagetypeid,
           templanguagetypeuuid,
           workerusername,
           systagid,
           systaguuid,
           create_modifiedby
    from worker
             inner join systag
                        on systaguuid = '1d8c3097-23f5-4cac-a4c5-ad0a75a181e4'
    where workeruuid = tempworkeruuid
    returning workerinstanceuuid,workerinstanceid  into create_adminuuid,create_adminid;

    RAISE NOTICE 'inserted worker';

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_admin_create(text,text,text,text,text,uuid,uuid,uuid[],bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_admin_create(text,text,text,text,text,uuid,uuid,uuid[],bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_admin_create(text,text,text,text,text,uuid,uuid,uuid[],bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_admin_create(text,text,text,text,text,uuid,uuid,uuid[],bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_custag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_custag_create(IN create_custagownerentityuuid uuid, IN create_custagparententityuuid uuid, IN create_custagcornerstoneentityuuid uuid, IN create_custagcornerstoneorder integer, IN create_custag text, IN create_languagetypeuuid uuid, IN create_custagexternalid text, IN create_custagexternalsystemuuid uuid, IN create_custagdeleted boolean, IN create_custagdraft boolean, OUT create_custagid bigint, OUT create_custaguuid text, OUT create_custagentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
 	templanguagemasterid bigint;
	templanguagemasteruuid text;
	tempdisplaylanguagemasterid bigint;
	tempdisplaylanguagemasteruuid text;
	tempcustomerid bigint;
	tempcustomeruuid text;
	tempcustagentityuuid uuid;
	tempcustagid bigint;
	tempcustaguuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templanguagetypeentityuuid uuid;
	tempcustagcornerstoneorder integer;  -- cornerstone as well?
	tempcustagparententityuuid uuid;
	tempcustagownerentityuuid uuid;	
	tempcustagdeleted boolean;
	tempcustagdraft boolean;

Begin

/*
-- Customer for testing -- '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- use this to find fields to work with
	select * 
	from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
	where custagownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- tests 
	-- If custag isNull then it should do nothing
		call entity.crud_custag_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_custagownerentityuuid
			'a4cec370-72ed-4717-b1c7-1fcd01c866b2', --create_custagparententityuuid
			null,   --create_custagcornerstoneentityuuid
			null, --create_custagcornerstoneorder 
			null,  -- create_custag
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
			null,  -- 	create_custagexternalid text,
			null, -- create_custagexternalsystemuuid
			null, 
			null, 
			null, -- OUT create_custagid
			null, -- OUT create_custaguuid text,
			null, -- OUT create_custagentityuuid uuid
			337::bigint)

	-- add test.  If custag is a duplicate then return an error
		-- entity 277e5a92-04f6-4f53-abff-ed798c32658b = 'Ship'
		call entity.crud_custag_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_custagownerentityuuid
			'a4cec370-72ed-4717-b1c7-1fcd01c866b2', --create_custagparententityuuid
			null,   --create_custagcornerstoneentityuuid
			null, --create_custagcornerstoneorder 
			'Ship',  -- create_custag
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
			null,  -- 	create_custagexternalid text,
			null, -- create_custagexternalsystemuuid
			null, 
			null, 
			null, -- OUT create_custagid
			null, -- OUT create_custaguuid text,
			null, -- OUT create_custagentityuuid uuid
			337::bigint)
	

	-- custag to a systag 	
			-- Do we allow for cystags and systags to be at the same level?
			-- Curent systags with custags

		call entity.crud_custag_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_custagownerentityuuid
			'a4cec370-72ed-4717-b1c7-1fcd01c866b2', --create_custagparententityuuid
			null,   --create_custagcornerstoneentityuuid
			null, --create_custagcornerstoneorder 
			'custag'||now(),  -- create_custag
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
			null,  -- 	create_custagexternalid text,
			null, -- create_custagexternalsystemuuid
			null, 
			null, 
			null, -- OUT create_custagid
			null, -- OUT create_custaguuid text,
			null, -- OUT create_custagentityuuid uuid
			337::bigint)

	-- custag that is the start of a tree 
			-- To start will assume there is always a parent.  Will use the generic one.  

	call entity.crud_custag_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_custagownerentityuuid
			null,	--create_custagparententityuuid
			null,   --create_custagcornerstoneentityuuid
			null, --create_custagcornerstoneorder 
			'parentcustag'||now(),  -- create_custag
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
			null,  -- 	create_custagexternalid text,
			null, -- create_custagexternalsystemuuid
			null, 
			null, 
			null, -- OUT create_custagid
			null, -- OUT create_custaguuid text,
			null, -- OUT create_custagentityuuid uuid
			337::bigint)
		
	-- custag of a custag

	call entity.crud_custag_create(
		'cb56292b-8c20-4a9c-a70e-595d7b04c743', --create_custagownerentityuuid
		???,	--create_custagparententityuuid  -- use the rertun from the previous test.  
		null,   --create_custagcornerstoneentityuuid
		null, --create_custagcornerstoneorder 
		'subcustag'||now(),  -- create_custag
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
		null,  -- 	create_custagexternalid text,
		null, -- create_custagexternalsystemuuid
		null, 
		null, 
		null, -- OUT create_custagid
		null, -- OUT create_custaguuid text,
		null, -- OUT create_custagentityuuid uuid
		337::bigint)

	-- custag with cornerstone

	call entity.crud_custag_create(
		'cb56292b-8c20-4a9c-a70e-595d7b04c743', --create_custagownerentityuuid
		???,	--create_custagparententityuuid  -- use the return from generic test.  
		???,   --create_custagcornerstoneentityuuid  -- use the previous test.  
		2::integer, --create_custagcornerstoneorder 
		'subcustag'||now(),  -- create_custag
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
		null,  -- 	create_custagexternalid text,
		null, -- create_custagexternalsystemuuid
		null, 
		null, 
		null, -- OUT create_custagid
		null, -- OUT create_custaguuid text,
		null, -- OUT create_custagentityuuid uuid
		337::bigint)
	
*/

-- setup customer info
if create_custagownerentityuuid isNull
	then return;
	else tempcustagownerentityuuid = create_custagownerentityuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,tempcustagownerentityuuid,null,false,null,null,null, null);

-- probably return an error if the entity is not set to a customer.  Need to sort this out.  
if tempcustomerid isNull
	then  return;
end if;

-- custags need a name
if (create_custag isNull or coalesce(create_custag,'')= '')
	then return;  -- need error code
end if;

-- setup the language type
if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,templanguagetypeentityuuid);

if templanguagetypeid isNull
	then return;
end if;

-- setup parent
if create_custagparententityuuid isNull
	then -- set parent to the generic systag
		tempcustagparententityuuid = '86be74b7-40df-4c20-9467-d35fae610c52'::uuid;  -- this is the top most of the tag tree.
	else tempcustagparententityuuid = create_custagparententityuuid;
end if;

-- if custag already exists for the parent then return the correct custag
if create_custag = any(	select custagtype 
		from entity.crud_custag_read_min(tempcustagownerentityuuid ,null,null, tempcustagparententityuuid, false,null,null, null,templanguagetypeentityuuid))
	then return; 
end if;	

-- select custagtype from entity.crud_custag_read_min('70f200bd-1c92-481d-9f5c-e6cf6cd92cd0' ,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- setup custag order
if create_custagcornerstoneorder isNull
	then tempcustagcornerstoneorder = 1::integer;
	else tempcustagcornerstoneorder = create_custagcornerstoneorder::integer;
end if;

If create_custagdeleted isNull
	then tempcustagdeleted = false;
	else tempcustagdeleted = create_custagdeleted;
end if;

If create_custagdraft isNull
	then tempcustagdraft = false;
	else tempcustagdraft = create_custagdraft;
end if;

-- add the entity custag first then into the custag table

-- insert name into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		create_custag,
		create_modifiedbyid)
	Returning languagemasterid,languagemasteruuid into templanguagemasterid,templanguagemasteruuid;

-- insert displayname into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		create_custag,
		create_modifiedbyid)
	Returning languagemasterid,languagemasteruuid into tempdisplaylanguagemasterid,tempdisplaylanguagemasteruuid;

-- insert custag
-- insert into the entity table first

	INSERT INTO entity.entityinstance(
		entityinstanceownerentityuuid, 
		entityinstanceparententityuuid,	
		entityinstanceentitytemplateentityuuid, 
		entityinstancetypeentityuuid, 
		entityinstancecreateddate, 
		entityinstancemodifieddate, 
		entityinstancestartdate, 
		entityinstanceenddate, 
		entityinstanceexternalid, 
		entityinstanceexternalsystemuuid, -- deprecate???		
		entityinstanceexternalsystementityuuid,
		entityinstancemodifiedbyuuid, 
		entityinstancerefid,
		entityinstancerefuuid,
		entityinstancecornerstoneorder,
		entityinstanceentitytemplatename,
		entityinstancetype,
		entityinstancenameuuid,
		entityinstancedeleted, 
		entityinstancedraft		
		)
	values(  
		create_custagownerentityuuid,
		tempcustagparententityuuid,  
		(select entitytemplateuuid from entity.entitytemplate where entitytemplatescanid = 'Customer Tag'),
		(select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatescanid = 'Customer Tag'),
		now(),
		now(), 
		now(), 
		null, 
		create_custagexternalid,
		null,  -- deprecate???
		create_custagexternalsystemuuid,  -- not handling this correctly right now.  Maybe a lookup or sent in?
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		null, 
		null,	
		tempcustagcornerstoneorder,
		'Customer Tag',
		create_custag,
		templanguagemasteruuid,
		tempcustagdeleted,
		tempcustagdraft)
	Returning entityinstanceuuid into tempcustagentityuuid;		
	
	-- cornerstone to self it they are null
	
	update entity.entityinstance
	set entityinstancecornerstoneentityuuid = entityinstanceuuid
	where  entityinstancecornerstoneentityuuid isNull
		and entityinstanceuuid = tempcustagentityuuid;
	
	-- custagdisplayname

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagemasteruuid, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values
		(tempcustagentityuuid,
		create_custagownerentityuuid,	
		create_custag,
		(select languagemasteruuid from languagemaster where languagemasterid = tempdisplaylanguagemasterid),
		create_languagetypeuuid,
		now(),
		now(),
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'custagdisplayname'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'custagdisplayname');
	
	-- custagabbreviationentityuuid
	
	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values
		(tempcustagentityuuid,
		create_custagownerentityuuid,	
		null,
		now(),
		now(),
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'custagabbreviationentityuuid'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'custagabbreviationentityuuid');

	-- insert into regular custag table

	INSERT INTO public.custag(
			custagcustomerid, 
			custagcustomeruuid,
			custagsystagid, 
			custagsystaguuid,
			custagnameid, 
			custagtype,
			custagstartdate,
			custagmodifiedby,
			custagorder)
	values (tempcustomerid,
			tempcustomeruuid,
			(select entityinstanceoriginalid from entity.entityinstance where entityinstanceuuid = tempcustagparententityuuid),
			(select entityinstanceoriginaluuid from entity.entityinstance where entityinstanceuuid = tempcustagparententityuuid),
			templanguagemasterid,
			create_custag,
			clock_timestamp(),
			create_modifiedbyid,
			tempcustagcornerstoneorder)
			Returning custaguuid, custagid into tempcustaguuid,tempcustagid;

	update entity.entityinstance
	set entityinstanceoriginalid = tempcustagid,
		entityinstanceoriginaluuid = tempcustaguuid
	where entityinstanceuuid = tempcustagentityuuid;

create_custagid = tempcustagid;
create_custaguuid = tempcustaguuid;
create_custagentityuuid = tempcustagentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_custag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_custag_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_custag_delete(IN create_custagownerentityuuid uuid, IN create_custagentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

FUTURE:  Just have this call entity.crud_entityinstance_delete(create_entityinstanceownerentityuuid, create_entityinstanceentityuuid, create_modifiedbyid)

-- tests needed -  first 3 are fails.  No changes.  
	-- no owner isNull
		call entity.crud_custag_delete(
			null, -- IN create_custagownerentityuuid uuid,
			'807ba22f-b068-4116-b684-623a1cb0fc1d', -- IN create_custagentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_custag_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_custagownerentityuuid uuid,
			null, -- IN create_custagentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_custag_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_custagownerentityuuid uuid,
			'3c04bedf-bcd8-40de-ae35-3a650146f7d7', -- IN create_custagentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_custag_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_custagownerentityuuid uuid,
			'277e5a92-04f6-4f53-abff-ed798c32658b', -- IN create_custagentityuuid uuid,	
			337)

	-- reset the cutag
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = '277e5a92-04f6-4f53-abff-ed798c32658b'

-- use this to find fields to work with
select * 
from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
where custagownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- how to check if the update was successful
select * from entity.entityinstance where entityinstancedeleted = true

*/

-- check for owner 

if create_custagownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for field

if create_custagentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the field record to deleted

update entity.entityinstance
set entityinstancedeleted = true,
	entityinstancemodifieddate = now(),
	entityinstanceenddate = now(),
	entityinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entityinstanceownerentityuuid = create_custagownerentityuuid
	and entityinstanceuuid = create_custagentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_custag_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_custag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_custag_read_full(read_ownerentityuuid uuid, read_siteentityuuid uuid, read_custagentityuuid uuid, read_custagparententityuuid uuid, read_allcustags boolean, read_custagsenddeleted boolean, read_custagsenddrafts boolean, read_custagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, custagid bigint, custaguuid text, custagentityuuid uuid, custagownerentityuuid uuid, custagownerentityname text, custagparententityuuid uuid, custagparentname text, custagcornerstoneentityid uuid, custagcustomerid bigint, custagcustomeruuid text, custagcustomerentityuuid uuid, custagcustomername text, custagnameuuid text, custagname text, custagdisplaynameuuid text, custagdisplayname text, custagtype text, custagcreateddate timestamp with time zone, custagmodifieddate timestamp with time zone, custagstartdate timestamp with time zone, custagenddate timestamp with time zone, custagexternalid text, custagexternalsystementityuuid uuid, custagexternalsystemenname text, custagmodifiedbyuuid text, custagabbreviationentityuuid uuid, custagabbreviationname text, custagorder integer, systagsenddeleted boolean, systagsenddrafts boolean, systagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	tempcustagsenddeleted boolean[];
	tempcustagsenddrafts boolean[];
	tempcustagsendinactive boolean[];
	tendreluuid uuid;
BEGIN

-- Need to handle language translation in full version.  minimal version does not use languagetranslation
-- Might want to add a parameter to send in active as a boolean
-- Curretnly ignores site since custag does not care about site.  Custag does.  
-- May want to flip paramaeters to be arrays in the future.  

/*  examples

-- call entity.test_entity()

-- all customers all custags 
select * from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- all custags for a specific customer
select * from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- all custags for a parent
select * from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- fail scenario for parent
select * from entity.crud_custag_read_full(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- specific custags
-- succeed
select * from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

--fail
select * from entity.crud_custag_read_full(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_custagsenddeleted = false
	then tempcustagsenddeleted = Array[false];
	else tempcustagsenddeleted = Array[true,false];
end if;

if read_custagsenddrafts = false
	then tempcustagsenddrafts = Array[false];
	else tempcustagsenddrafts = Array[true,false];
end if;

if read_custagsendinactive = false
	then tempcustagsendinactive = Array[true];
	else tempcustagsendinactive = Array[true,false];
end if;

if read_allcustags = true
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as custagid,
	ei.entityinstanceoriginaluuid as custaguuid,
	ei.entityinstanceuuid as custagentityuuid,
	cust.customerentityuuid::uuid as custagownerentityuuid,	
	cust.customername as custagownerentityname,	
	ei.entityinstanceparententityuuid as custagparententityuuid,
	case when parname.systagtype notNull
		then parname.systagtype
		else parnamecust.custagtype
	end as custagparentname,
	ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
	cust.customerid as custagcustomerid,	
	cust.customeruuid as custagcustomeruuid,
	cust.customerentityuuid::uuid as custagcustomerentityuuid,
	cust.customername as custagcustomername,
	ei.entityinstancenameuuid as custagnameuuid,
	COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS custagname,
	dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
	COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS custagdisplayname,
	ei.entityinstancetype as custagtype,
	ei.entityinstancecreateddate as custagcreateddate,
	ei.entityinstancemodifieddate as custagmodifieddate,	
	ei.entityinstancestartdate as custagstartdate,
	ei.entityinstanceenddate as custagenddate,
	ei.entityinstanceexternalid as custagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	systemname.systagtype as custagexternalsystementname,
	ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as custagabbreviationentityuuid,
	abbname.systagtype as custagabbreviationname,
	ei.entityinstancecornerstoneorder as custagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid,customername  from entity.crud_customer_read_full(read_ownerentityuuid,null, null, allowners, read_custagsenddeleted,read_custagsenddrafts,read_custagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'Customer Tag' 
			and ei.entityinstancedeleted = ANY (tempcustagsenddeleted)
			and ei.entityinstancedraft = ANY (tempcustagsenddrafts)
	left join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
		on ei.entityinstancenameuuid = namelm.languagemasteruuid
	left join public.languagetranslations namelt
		on namelt.languagetranslationmasterid  = namelm.languagemasterid
			and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as foo)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'custagdisplayname' 
	left join languagemaster displaylm
		on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
	left join public.languagetranslations displaylt
		on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
			and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as foo2)
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid' 
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as parname
		on ei.entityinstanceparententityuuid  =  parname.systagentityuuid
	left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_custagsenddeleted , read_custagsenddrafts, read_custagsendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as parnamecust
		on ei.entityinstanceparententityuuid  =  parnamecust.custagentityuuid
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as abbname
		on abb.entityfieldinstancevalue =  abbname.systagentityuuid::text
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as systemname
		on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid) as foo3
		where foo3.entityinstanceactive = Any (tempcustagsendinactive) ;   
	return;
end if;

if read_custagentityuuid notNull and allowners = false
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as custagid,
	ei.entityinstanceoriginaluuid as custaguuid,
	ei.entityinstanceuuid as custagentityuuid,
	cust.customerentityuuid::uuid as custagownerentityuuid,	
	cust.customername as custagownerentityname,	
	ei.entityinstanceparententityuuid as custagparententityuuid,
	case when parname.systagtype notNull
		then parname.systagtype
		else parnamecust.custagtype
	end as custagparentname,
	ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
	cust.customerid as custagcustomerid,	
	cust.customeruuid as custagcustomeruuid,
	cust.customerentityuuid::uuid as custagcustomerentityuuid,
	cust.customername as custagcustomername,
	ei.entityinstancenameuuid as custagnameuuid,
	COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS custagname,
	dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
	COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS custagdisplayname,
	ei.entityinstancetype as custagtype,
	ei.entityinstancecreateddate as custagcreateddate,
	ei.entityinstancemodifieddate as custagmodifieddate,	
	ei.entityinstancestartdate as custagstartdate,
	ei.entityinstanceenddate as custagenddate,
	ei.entityinstanceexternalid as custagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	systemname.systagtype as custagexternalsystementname,
	ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as custagabbreviationentityuuid,
	abbname.systagtype as custagabbreviationname,
	ei.entityinstancecornerstoneorder as custagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid,customername  from entity.crud_customer_read_full(read_ownerentityuuid,null, null, allowners,read_custagsenddeleted,read_custagsenddrafts,read_custagsendinactive, null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'Customer Tag' 
			and ei.entityinstanceuuid = read_custagentityuuid
			and ei.entityinstancedeleted = ANY (tempcustagsenddeleted)
			and ei.entityinstancedraft = ANY (tempcustagsenddrafts)
	left join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
		on ei.entityinstancenameuuid = namelm.languagemasteruuid
	left join public.languagetranslations namelt
		on namelt.languagetranslationmasterid  = namelm.languagemasterid
			and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as foo)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'custagdisplayname' 
	left join languagemaster displaylm
		on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
	left join public.languagetranslations displaylt
		on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
			and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as foo2)
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid' 
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as parname
		on ei.entityinstanceparententityuuid  =  parname.systagentityuuid
	left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_custagsenddeleted , read_custagsenddrafts, read_custagsendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as parnamecust
		on ei.entityinstanceparententityuuid  =  parnamecust.custagentityuuid
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as abbname
		on abb.entityfieldinstancevalue =  abbname.systagentityuuid::text
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as systemname
		on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid) as foo3
		where foo3.entityinstanceactive = Any (tempcustagsendinactive) ;   
	return;
end if;

if read_custagparententityuuid notNull and allowners = false
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as custagid,
	ei.entityinstanceoriginaluuid as custaguuid,
	ei.entityinstanceuuid as custagentityuuid,
	cust.customerentityuuid::uuid as custagownerentityuuid,	
	cust.customername as custagownerentityname,	
	ei.entityinstanceparententityuuid as custagparententityuuid,
	case when parname.systagtype notNull
		then parname.systagtype
		else parnamecust.custagtype
	end as custagparentname,
	ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
	cust.customerid as custagcustomerid,	
	cust.customeruuid as custagcustomeruuid,
	cust.customerentityuuid::uuid as custagcustomerentityuuid,
	cust.customername as custagcustomername,
	ei.entityinstancenameuuid as custagnameuuid,
	COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS custagname,
	dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
	COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS custagdisplayname,
	ei.entityinstancetype as custagtype,
	ei.entityinstancecreateddate as custagcreateddate,
	ei.entityinstancemodifieddate as custagmodifieddate,	
	ei.entityinstancestartdate as custagstartdate,
	ei.entityinstanceenddate as custagenddate,
	ei.entityinstanceexternalid as custagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	systemname.systagtype as custagexternalsystementname,
	ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as custagabbreviationentityuuid,
	abbname.systagtype as custagabbreviationname,
	ei.entityinstancecornerstoneorder as custagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid,customername  from entity.crud_customer_read_full(read_ownerentityuuid,null, null, allowners, read_custagsenddeleted,read_custagsenddrafts,read_custagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'Customer Tag' 
			and ei.entityinstanceparententityuuid = read_custagparententityuuid
			and ei.entityinstancedeleted = ANY (tempcustagsenddeleted)
			and ei.entityinstancedraft = ANY (tempcustagsenddrafts)
	left join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
		on ei.entityinstancenameuuid = namelm.languagemasteruuid
	left join public.languagetranslations namelt
		on namelt.languagetranslationmasterid  = namelm.languagemasterid
			and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as foo)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'custagdisplayname' 
	left join languagemaster displaylm
		on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
	left join public.languagetranslations displaylt
		on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
			and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as foo2)
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid' 
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as parname
		on ei.entityinstanceparententityuuid  =  parname.systagentityuuid
	left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_custagsenddeleted , read_custagsenddrafts, read_custagsendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as parnamecust
		on ei.entityinstanceparententityuuid  =  parnamecust.custagentityuuid
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as abbname
		on abb.entityfieldinstancevalue =  abbname.systagentityuuid::text
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as systemname
		on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid) as foo3
		where foo3.entityinstanceactive = Any (tempcustagsendinactive) ;   
	return;
end if;

if read_custagparententityuuid isNull and allowners = false
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as custagid,
	ei.entityinstanceoriginaluuid as custaguuid,
	ei.entityinstanceuuid as custagentityuuid,
	cust.customerentityuuid::uuid as custagownerentityuuid,	
	cust.customername as custagownerentityname,	
	ei.entityinstanceparententityuuid as custagparententityuuid,
	case when parname.systagtype notNull
		then parname.systagtype
		else parnamecust.custagtype
	end as custagparentname,
	ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
	cust.customerid as custagcustomerid,	
	cust.customeruuid as custagcustomeruuid,
	cust.customerentityuuid::uuid as custagcustomerentityuuid,
	cust.customername as custagcustomername,
	ei.entityinstancenameuuid as custagnameuuid,
	COALESCE(namelt.languagetranslationvalue, namelm.languagemastersource) AS custagname,
	dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
	COALESCE(displaylt.languagetranslationvalue, displaylm.languagemastersource) AS custagdisplayname,
	ei.entityinstancetype as custagtype,
	ei.entityinstancecreateddate as custagcreateddate,
	ei.entityinstancemodifieddate as custagmodifieddate,	
	ei.entityinstancestartdate as custagstartdate,
	ei.entityinstanceenddate as custagenddate,
	ei.entityinstanceexternalid as custagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	systemname.systagtype as custagexternalsystementname,
	ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as custagabbreviationentityuuid,
	abbname.systagtype as custagabbreviationname,
	ei.entityinstancecornerstoneorder as custagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid,customername  from entity.crud_customer_read_full(read_ownerentityuuid,null, null, allowners,read_custagsenddeleted,read_custagsenddrafts,read_custagsendinactive, null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'Customer Tag' 
			and ei.entityinstanceownerentityuuid = read_ownerentityuuid
			and ei.entityinstanceparententityuuid = read_custagparententityuuid
			and ei.entityinstancedeleted = ANY (tempcustagsenddeleted)
			and ei.entityinstancedraft = ANY (tempcustagsenddrafts)
	left join languagemaster namelm  -- this lm to lt pattern can probably become a function instead
		on ei.entityinstancenameuuid = namelm.languagemasteruuid
	left join public.languagetranslations namelt
		on namelt.languagetranslationmasterid  = namelm.languagemasterid
			and namelt.languagetranslationtypeid = (select foo.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as foo)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'custagdisplayname' 
	left join languagemaster displaylm
		on dn.entityfieldinstancevaluelanguagemasteruuid = displaylm.languagemasteruuid
	left join public.languagetranslations displaylt
		on displaylt.languagetranslationmasterid  = displaylm.languagemasterid
			and displaylt.languagetranslationtypeid = (select foo2.systagid from entity.crud_systag_read_min(tendreluuid, null, read_languagetranslationtypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') as foo2)
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid' 
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as parname
		on ei.entityinstanceparententityuuid  =  parname.systagentityuuid
	left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_custagsenddeleted , read_custagsenddrafts, read_custagsendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as parnamecust
		on ei.entityinstanceparententityuuid  =  parnamecust.custagentityuuid
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as abbname
		on abb.entityfieldinstancevalue =  abbname.systagentityuuid::text
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as systemname
		on ei.entityinstanceexternalsystementityuuid =  systemname.systagentityuuid) as foo3
		where foo3.entityinstanceactive = Any (tempcustagsendinactive) ;   
	return;
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_custag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_custag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_custag_read_min(read_ownerentityuuid uuid, read_siteentityuuid uuid, read_custagentityuuid uuid, read_custagparententityuuid uuid, read_allcustags boolean, read_custagsenddeleted boolean, read_custagsenddrafts boolean, read_custagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, custagid bigint, custaguuid text, custagentityuuid uuid, custagownerentityuuid uuid, custagparententityuuid uuid, custagcornerstoneentityid uuid, custagcustomerid bigint, custagcustomeruuid text, custagcustomerentityuuid uuid, custagnameuuid text, custagdisplaynameuuid text, custagtype text, custagcreateddate timestamp with time zone, custagmodifieddate timestamp with time zone, custagstartdate timestamp with time zone, custagenddate timestamp with time zone, custagexternalid text, custagexternalsystementityuuid uuid, custagmodifiedbyuuid text, custagabbreviationentityuuid uuid, custagorder integer, systagsenddeleted boolean, systagsenddrafts boolean, systagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	tempcustagsenddeleted boolean[];
	tempcustagsenddrafts boolean[];
	tempcustagsendinactive boolean[];
	tendreluuid uuid;
BEGIN

-- Need to handle language translation in full version.  minimal version does not use languagetranslation
-- Might want to add a parameter to send in active as a boolean
-- Curretnly ignores site since custag does not care about site.  Custag does.  
-- May want to flip paramaeters to be arrays in the future.  

/*  examples

-- call entity.test_entity()

-- all customers all custags 
select * from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- all custags for a specific customer
select * from entity.crud_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- all custags for a parent
select * from entity.crud_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- fail scenario for parent
select * from entity.crud_custag_read_min(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

-- specific custags
-- succeed
select * from entity.crud_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

--fail
select * from entity.crud_custag_read_min(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by custagid

select count(*) 
from entity.crud_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', 
									null, 
									'444d946c-1180-4eb2-ae52-a429d096b9f1', 
									null, 
									false,
									'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9') 

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_custagsenddeleted = false
	then tempcustagsenddeleted = Array[false];
	else tempcustagsenddeleted = Array[true,false];
end if;

if read_custagsenddrafts = false
	then tempcustagsenddrafts = Array[false];
	else tempcustagsenddrafts = Array[true,false];
end if;

if read_custagsendinactive = false
	then tempcustagsendinactive = Array[true];
	else tempcustagsendinactive = Array[true,false];
end if;

if read_allcustags = true
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as custagid,
	ei.entityinstanceoriginaluuid as custaguuid,
	ei.entityinstanceuuid as custagentityuuid,
	ei.entityinstanceownerentityuuid as custagownerentityuuid,	
	ei.entityinstanceparententityuuid as custagparententityuuid,	
	ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
	cust.customerid as custagcustomerid,	
	cust.customeruuid as custagcustomeruuid,
	cust.customerentityuuid::uuid as custagcustomerentityuuid,
	ei.entityinstancenameuuid as custagnameuuid,
	dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
	ei.entityinstancetype as custagtype,
	ei.entityinstancecreateddate as custagcreateddate,
	ei.entityinstancemodifieddate as custagmodifieddate,	
	ei.entityinstancestartdate as custagstartdate,
	ei.entityinstanceenddate as custagenddate,
	ei.entityinstanceexternalid as custagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as custagabbreviationentityuuid,
	ei.entityinstancecornerstoneorder as custagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_ownerentityuuid,null, null, allowners, read_custagsenddeleted,read_custagsenddrafts,read_custagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'Customer Tag'  
			and ei.entityinstancedeleted = ANY (tempcustagsenddeleted)
			and ei.entityinstancedraft = ANY (tempcustagsenddrafts)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'custagdisplayname' 
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid') as foo
		where foo.entityinstanceactive = Any (tempcustagsendinactive) ;   
	return;
end if;

if read_custagentityuuid notNull and read_ownerentityuuid notNull
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as custagid,
	ei.entityinstanceoriginaluuid as custaguuid,
	ei.entityinstanceuuid as custagentityuuid,
	ei.entityinstanceownerentityuuid as custagownerentityuuid,	
	ei.entityinstanceparententityuuid as custagparententityuuid,	
	ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
	cust.customerid as custagcustomerid,	
	cust.customeruuid as custagcustomeruuid,
	cust.customerentityuuid::uuid as custagcustomerentityuuid,
	ei.entityinstancenameuuid as custagnameuuid,
	dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
	ei.entityinstancetype as custagtype,
	ei.entityinstancecreateddate as custagcreateddate,
	ei.entityinstancemodifieddate as custagmodifieddate,	
	ei.entityinstancestartdate as custagstartdate,
	ei.entityinstanceenddate as custagenddate,
	ei.entityinstanceexternalid as custagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as custagabbreviationentityuuid,
	ei.entityinstancecornerstoneorder as custagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_ownerentityuuid,null, null, allowners, read_custagsenddeleted,read_custagsenddrafts,read_custagsendinactive,null)) as cust  
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceentitytemplatename = 'Customer Tag' 
					and ei.entityinstanceuuid = read_custagentityuuid
					and ei.entityinstancedeleted = ANY (tempcustagsenddeleted)
					and ei.entityinstancedraft = ANY (tempcustagsenddrafts)
			join entity.entityfieldinstance dn
				on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
					and dn.entityfieldinstanceentityfieldname = 'custagdisplayname' 
			join entity.entityfieldinstance abb
				on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
					and abb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid') as foo
		where foo.entityinstanceactive = Any (tempcustagsendinactive) ;   
			return;
end if;

if read_custagparententityuuid notNull and read_ownerentityuuid notNull
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as custagid,
	ei.entityinstanceoriginaluuid as custaguuid,
	ei.entityinstanceuuid as custagentityuuid,
	ei.entityinstanceownerentityuuid as custagownerentityuuid,	
	ei.entityinstanceparententityuuid as custagparententityuuid,	
	ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
	cust.customerid as custagcustomerid,	
	cust.customeruuid as custagcustomeruuid,
	cust.customerentityuuid::uuid as custagcustomerentityuuid,
	ei.entityinstancenameuuid as custagnameuuid,
	dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
	ei.entityinstancetype as custagtype,
	ei.entityinstancecreateddate as custagcreateddate,
	ei.entityinstancemodifieddate as custagmodifieddate,	
	ei.entityinstancestartdate as custagstartdate,
	ei.entityinstanceenddate as custagenddate,
	ei.entityinstanceexternalid as custagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as custagabbreviationentityuuid,
	ei.entityinstancecornerstoneorder as custagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_ownerentityuuid,null, null, allowners, read_custagsenddeleted,read_custagsenddrafts,read_custagsendinactive,null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'Customer Tag'  
			and ei.entityinstanceparententityuuid = read_custagparententityuuid
			and ei.entityinstancedeleted = ANY (tempcustagsenddeleted)
			and ei.entityinstancedraft = ANY (tempcustagsenddrafts)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'custagdisplayname' 
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid') as foo
		where foo.entityinstanceactive = Any (tempcustagsendinactive) ;   
	return;
end if;

if read_custagparententityuuid isNull and read_ownerentityuuid notNull
	then
	return query
		select *
		from (SELECT 
	read_languagetranslationtypeentityuuid as languagetranslationtypeentityuuid,
	ei.entityinstanceoriginalid as custagid,
	ei.entityinstanceoriginaluuid as custaguuid,
	ei.entityinstanceuuid as custagentityuuid,
	ei.entityinstanceownerentityuuid as custagownerentityuuid,	
	ei.entityinstanceparententityuuid as custagparententityuuid,	
	ei.entityinstancecornerstoneentityuuid  as custagcornerstoneentityid,
	cust.customerid as custagcustomerid,	
	cust.customeruuid as custagcustomeruuid,
	cust.customerentityuuid::uuid as custagcustomerentityuuid,
	ei.entityinstancenameuuid as custagnameuuid,
	dn.entityfieldinstancevaluelanguagemasteruuid as custagdisplaynameuuid,
	ei.entityinstancetype as custagtype,
	ei.entityinstancecreateddate as custagcreateddate,
	ei.entityinstancemodifieddate as custagmodifieddate,	
	ei.entityinstancestartdate as custagstartdate,
	ei.entityinstanceenddate as custagenddate,
	ei.entityinstanceexternalid as custagexternalid,
	ei.entityinstanceexternalsystementityuuid as systagexternalsystementityuuid,	
	ei.entityinstancemodifiedbyuuid as custagmodifiedbyuuid,
	abb.entityfieldinstancevalue::uuid as custagabbreviationentityuuid,
	ei.entityinstancecornerstoneorder as custagorder,
	ei.entityinstancedeleted, 
	ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
from entity.entityinstance ei
	Join (select customerid,customeruuid, customerentityuuid  from entity.crud_customer_read_min(read_ownerentityuuid,null, null, allowners,read_custagsenddeleted,read_custagsenddrafts,read_custagsendinactive, null)) as cust  
		on cust.customerentityuuid = ei.entityinstanceownerentityuuid
			and ei.entityinstanceentitytemplatename = 'Customer Tag' 
			and ei.entityinstanceownerentityuuid = read_ownerentityuuid
			and ei.entityinstanceparententityuuid = read_custagparententityuuid
			and ei.entityinstancedeleted = ANY (tempcustagsenddeleted)
			and ei.entityinstancedraft = ANY (tempcustagsenddrafts)
	join entity.entityfieldinstance dn
		on ei.entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
			and dn.entityfieldinstanceentityfieldname = 'custagdisplayname' 
	join entity.entityfieldinstance abb
		on ei.entityinstanceuuid = abb.entityfieldinstanceentityinstanceentityuuid
			and abb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid') as foo
		where foo.entityinstanceactive = Any (tempcustagsendinactive) ;   
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_custag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_custag_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_custag_update(IN update_custagentityuuid uuid, IN update_custagownerentityuuid uuid, IN update_custagparententityuuid uuid, IN update_custagcornerstoneentityuuid uuid, IN update_custagcornerstoneorder integer, IN update_custag text, IN update_languagetypeuuid uuid, IN update_custagexternalid text, IN update_custagexternalsystemuuid uuid, IN update_custagdeleted boolean, IN update_custagdraft boolean, IN update_custagstartdate timestamp with time zone, IN update_custagenddate timestamp with time zone, IN update_custagmodifiedbyuuid text)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
Begin

/*
Needs tests
	
*/

if update_languagetypeuuid isNull 
	then update_languagetypeuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
End if;

 if update_custagdraft = true or ((select entityinstancedraft 
										from entity.entityinstance
										WHERE entityinstanceuuid = update_custagentityuuid ) = true)
	then -- let everything change
		UPDATE entity.entityinstance
			SET entityinstanceownerentityuuid = case when update_custagownerentityuuid notnull 
												then update_custagownerentityuuid
												else entityinstanceownerentityuuid end,	
				entityinstanceparententityuuid = case when update_custagparententityuuid notnull 
												then update_custagparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancecornerstoneorder = case when update_custagcornerstoneorder notnull 
												then update_custagcornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancetype = case when update_custag notnull and (coalesce(update_custag,'') <> '')
												then update_custag
												else entityinstancetype end,
				entityinstanceexternalid = case when update_custagexternalid notnull 
												then update_custagexternalid
												else entityinstanceexternalid end,												
				entityinstanceexternalsystementityuuid = case when update_custagexternalsystemuuid notnull 
														then update_custagexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancedeleted = case when update_custagdeleted notnull 
										then update_custagdeleted
										else entityinstancedeleted end, 
				entityinstancedraft = case when update_custagdraft notnull 
										then update_custagdraft
										else entityinstancedraft end,
				entityinstancestartdate = case when update_custagstartdate notnull 
										then update_custagstartdate
										else entityinstancestartdate end,
				entityinstanceenddate = case 	when update_custagdeleted = true 
									and entityinstanceenddate isNull
									and update_custagenddate isNull then now()
								when update_custagdeleted = true 
									and entityinstanceenddate isNull
									and update_custagenddate notNull then update_custagenddate 
								when update_custagdeleted = true 
									and entityinstanceenddate notNull
									and update_custagenddate isNull then entityinstanceenddate
								when update_custagdeleted = true and entityinstanceenddate notNull
									and update_custagenddate notNull and update_custagenddate <> entityinstanceenddate
									then update_custagenddate	
								else null
							end,	
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_custagmodifiedbyuuid
		WHERE entityinstanceuuid = update_custagentityuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entityinstance
			SET entityinstanceparententityuuid = case when update_custagparententityuuid notnull 
												then update_custagparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancecornerstoneorder = case when update_custagcornerstoneorder notnull 
												then update_custagcornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancetype = case when update_custag notnull and (coalesce(update_custag,'') <> '')
												then update_custag
												else entityinstancetype end,
				entityinstanceexternalid = case when update_custagexternalid notnull 
												then update_custagexternalid
												else entityinstanceexternalid end,												
				entityinstanceexternalsystementityuuid = case when update_custagexternalsystemuuid notnull 
														then update_custagexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancestartdate = case when update_custagstartdate notnull 
										then update_custagstartdate
										else entityinstancestartdate end,
				entityinstancedeleted = case when update_custagdeleted notnull 
											then update_custagdeleted
											else entityinstancedeleted end, 						
				entityinstanceenddate = case 	when update_custagdeleted = true 
									and entityinstanceenddate isNull
									and update_custagenddate isNull then now()
								when update_custagdeleted = true 
									and entityinstanceenddate isNull
									and update_custagenddate notNull then update_custagenddate 
								when update_custagdeleted = true 
									and entityinstanceenddate notNull
									and update_custagenddate isNull then entityinstanceenddate
								when update_custagdeleted = true and entityinstanceenddate notNull
									and update_custagenddate notNull and update_custagenddate <> entityinstanceenddate
									then update_custagenddate	
								else null
							end,
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_custagmodifiedbyuuid
		WHERE entityinstanceuuid = update_custagentityuuid;
end if;

update_custagownerentityuuid = (select owner from api.entity_instance where id = update_custagentityuuid);

-- update the language master

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_custagownerentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);

if update_custag notnull and (coalesce(update_custag,'') <> '')
	then
	-- update name in languagemaster
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_custag,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_custagmodifiedbyuuid),
				languagemastermodifieddate = now(),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'	
		where languagemasteruuid = (select entityinstancenameuuid from entity.entityinstance WHERE entityinstanceuuid = update_custagentityuuid);
	
	-- update displayname in languagemaster
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_custag,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_custagmodifiedbyuuid),
				languagemastermodifieddate = now(),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'	
		where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
									from entity.entityfieldinstance
									where entityfieldinstanceentityinstanceentityuuid = update_custagentityuuid
										and  entityfieldinstanceentityfieldentityuuid = '1b29e7b0-0800-4366-b79e-424dd9bafa71');
end if;

-- update custag

update public.custag
		set custagtype = case when update_custag notnull and (coalesce(update_custag,'') <> '')
								then update_custag
								else custagtype end,
			custagstartdate = case when update_custagstartdate notnull 
									then update_custagstartdate
									else custagstartdate end,
			custagenddate  = update_custagenddate, 
			custagmodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_custagmodifiedbyuuid)
where custagid = (select custagid from entity.crud_custag_read_min(update_custagownerentityuuid, 
							null, update_custagentityuuid, null, false,null,null, null,update_languagetypeuuid));

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_custag_update(IN update_custagentityuuid uuid, IN update_custagownerentityuuid uuid, IN update_custagparententityuuid uuid, IN update_custagcornerstoneentityuuid uuid, IN update_custagcornerstoneorder integer, IN update_custag text, IN update_custag_name text, IN update_custag_displayname text, IN update_languagetypeuuid uuid, IN update_custagexternalid text, IN update_custagexternalsystemuuid uuid, IN update_custagdeleted boolean, IN update_custagdraft boolean, IN update_custagstartdate timestamp with time zone, IN update_custagenddate timestamp with time zone, IN update_custagmodifiedbyuuid text)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
Begin

/*
Needs tests
	
*/

if update_languagetypeuuid isNull 
	then update_languagetypeuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
End if;

 if update_custagdraft = true or ((select entityinstancedraft 
										from entity.entityinstance
										WHERE entityinstanceuuid = update_custagentityuuid ) = true)
	then -- let everything change
		UPDATE entity.entityinstance
			SET entityinstanceownerentityuuid = case when update_custagownerentityuuid notnull 
												then update_custagownerentityuuid
												else entityinstanceownerentityuuid end,	
				entityinstanceparententityuuid = case when update_custagparententityuuid notnull 
												then update_custagparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancecornerstoneorder = case when update_custagcornerstoneorder notnull 
												then update_custagcornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancetype = case when update_custag notnull and (coalesce(update_custag,'') <> '')
												then update_custag
												else entityinstancetype end,
				entityinstanceexternalid = update_custagexternalid,													
				entityinstanceexternalsystementityuuid = case when update_custagexternalsystemuuid notnull 
														then update_custagexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancedeleted = case when update_custagdeleted notnull 
										then update_custagdeleted
										else entityinstancedeleted end, 
				entityinstancedraft = case when update_custagdraft notnull 
										then update_custagdraft
										else entityinstancedraft end,
				entityinstancestartdate = case when update_custagstartdate notnull 
										then update_custagstartdate
										else entityinstancestartdate end,
				entityinstanceenddate = case 	when update_custagdeleted = true 
									and entityinstanceenddate isNull
									and update_custagenddate isNull then now()
								when update_custagdeleted = true 
									and entityinstanceenddate isNull
									and update_custagenddate notNull then update_custagenddate 
								when update_custagdeleted = true 
									and entityinstanceenddate notNull
									and update_custagenddate isNull then entityinstanceenddate
								when update_custagdeleted = true and entityinstanceenddate notNull
									and update_custagenddate notNull and update_custagenddate <> entityinstanceenddate
									then update_custagenddate	
								else null
							end,	
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_custagmodifiedbyuuid
		WHERE entityinstanceuuid = update_custagentityuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entityinstance
			SET entityinstanceparententityuuid = case when update_custagparententityuuid notnull 
												then update_custagparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancecornerstoneorder = case when update_custagcornerstoneorder notnull 
												then update_custagcornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancetype = case when update_custag notnull and (coalesce(update_custag,'') <> '')
												then update_custag
												else entityinstancetype end,
				entityinstanceexternalid = update_custagexternalid,												
				entityinstanceexternalsystementityuuid = case when update_custagexternalsystemuuid notnull 
														then update_custagexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancestartdate = case when update_custagstartdate notnull 
										then update_custagstartdate
										else entityinstancestartdate end,
				entityinstancedeleted = case when update_custagdeleted notnull 
											then update_custagdeleted
											else entityinstancedeleted end, 						
				entityinstanceenddate = case 	when update_custagdeleted = true 
									and entityinstanceenddate isNull
									and update_custagenddate isNull then now()
								when update_custagdeleted = true 
									and entityinstanceenddate isNull
									and update_custagenddate notNull then update_custagenddate 
								when update_custagdeleted = true 
									and entityinstanceenddate notNull
									and update_custagenddate isNull then entityinstanceenddate
								when update_custagdeleted = true and entityinstanceenddate notNull
									and update_custagenddate notNull and update_custagenddate <> entityinstanceenddate
									then update_custagenddate	
								else null
							end,
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_custagmodifiedbyuuid
		WHERE entityinstanceuuid = update_custagentityuuid;
end if;

update_custagownerentityuuid = (select entityinstanceownerentityuuid from entity.entityinstance where entityinstanceuuid = update_custagentityuuid);

-- update the language master

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_custagownerentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);

if update_custag_displayname notnull and (coalesce(update_custag_displayname,'') <> '')
	then

	-- update name in languagetranslations (Temp until the retranslate runs)	
		update public.languagetranslations
			set languagetranslationvalue = update_custag_displayname
		from entity.entityinstance
		where languagetranslationmasterid = (select languagemasterid 
												from languagemaster 
												where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
																			from entity.entityfieldinstance
																			where entityfieldinstanceentityinstanceentityuuid = update_custagentityuuid
																				and  entityfieldinstanceentityfieldentityuuid = '1b29e7b0-0800-4366-b79e-424dd9bafa71'))
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_custag_displayname;
	
	-- update displayname in languagemaster
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_custag_displayname,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_custagmodifiedbyuuid),
				languagemastermodifieddate = now(),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'	
		where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
									from entity.entityfieldinstance
									where entityfieldinstanceentityinstanceentityuuid = update_custagentityuuid
										and  entityfieldinstanceentityfieldentityuuid = '1b29e7b0-0800-4366-b79e-424dd9bafa71')
				and languagemastersource <> update_custag_displayname;

	-- update the field instance

		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_custag_displayname,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_custagmodifiedbyuuid
		where entityfieldinstanceentityinstanceentityuuid = update_custagentityuuid
				and  entityfieldinstanceentityfieldentityuuid = '1b29e7b0-0800-4366-b79e-424dd9bafa71'
				and entityfieldinstancevalue <> update_custag_displayname; 

end if;

if update_custag_name notnull and (coalesce(update_custag_name,'') <> '')
	then

	-- update name in languagetranslations (Temp until the retranslate runs)	
		update public.languagetranslations
			set languagetranslationvalue = update_custag_name
		from entity.entityinstance
			where entityinstanceuuid = update_custagentityuuid
				and languagetranslationmasterid = (select languagemasterid from languagemaster where languagemasteruuid = entityinstancenameuuid)
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_custag_name;

	-- update name in languagemaster
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_custag_name,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_custagmodifiedbyuuid),
				languagemastermodifieddate = now(),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'	
		from entity.entityinstance
			where entityinstanceuuid = update_custagentityuuid
				and languagemasteruuid = entityinstancenameuuid
				and languagemastersource <> update_custag_name;
				
end if;

-- update custag

update public.custag
		set custagstartdate = case when update_custagstartdate notnull 
									then update_custagstartdate
									else custagstartdate end,
			custagenddate  = update_custagenddate, 
			custagmodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_custagmodifiedbyuuid)
where custagid = (select custagid from entity.crud_custag_read_min(update_custagownerentityuuid, 
							null, update_custagentityuuid, null, false,null,null, null,update_languagetypeuuid));

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_custag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_customer_create(text,uuid,uuid,text,uuid,boolean,boolean,uuid[],bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_customer_create(IN create_customername text, OUT create_customeruuid text, OUT create_customerentityuuid uuid, IN create_customerparentuuid uuid, IN create_customerowner uuid, IN create_customerbillingid text, IN create_customerbillingsystemid uuid, IN create_customerdeleted boolean, IN create_customerdraft boolean, IN create_languagetypeuuids uuid[], IN create_modifiedby bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare

/*

-- generic version

call entity.crud_customer_create(
	'Test'||now()::text, -- IN create_customername text,
	null, -- OUT create_customeruuid text,
	null, -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
	null, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
	null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
	('Bill'||now())::text, -- IN create_customerbillingid text,
	('c486a0d3-7c44-4129-9629-53920de84215'::text)::uuid, --	IN create_customerbillingsystemid uuid,
	null,
	null,
	ARRAY['bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'::uuid], -- IN create_languagetypeuuids uuid[],
	337::bigint -- IN create_modifiedby bigint
	);
	
-- create Lipman Account

call entity.crud_customer_create(
	'Lipman Account'::text, -- IN create_customername text,
	null, -- OUT create_customeruuid text,
	null, -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
	null, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
	null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
	('Bill'||now())::text, -- IN create_customerbillingid text,
	('c486a0d3-7c44-4129-9629-53920de84215'::text)::uuid, --	IN create_customerbillingsystemid uuid,
	null,
	null,
	ARRAY['bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'::uuid], -- IN create_languagetypeuuids uuid[],
	337::bigint -- IN create_modifiedby bigint
	);

-- create Fillogic Account

call entity.crud_customer_create(
	'Fillogic Account'::text, -- IN create_customername text,
	null, -- OUT create_customeruuid text,
	null, -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
	null, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
	null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
	('Bill'||now())::text, -- IN create_customerbillingid text,
	('c486a0d3-7c44-4129-9629-53920de84215'::text)::uuid, --	IN create_customerbillingsystemid uuid,
	null,
	null,
	ARRAY['bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'::uuid], -- IN create_languagetypeuuids uuid[],
	337::bigint -- IN create_modifiedby bigint
	);

-- create with FillLogic as the parent  

call entity.crud_customer_create(
	'Filllogic Sub'||now()::text, -- IN create_customername text,
	null, -- OUT create_customeruuid text,
	null, -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
	'290021c4-3a66-45e4-a860-68d1e7e05c9c'::uuid, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
	null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
	('Bill'||now())::text, -- IN create_customerbillingid text,
	('c486a0d3-7c44-4129-9629-53920de84215'::text)::uuid, --	IN create_customerbillingsystemid uuid,
	null,
	null,
	ARRAY['bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'::uuid], -- IN create_languagetypeuuids uuid[],
	337::bigint -- IN create_modifiedby bigint
	);

 */

-- Customer temp values
    tempcustomerid                 bigint;
    tempbillingsystemid            bigint;
-- General temp values
    templanguagemasterid           bigint;
	templanguagemasteruuid 			text;
    templanguagetypeuuid           text;
    templanguagetypeid           bigint;
	englishuuid uuid;
	tempcustomerdeleted boolean;
	tempcustomerdraft boolean;

Begin

englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';

-- customer need a name
if (create_customername isNull or coalesce(create_customername,'')= '')
	then return;  -- need error code
end if;

-- setup billing.  
    tempbillingsystemid = (select systagid
                           from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
                           where systagentityuuid = create_customerbillingsystemid);

-- setup language
if create_languagetypeuuids isNull
	then templanguagetypeid = 20;
	Else templanguagetypeid = (
		select systagid 
		from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
		where systagentityuuid = create_languagetypeuuids[1]	
		); 
end if;

    templanguagetypeuuid = (select systaguuid
                            from public.systag
                            where systagid = templanguagetypeid);

If create_customerdeleted isNull
	then tempcustomerdeleted = false;
	else tempcustomerdeleted = create_customerdeleted;
end if;

If create_customerdraft isNull
	then tempcustomerdraft = false;
	else tempcustomerdraft = create_customerdraft;
end if;

-- create the entity first then push it to the original customer table

	INSERT INTO entity.entityinstance(
		entityinstanceownerentityuuid,
		entityinstanceparententityuuid,
		entityinstanceentitytemplateentityuuid, 
		entityinstancetypeentityuuid, 
		entityinstancecreateddate, 
		entityinstancemodifieddate, 
		entityinstancestartdate, 
		entityinstanceenddate,		
		entityinstanceexternalid, 
		entityinstanceexternalsystemuuid,
		entityinstancemodifiedbyuuid, 
		entityinstancerefid,
		entityinstancerefuuid,
		entityinstanceentitytemplatename,
		entityinstancetype,
		entityinstanceexternalsystementityuuid,
		entityinstancedeleted,
		entityinstancedraft,	
		entityinstancenameuuid
		)
	SELECT 
		create_customerowner,
		create_customerparentuuid,  
		(select entitytemplateuuid from entity.entitytemplate where entitytemplatename = 'Customer'),
		(select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer'),
		now(), 
		now(), 
		case when tempcustomerdraft = true
			then null
			else now() 
		end, 
		null,
		create_customerbillingid, 
		null,
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedby),  
		null,
		null,
		'Customer',
		create_customername,
		(select entityinstanceuuid from entity.entityinstance 
			where entityinstanceentitytemplatename = 'System Tag' 
				and entityinstanceoriginalid = tempbillingsystemid 
				and entityinstanceuuid = create_customerbillingsystemid),
		tempcustomerdeleted,
		tempcustomerdraft,
		'lm_5f7e176e-93d6-4b6e-bf7b-a8b115bfc403' -- dummy data to change later
    Returning entityinstanceuuid into create_customerentityuuid;

-- if the entityinstanceownerentityuuid isNull then set the owner to itself.  

	update entity.entityinstance
	set entityinstanceownerentityuuid = create_customerentityuuid
	where entityinstanceuuid = create_customerentityuuid
		and entityinstanceownerentityuuid isNull;

-- if the entityinstanceparententityuuid isNull then set the parent to itself.  

	update entity.entityinstance
	set entityinstanceparententityuuid = create_customerentityuuid
	where entityinstanceuuid = create_customerentityuuid
		and entityinstanceparententityuuid isNull;

-- if the entityinstancecornerstoneentityuuid isNull then set it to itself.  

	update entity.entityinstance
	set entityinstancecornerstoneentityuuid = create_customerentityuuid
	where entityinstanceuuid = create_customerentityuuid
		and entityinstancecornerstoneentityuuid isNull;

-----------------------------------------------------

-- Insert the customer and get back the customer id and uuid.

    INSERT INTO public.customer(customername,
                                customerstartdate,
                                customerlanguagetypeid,
                                customerlanguagetypeuuid,
                                customernamelanguagemasterid,
                                customerexternalid,
                                customerexternalsystemid,
                                customerexternalsystemuuid,
                                customermodifiedby)
    VALUES (create_customername,
            clock_timestamp(),
            templanguagetypeid,
            templanguagetypeuuid,
            4367,  -- dummy record to be cleaned up later.  
            create_customerbillingid,
            tempbillingsystemid,
            (select systaguuid from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
			where systagentityuuid = create_customerbillingsystemid),
            create_modifiedby)
    Returning customeruuid,customerid into create_customeruuid,tempcustomerid;

-- replace the dummy variables for languagemaster	

    INSERT INTO public.languagemaster(
			languagemastercustomerid,
			languagemastersourcelanguagetypeid,
			languagemastersource,
			languagemastermodifiedby)
	VALUES (
			tempcustomerid,
			templanguagetypeid,
			create_customername,
			create_modifiedby)
	Returning languagemasterid,languagemasteruuid into templanguagemasterid,templanguagemasteruuid;

-- update the entity instance and customer with the id and uuid
	update entity.entityinstance
	set entityinstanceoriginalid = tempcustomerid,
		entityinstanceoriginaluuid = create_customeruuid,
		entityinstancenameuuid = templanguagemasteruuid
	where entityinstanceuuid = create_customerentityuuid;

	update public.customer
	set customernamelanguagemasterid = templanguagemasterid
	where customerid = tempcustomerid;
	
-- get the diplay name set and created in language master and in the field instances
-- displayname

    INSERT INTO public.languagemaster(
		languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemasterrefuuid,
		languagemastermodifiedby)
    VALUES (
		tempcustomerid,
	    templanguagetypeid,
	    create_customername,
		create_customerentityuuid||'-customerdisplayname',
	    create_modifiedby)
    Returning languagemasterid,languagemasteruuid into templanguagemasterid,templanguagemasteruuid;

	INSERT INTO entity.entityfieldinstance(
			entityfieldinstanceentityinstanceentityuuid, 
			entityfieldinstanceownerentityuuid, 
			entityfieldinstancevalue, 
			entityfieldinstancevaluelanguagemasteruuid, 
			entityfieldinstancevaluelanguagetypeentityuuid, 
			entityfieldinstancecreateddate, 
			entityfieldinstancemodifieddate, 
			entityfieldinstanceentityfieldentityuuid, 
			entityfieldinstancemodifiedbyuuid,
			entityfieldinstanceentityfieldname)
		select 
			entityinstanceuuid,
			entityinstanceownerentityuuid,
			create_customername,
			templanguagemasteruuid,
			(select entityinstanceuuid from entity.entityinstance 
				where entityinstanceentitytemplatename = 'System Tag'
					and entityinstanceoriginalid = templanguagetypeid ),  -- shouldn't this be what was passed in
			now(),
			now(),
			entityfielduuid,
			entitytemplatemodifiedbyuuid,
			entityfieldname
		from entity.entityinstance
			inner join entity.entitytemplate
				on entityinstanceentitytemplateentityuuid = entitytemplateuuid
			inner join entity.entityfield
				on entityfieldentitytemplateentityuuid = entitytemplateuuid	
					and entityfieldname = 'customerdisplayname'		
			left join entity.entityfieldinstance
				on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
					and entityfieldinstanceentityfieldentityuuid = entityfielduuid
		where entityfieldinstanceuuid isNull;

-- customerlanguagetypeuuid

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	select 
		entityinstanceuuid,
		entityinstanceownerentityuuid,
		(select systaguuid from public.systag where systagid = templanguagetypeid),   -- shouldn't this be what was passed in
		(select entityinstanceuuid from entity.entityinstance 
			where entityinstanceentitytemplatename = 'System Tag'
				and entityinstanceoriginalid = templanguagetypeid ),  -- shouldn't this be what was passed in
		now(),
		now(),
		entityfielduuid,
		entitytemplatemodifiedbyuuid,
		entityfieldname
	from entity.entityinstance
		inner join entity.entitytemplate
			on entityinstanceentitytemplateentityuuid = entitytemplateuuid
		inner join entity.entityfield
			on entityfieldentitytemplateentityuuid = entitytemplateuuid	
				and entityfieldname = 'customerlanguagetypeentityuuid'
		left join entity.entityfieldinstance
			on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
				and entityfieldinstanceentityfieldentityuuid = entityfielduuid
	where entityfieldinstanceuuid isNull;

-- customertypeuuid

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	select 
		entityinstanceuuid,
		entityinstanceownerentityuuid,
		'9b7b06b3-d756-4854-8b70-da3c13b35ad6',   
		(select entityinstanceuuid from entity.entityinstance 
			where entityinstanceentitytemplatename = 'System Tag'
				and entityinstanceoriginalid = templanguagetypeid ),  -- shouldn't this be what was passed in
		now(),
		now(),
		entityfielduuid,
		entitytemplatemodifiedbyuuid,
		entityfieldname
	from entity.entityinstance
		inner join entity.entitytemplate
			on entityinstanceentitytemplateentityuuid = entitytemplateuuid
		inner join entity.entityfield
			on entityfieldentitytemplateentityuuid = entitytemplateuuid	
				and entityfieldname = 'customertypeuuid'		 
		left join entity.entityfieldinstance
			on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
				and entityfieldinstanceentityfieldentityuuid = entityfielduuid
	where entityfieldinstanceuuid isNull;

-- Add the languagetype to customer reqeusted languages

	insert into customerrequestedlanguage 
		(customerrequestedlanguagecustomerid,
	     customerrequestedlanguagelanguageid,
	      customerrequestedlanguagemodifiedby)
	select tempcustomerid,
			systagid,
			create_modifiedby
	from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
				where systagentityuuid = any(create_languagetypeuuids);

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_customer_create(text,uuid,uuid,text,uuid,boolean,boolean,uuid[],bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_create(text,uuid,uuid,text,uuid,boolean,boolean,uuid[],bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_create(text,uuid,uuid,text,uuid,boolean,boolean,uuid[],bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_create(text,uuid,uuid,text,uuid,boolean,boolean,uuid[],bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_customer_create_tendrel(text,uuid,uuid,text,uuid,boolean,boolean,text,text,text,text,text,uuid,uuid[],text,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_customer_create_tendrel(IN create_customername text, OUT create_customeruuid text, OUT create_customerentityuuid uuid, OUT create_siteuuid text, OUT create_siteentityuuid uuid, IN create_customerparentuuid uuid, IN create_customerowner uuid, IN create_customerbillingid text, IN create_customerbillingsystemid uuid, IN create_customerdeleted boolean, IN create_customerdraft boolean, INOUT create_adminfirstname text, INOUT create_adminlastname text, IN create_adminemailaddress text, IN create_adminphonenumber text, IN create_adminidentityid text, IN create_adminidentitysystemuuid uuid, OUT create_adminid bigint, OUT create_adminuuid text, IN create_languagetypeuuids uuid[], IN create_timezone text, IN create_modifiedby bigint, OUT testlog text)
 LANGUAGE plpgsql
AS $procedure$
Declare

/*

	entity.crud_customer_create_tendrel(
		create_customername => text, 
		create_customeruuid => text, 
		create_customerentityuuid => uuid, 
		create_siteuuid => text, 
		create_siteentityuuid => uuid, 
		create_customerparentuuid => uuid, 
		create_customerowner => uuid, 
		create_customerbillingid => text, 
		create_customerbillingsystemid => text, 
		create_customerdeleted => boolean, 
		create_customerdraft => boolean, 
		create_adminfirstname => text, 
		create_adminlastname => text, 
		create_adminemailaddress => text, 
		create_adminphonenumber => text, 
		create_adminidentityid => text, 
		create_adminidentitysystemuuid => text, 
		create_adminid => text, 
		create_adminuuid => text, 
		create_languagetypeuuids => uuid[], 
		create_timezone => text, 
		create_modifiedby => bigint, 
		testlog => text)




-- generic version

call entity.crud_customer_create_tendrel(
	'Test'||now()::text, -- IN create_customername text,
	null, -- OUT create_customeruuid text,
	null, -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
	null, -- OUT create_siteuuid text,
	null, -- OUT create_siteentityuuid uuid	
	null, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
	null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
	('Bill'||now())::text, -- IN create_customerbillingid text,
	('c486a0d3-7c44-4129-9629-53920de84215'::text)::uuid, --	IN create_customerbillingsystemid uuid,
	null,
	null,
	'admin', --	create_adminfirstname
	'ln'||now()::text,	-- create_adminlastname  
	'admin@ln'||now()::text,	-- create_adminemailaddress 
	null,	-- create_adminphonenumber 
	'identity'||now()::text, --	create_adminidentityid 
	null, -- create_adminidentitysystemuuid text,
	null, -- create_adminid bigint,
	null, -- create_adminuuid text,
	ARRAY['bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'::uuid], -- IN create_languagetypeuuids uuid[],
	null,
	337::bigint, -- IN create_modifiedby bigint,
	null
	);
	
 */

Begin

-- default timezonee to UTC if there is no timezone
if create_timezone isNull
	then create_timezone = 'UTC' ;
end if;

-- create the customer/owner.  Pass through the data sent in.
-- FUTURE:  How will he handle Free tier?  Maybe a new customer type passed in during create?  

call entity.crud_customer_create(
		create_customername := create_customername,
		create_customeruuid := create_customeruuid,
		create_customerentityuuid:= create_customerentityuuid,
		create_customerparentuuid := create_customerparentuuid,
		create_customerowner := create_customerowner,
		create_customerbillingid := create_customerbillingid,
		create_customerbillingsystemid := create_customerbillingsystemid,
		create_customerdeleted := create_customerdeleted,
		create_customerdraft := create_customerdraft,
		create_languagetypeuuids := create_languagetypeuuids,
		create_modifiedby := create_modifiedby
	);

call entity.crud_admin_create(
		create_adminfirstname := create_adminfirstname,
		create_adminlastname := create_adminlastname,
		create_adminemailaddress := create_adminemailaddress,
		create_adminphonenumber := create_adminphonenumber,
		create_adminidentityid := create_adminidentityid,
		create_adminidentitysystemuuid := create_adminidentitysystemuuid,
		create_adminid := create_adminid,
		create_adminuuid := create_adminuuid,
		create_customerentityuuid := create_customerentityuuid,
		create_languagetypeuuids := create_languagetypeuuids,
		create_modifiedby := create_modifiedby
	);

-- create the initial site/location.  

call entity.crud_location_create(
		create_locationownerentityuuid := create_customerentityuuid, 
		create_locationparententityuuid := null, 
		create_locationcornerstoneentityuuid := null, 
		create_locationcornerstoneorder := null, 
		create_locationtaguuid := null, 
		create_locationtag := 'site', 
		create_locationname := 'My Site', 
		create_locationdisplayname := 'My Site', 
		create_locationscanid := null, 
		create_locationtimezone := create_timezone, 
		create_languagetypeuuid := create_languagetypeuuids[1], 
		create_locationexternalid := null, 
		create_locationexternalsystemuuid := null, 
		create_locationlatitude := null, 
		create_locationlongitude := null, 
		create_locationradius := null, 
		create_locationdeleted := null, 
		create_locationdraft := null, 
		create_locationentityuuid := create_siteentityuuid, 
		create_modifiedbyid := create_modifiedby
	);

-- enable timeclock
-- call entity.enable_timesheet(
-- 				create_customer_uuid := create_customerentityuuid,
-- 				create_original_customer_uuid := null,
-- 				create_site_uuid :=create_siteentityuuid,
-- 				create_original_site_uuid := null,
-- 				create_language_type_uuid := create_languagetypeuuids[1],
-- 				create_original_language_type_uuid := null,
-- 				create_timezone := create_timezone,
-- 				create_modifiedby := create_modifiedby);

-- enable pinpoint
-- call entity.enable_pinpoint(
-- 				create_customer_uuid := create_customerentityuuid,
-- 				create_original_customer_uuid := null,
-- 				create_site_uuid :=create_siteentityuuid,
-- 				create_original_site_uuid := null,
-- 				create_language_type_uuid := create_languagetypeuuids[1],
-- 				create_original_language_type_uuid := null,
-- 				create_timezone := create_timezone,
-- 				create_modifiedby := create_modifiedby);

-- enable checklist
-- call entity.enable_checklist(
-- 				create_customer_uuid := create_customerentityuuid,
-- 				create_original_customer_uuid := null,
-- 				create_site_uuid :=create_siteentityuuid,
-- 				create_original_site_uuid := null,
-- 				create_language_type_uuid := create_languagetypeuuids[1],
-- 				create_original_language_type_uuid := null,
-- 				create_timezone := create_timezone,
-- 				create_modifiedby := create_modifiedby);

-- enable runtime
call entity.enable_runtime(
				create_customer_uuid := create_customerentityuuid,
				create_original_customer_uuid := null,
				create_site_uuid :=create_siteentityuuid,
				create_original_site_uuid := null,
				create_language_type_uuid := create_languagetypeuuids[1],
				create_original_language_type_uuid := null,
				modified_by := create_modifiedby,
				timezone := create_timezone,
				testlog := testlog
			);

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_customer_create_tendrel(text,uuid,uuid,text,uuid,boolean,boolean,text,text,text,text,text,uuid,uuid[],text,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_create_tendrel(text,uuid,uuid,text,uuid,boolean,boolean,text,text,text,text,text,uuid,uuid[],text,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_create_tendrel(text,uuid,uuid,text,uuid,boolean,boolean,text,text,text,text,text,uuid,uuid[],text,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_create_tendrel(text,uuid,uuid,text,uuid,boolean,boolean,text,text,text,text,text,uuid,uuid[],text,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_customer_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_customer_delete(IN create_customerownerentityuuid uuid, IN create_customerentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

FUTURE:  Just have this call entity.crud_entityinstance_delete(create_entityinstanceownerentityuuid, create_entityinstanceentityuuid, create_modifiedbyid)

-- tests needed
	-- no owner isNull
		call entity.crud_customer_delete(
			null, -- IN create_customerownerentityuuid uuid,
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_customerentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_customer_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_customerownerentityuuid uuid,
			null, -- IN create_customerentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_customer_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_customerownerentityuuid uuid,
			'39709647-4012-4a49-977c-45286e565419', -- IN create_customerentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_customer_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_customerownerentityuuid uuid,
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_customerentityuuid uuid,	
			337)

	-- reset the customer
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- use this to find customers to work with
select * 
from entity.crud_customer_read_full(null,null, null, true, null,null, null,null)
order by customerid asc

-- how to check if the update was successful
select * from entity.entityinstance where entityinstancedeleted = true

*/

-- check for owner 

if create_customerownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for field

if create_customerentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the field record to deleted

update entity.entityinstance
set entityinstancedeleted = true,
	entityinstancemodifieddate = now(),
	entityinstanceenddate = now(),
	entityinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entityinstanceownerentityuuid = create_customerownerentityuuid
	and entityinstanceuuid = create_customerentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_customer_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_customer_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_customer_read_min(read_customerentityuuid uuid, read_customerownerentityuuid uuid, read_customerparententityuuid uuid, read_allcustomers boolean, read_customersenddeleted boolean, read_customersenddrafts boolean, read_customersendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(customerid bigint, customeruuid text, customerentityuuid uuid, customerownerentityuuid uuid, customerparententityuuid uuid, customercornerstoneentityuuid uuid, customercornerstoneorder integer, customernameuuid text, customerdisplaynameuuid text, customertypeentityuuid uuid, customercreateddate timestamp with time zone, customermodifieddate timestamp with time zone, customerstartdate timestamp with time zone, customerenddate timestamp with time zone, customermodifiedbyuuid text, customerexternalid text, customerexternalsystementityuuid uuid, customerlanguagetypeentityuuid uuid, customersenddeleted boolean, customersenddrafts boolean, customersendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	tempcustomersenddeleted boolean[];
	tempcustomersenddrafts boolean[];
	tempcustomersendinactive boolean[];
	tendreluuid uuid;
BEGIN

-- Curently ignores language translation.  We should change this in the future for customer. 
-- Might want to add a parameter to send in active as a boolean

/*  Examples

-- specific customer
select * 
from entity.crud_customer_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, false,null,null,null, null)
order by customeid desc

-- all customers
select * from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)

select * from entity.crud_customer_read_min(null,null, null, true, null,null,null,'190d8c53-b076-460d-8c10-8ca35396429a')

-- customers to a specific owner
select * 
from entity.crud_customer_read_min(null,'f90d618d-5de7-4126-8c65-0afb700c6c61',null,false,null,null,null, null)

-- customers to a specific parent
select * 
from entity.crud_customer_read_min(null,null,'f90d618d-5de7-4126-8c65-0afb700c6c61',false, null,null,null,null)

*/

if  read_customersenddeleted = false
	then tempcustomersenddeleted = Array[false];
	else tempcustomersenddeleted = Array[true,false];
end if;

if  read_customersenddrafts = false
	then tempcustomersenddrafts = Array[false];
	else tempcustomersenddrafts = Array[true,false];
end if;

if   read_customersendinactive = false
	then tempcustomersendinactive = Array[true];
	else tempcustomersendinactive = Array[true,false];
end if;

if read_allcustomers = true
	then
	return query 
		select *
		from (SELECT 
	    entityinstanceoriginalid as customerid,
	    entityinstanceoriginaluuid as customeruuid,
	    entityinstanceuuid as customerentityuuid,
	    entityinstanceownerentityuuid as customerownerentityuuid,
	    entityinstanceparententityuuid as customerparententityuuid,
		entityinstancecornerstoneentityuuid as customercornerstoneentityuuid,
		entityinstancecornerstoneorder as customercornerstoneorder,
		entityinstancenameuuid as customernameuuid,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
	    custtype.entityfieldinstancevalue::uuid as customertypeentityuuid,
	    entityinstancecreateddate as customercreateddate,
	    entityinstancemodifieddate as customermodifieddate,
	    entityinstancestartdate as customerstartdate,	
	    entityinstanceenddate as customerenddate,
	    entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    entityinstanceexternalid as customerexternalid,
	    entityinstanceexternalsystementityuuid as customerexternalsystementityid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeentityuuid,
		entityinstancedeleted, 
		entityinstancedraft,
	case when entityinstancedeleted then false
			when entityinstancedraft then false
			when entityinstanceenddate::Date > now()::date 
				and entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance
		JOIN entity.entityfieldinstance efi 
			on entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and entityinstanceentitytemplatename = 'Customer'
				and entityinstancedeleted = ANY (tempcustomersenddeleted)
				and entityinstancedraft = ANY (tempcustomersenddrafts)
		join entity.entityfieldinstance custtype
			on entityinstanceuuid = custtype.entityfieldinstanceentityinstanceentityuuid
				and custtype.entityfieldinstanceentityfieldname = 'customertypeuuid'
		join entity.entityfieldinstance dn
			on entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname') as foo
		where foo.entityinstanceactive = Any (tempcustomersendinactive) ;
		return;
end if;

if read_customerownerentityuuid notNull
then 
	return query 
		select *
		from (SELECT 
	    entityinstanceoriginalid as customerid,
	    entityinstanceoriginaluuid as customeruuid,
	    entityinstanceuuid as customerentityuuid,
	    entityinstanceownerentityuuid as customerownerentityuuid,
	    entityinstanceparententityuuid as customerparententityuuid,
		entityinstancecornerstoneentityuuid as customercornerstoneentityuuid,
		entityinstancecornerstoneorder as customercornerstoneorder,
		entityinstancenameuuid as customernameuuid,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
	    custtype.entityfieldinstancevalue::uuid as customertypeentityuuid,
	    entityinstancecreateddate as customercreateddate,
	    entityinstancemodifieddate as customermodifieddate,
	    entityinstancestartdate as customerstartdate,	
	    entityinstanceenddate as customerenddate,
	    entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    entityinstanceexternalid as customerexternalid,
	    entityinstanceexternalsystementityuuid as customerexternalsystementityid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeentityuuid,
		entityinstancedeleted, 
		entityinstancedraft,
	case when entityinstancedeleted then false
			when entityinstancedraft then false
			when entityinstanceenddate::Date > now()::date 
				and entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance
		JOIN entity.entityfieldinstance efi 
			on entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and entityinstanceentitytemplatename = 'Customer'
				and entityinstanceownerentityuuid = read_customerownerentityuuid
				and entityinstancedeleted = ANY (tempcustomersenddeleted)
				and entityinstancedraft = ANY (tempcustomersenddrafts)
		join entity.entityfieldinstance custtype
			on entityinstanceuuid = custtype.entityfieldinstanceentityinstanceentityuuid
				and custtype.entityfieldinstanceentityfieldname = 'customertypeuuid'
		join entity.entityfieldinstance dn
			on entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname') as foo
		where foo.entityinstanceactive = Any (tempcustomersendinactive) ;
		return;
end if;

if read_customerparententityuuid notNull
then 
	return query 
		select *
		from (SELECT 
	    entityinstanceoriginalid as customerid,
	    entityinstanceoriginaluuid as customeruuid,
	    entityinstanceuuid as customerentityuuid,
	    entityinstanceownerentityuuid as customerownerentityuuid,
	    entityinstanceparententityuuid as customerparententityuuid,
		entityinstancecornerstoneentityuuid as customercornerstoneentityuuid,
		entityinstancecornerstoneorder as customercornerstoneorder,
		entityinstancenameuuid as customernameuuid,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
	    custtype.entityfieldinstancevalue::uuid as customertypeentityuuid,
	    entityinstancecreateddate as customercreateddate,
	    entityinstancemodifieddate as customermodifieddate,
	    entityinstancestartdate as customerstartdate,	
	    entityinstanceenddate as customerenddate,
	    entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    entityinstanceexternalid as customerexternalid,
	    entityinstanceexternalsystementityuuid as customerexternalsystementityid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeentityuuid,
		entityinstancedeleted, 
		entityinstancedraft,
	case when entityinstancedeleted then false
			when entityinstancedraft then false
			when entityinstanceenddate::Date > now()::date 
				and entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance
		JOIN entity.entityfieldinstance efi 
			on entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and entityinstanceentitytemplatename = 'Customer'
				and entityinstanceparententityuuid = read_customerparententityuuid
				and entityinstancedeleted = ANY (tempcustomersenddeleted)
				and entityinstancedraft = ANY (tempcustomersenddrafts)
		join entity.entityfieldinstance custtype
			on entityinstanceuuid = custtype.entityfieldinstanceentityinstanceentityuuid
				and custtype.entityfieldinstanceentityfieldname = 'customertypeuuid'
		join entity.entityfieldinstance dn
			on entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname') as foo
		where foo.entityinstanceactive = Any (tempcustomersendinactive) ;
		return;
end if;

return query 
		select *
		from (SELECT 
	    entityinstanceoriginalid as customerid,
	    entityinstanceoriginaluuid as customeruuid,
	    entityinstanceuuid as customerentityuuid,
	    entityinstanceownerentityuuid as customerownerentityuuid,
	    entityinstanceparententityuuid as customerparententityuuid,
		entityinstancecornerstoneentityuuid as customercornerstoneentityuuid,
		entityinstancecornerstoneorder as customercornerstoneorder,
		entityinstancenameuuid as customernameuuid,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
	    custtype.entityfieldinstancevalue::uuid as customertypeentityuuid,
	    entityinstancecreateddate as customercreateddate,
	    entityinstancemodifieddate as customermodifieddate,
	    entityinstancestartdate as customerstartdate,	
	    entityinstanceenddate as customerenddate,
	    entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    entityinstanceexternalid as customerexternalid,
	    entityinstanceexternalsystementityuuid as customerexternalsystementityid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeentityuuid,
		entityinstancedeleted, 
		entityinstancedraft,
	case when entityinstancedeleted then false
			when entityinstancedraft then false
			when entityinstanceenddate::Date > now()::date 
				and entityinstancestartdate < now() then false
			else true
	end as entityinstanceactive
	from entity.entityinstance
		JOIN entity.entityfieldinstance efi 
			on entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and entityinstanceuuid = read_customerentityuuid
				and entityinstancedeleted = ANY (tempcustomersenddeleted)
				and entityinstancedraft = ANY (tempcustomersenddrafts)
		join entity.entityfieldinstance custtype
			on entityinstanceuuid = custtype.entityfieldinstanceentityinstanceentityuuid
				and custtype.entityfieldinstanceentityfieldname = 'customertypeuuid'
		join entity.entityfieldinstance dn
			on entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname') as foo
		where foo.entityinstanceactive = Any (tempcustomersendinactive) ;
		return;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_customer_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_customer_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_customer_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_customer_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_customer_update(text,text,text,uuid,uuid,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,uuid,text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_customer_update(IN update_customername text, IN update_customerdisplayname text, IN update_customeruuid text, IN update_customerentityuuid uuid, IN update_customerparentuuid uuid, IN update_customerowner uuid, IN update_customerbillingid text, IN update_customerbillingsystemid uuid, IN update_customerdeleted boolean, IN update_customerdraft boolean, IN update_customerstartdate timestamp with time zone, IN update_customerenddate timestamp with time zone, IN update_languagetypeuuid uuid, IN update_modifiedby text)
 LANGUAGE plpgsql
AS $procedure$
Declare

	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templocationid bigint;

Begin

if update_languagetypeuuid isNull 
	then update_languagetypeuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
End if;

UPDATE entity.entityinstance
	SET entityinstanceparententityuuid = case when update_customerparentuuid notnull 
										then update_customerparentuuid
										else entityinstanceparententityuuid end,
		entityinstancetype = case when update_customername notnull and (coalesce(update_customername,'') <> '')
										then update_customername
										else entityinstancetype end,
		entityinstancestartdate = case when update_customerstartdate notnull 
								then update_customerstartdate
								else entityinstancestartdate end,
		entityinstancedraft = update_customerdraft,
		entityinstancedeleted = update_customerdeleted,
		entityinstanceenddate = case 	when update_customerdeleted = true 
											and entityinstanceenddate isNull
											and update_customerenddate isNull then now()
										when update_customerdeleted = true 
											and entityinstanceenddate isNull
											and update_customerenddate notNull then update_customerenddate 
										when update_customerdeleted = true 
											and entityinstanceenddate notNull
											and update_customerenddate isNull then entityinstanceenddate
										when update_customerdeleted = true and entityinstanceenddate notNull
											and update_customerenddate notNull and update_customerenddate <> entityinstanceenddate
											then update_customerenddate	
										else null
									end,
		entityinstancemodifieddate =now(),
		entityinstancemodifiedbyuuid = update_modifiedby
WHERE entityinstanceuuid = update_customerentityuuid;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_customerentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);

if  update_customername notNull and (coalesce(update_customername,'') <> '')
	then
		update public.languagetranslations
			set languagetranslationvalue = update_customername
		from entity.entityinstance
			where entityinstanceuuid = update_customerentityuuid
				and languagetranslationmasterid = (select languagemasterid from languagemaster where languagemasteruuid = entityinstancenameuuid)
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_customername;
		
		update languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_customername,
				languagemastermodifieddate = now(),
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_modifiedby),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'		
			from entity.entityinstance
			where entityinstanceuuid = update_customerentityuuid
				and languagemasteruuid = entityinstancenameuuid
				and languagemastersource <> update_customername;
end if;

-- update display name
if  update_customerdisplayname notNull and (coalesce(update_customerdisplayname,'') <> '')
	then
		update public.languagetranslations
			set languagetranslationvalue = update_customerdisplayname
		from entity.entityinstance
		where languagetranslationmasterid = (select languagemasterid 
												from languagemaster 
												where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
																			from entity.entityfieldinstance
																			where entityfieldinstanceentityinstanceentityuuid = update_customerentityuuid
																				and  entityfieldinstanceentityfieldentityuuid = 'd15bb9c2-0601-4e4f-9009-c791a40be191'))
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_customerdisplayname;
				
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_customerdisplayname,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_modifiedby),
				languagemastermodifieddate = now(),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'					
		where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
									from entity.entityfieldinstance
									where entityfieldinstanceentityinstanceentityuuid = update_customerentityuuid
										and  entityfieldinstanceentityfieldentityuuid = 'd15bb9c2-0601-4e4f-9009-c791a40be191')
				and languagemastersource <> update_customerdisplayname;

		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_customerdisplayname,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_modifiedby
		where entityfieldinstanceentityinstanceentityuuid = update_customerentityuuid
				and  entityfieldinstanceentityfieldentityuuid = 'd15bb9c2-0601-4e4f-9009-c791a40be191'
				and entityfieldinstancevalue <> update_customerdisplayname;
end if;

-- update customerlanguagetypeuuid

if  update_languagetypeuuid notNull 
	then
		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_languagetypeuuid,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_modifiedby
		where entityfieldinstanceentityinstanceentityuuid = update_customerentityuuid
				and  entityfieldinstanceentityfieldentityuuid = 'c51fbd4a-dbf5-40a2-892c-edaf81bee4ad';
end if;

	

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_customer_update(text,text,text,uuid,uuid,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,uuid,text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_update(text,text,text,uuid,uuid,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,uuid,text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_update(text,text,text,uuid,uuid,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,uuid,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_customer_update(text,text,text,uuid,uuid,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,uuid,text) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_customerrequestedlanguage_create(uuid,uuid,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_customerrequestedlanguage_create(IN create_customerrequestedlanguageownerentityuuid uuid, IN create_languagetype_id uuid, IN create_customerrequestedlanguagedeleted boolean, IN create_customerrequestedlanguagedraft boolean, OUT create_customerrequestedlanguageid bigint, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	templanguagetypeid bigint;
	tempcustomerrequestedlanguageid bigint;
	tempcustomerid bigint;
	tempcustomerrequestedlanguagedeleted boolean;
	tempcustomerrequestedlanguagedraft boolean; 
Begin

/*

-- needs tests
	
*/

-- FUTURE:
	-- Check Instance and Template are of the same entity type.
	-- Use generic Entity Instance Read
	-- block duplicates or allow?  
	-- check for nulls in template

If create_customerrequestedlanguagedeleted isNull
	then tempcustomerrequestedlanguagedeleted = false;
	else tempcustomerrequestedlanguagedeleted = create_customerrequestedlanguagedeleted;
end if;

If create_customerrequestedlanguagedraft isNull
	then tempcustomerrequestedlanguagedraft = false;
	else tempcustomerrequestedlanguagedraft = create_customerrequestedlanguagedraft;
end if;

select customerid 
into tempcustomerid
from entity.crud_customer_read_min(create_customerrequestedlanguageownerentityuuid,null, null, false,null,null,null, null);

select systagid 
into templanguagetypeid
from entity.crud_systag_read_min(null,null,null, null, true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
where systagentityuuid = create_languagetype_id;

select customerrequestedlanguageid 
into tempcustomerrequestedlanguageid
from public.customerrequestedlanguage
where customerrequestedlanguagecustomerid = tempcustomerid
	and customerrequestedlanguagelanguageid = templanguagetypeid;
	

-- Check if the language already exists.  


if  tempcustomerrequestedlanguageid isNull 
	and templanguagetypeid notNull
	and tempcustomerid notNull
	then 
		INSERT INTO public.customerrequestedlanguage(
			customerrequestedlanguagecustomerid, 
			customerrequestedlanguagelanguageid, 
			customerrequestedlanguagestartdate, 
			customerrequestedlanguageenddate, 
			customerrequestedlanguagecreateddate, 
			customerrequestedlanguagemodifieddate, 
			customerrequestedlanguageexternalid, 
			customerrequestedlanguageexternalsystemid, 
			customerrequestedlanguagemodifiedby, 
			customerrequestedlanguagerefid, 
			customerrequestedlanguagesystemid)
		values(
			tempcustomerid,
			templanguagetypeid,
			now(),
			null,
			now(),	
			now(),
			null,
			null,
			create_modifiedbyid,
			null,
			null			
		)
		Returning customerrequestedlanguageid into create_customerrequestedlanguageid;
	else create_customerrequestedlanguageid = tempcustomerrequestedlanguageid;
End if;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_customerrequestedlanguage_create(uuid,uuid,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_create(uuid,uuid,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_create(uuid,uuid,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_create(uuid,uuid,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_customerrequestedlanguage_delete(uuid,text,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_customerrequestedlanguage_delete(IN create_customerownerentityuuid uuid, IN create_language_id text, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare

Begin

/*

-- tests needed

*/

-- check for owner 

if create_customerownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- update the field record to deleted

update public.customerrequestedlanguage
set customerrequestedlanguageenddate = now(),
	customerrequestedlanguagemodifieddate = now(),
	customerrequestedlanguagemodifiedby = create_modifiedbyid
where customerrequestedlanguagecustomerid = (select customerid 
											from entity.crud_customer_read_min(create_customerownerentityuuid,null, null, false,null,null,null, null))
	and customerrequestedlanguageuuid = create_language_id;
End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_customerrequestedlanguage_delete(uuid,text,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_delete(uuid,text,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_delete(uuid,text,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_delete(uuid,text,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_customerrequestedlanguage_update(bigint,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_customerrequestedlanguage_update(IN update_customerrequestedlanguageid bigint, IN update_customerrequestedlanguageownerentityuuid uuid, IN update_languagetype_id uuid, IN update_customerrequestedlanguagedeleted boolean, IN update_customerrequestedlanguagedraft boolean, IN update_customerrequestedlanguagestartdate timestamp with time zone, IN update_customerrequestedlanguageenddate timestamp with time zone, IN update_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare

Begin

/*

-- needs tests
	
*/

UPDATE public.customerrequestedlanguage
	SET customerrequestedlanguagestartdate = case when update_customerrequestedlanguagestartdate notnull 
											then update_customerrequestedlanguagestartdate
											else customerrequestedlanguagestartdate end,
		customerrequestedlanguageenddate = update_customerrequestedlanguageenddate, 
		customerrequestedlanguagemodifieddate = now(),
		customerrequestedlanguagemodifiedby = update_modifiedbyid
	WHERE customerrequestedlanguageid = update_customerrequestedlanguageid; 

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_customerrequestedlanguage_update(bigint,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_update(bigint,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_update(bigint,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_customerrequestedlanguage_update(bigint,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitydescription_create(uuid,uuid,uuid,text,text,text,text,uuid,uuid,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitydescription_create(IN create_entitydescriptionownerentityuuid uuid, IN create_entitytemplateentityuuid uuid, IN create_entityfieldentityuuid uuid, IN create_entitydescriptionname text, IN create_entitydescriptionsoplink text, IN create_entitydescriptionfile text, IN create_entitydescriptionicon text, IN create_entitydescriptionmimetypeuuid uuid, IN create_languagetypeuuid uuid, IN create_entitydescriptiondeleted boolean, IN create_entitydescriptiondraft boolean, OUT create_entitydescriptionentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
 
Declare
	templanguagetypeentityuuid uuid;	
	tempentitydescriptionownerentityuuid uuid;
	tempcustomeruuid text;
	tempcustomerid bigint;
	tendreluuid uuid;
	tempentitydescriptionmimetypeuuid uuid;
	tempentitydescriptiondeleted boolean;
	tempentitydescriptiondraft boolean;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templanguagemasteruuid text;	
	
Begin

/*



-- tests needed
	-- need a valid tempalte and filed to work with.  Probably geneerate these.
	select * from entity.entityfield
	where entityfieldownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

	-- mime types
	select * from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,null)


	-- bogus owner fail
	call entity.crud_entitydescription_create(
		'c77db174-7b16-4f47-b138-b56766375449', --IN create_entitydescriptionownerentityuuid uuid,
		'274541f8-5c9f-4e8c-9982-08c35b79e2b3', --	IN create_entitytemplateentityuuid uuid,
		'07d6a055-2d39-4f0f-bcc1-0c61e5cabe0c', --	IN create_entityfieldentityuuid uuid,
		'Test Description '||now()::text, --	IN create_entitydescriptionname text,
		null, --	IN create_entitydescriptionsoplink text,
		null, --	IN create_entitydescriptionfile text,
		null, --	IN create_entitydescriptionicon text,
		null, --	IN create_entitydescriptionmimetypeuuid uuid,
		null, --	IN create_languagetypeuuid uuid,
		null, --	IN create_entitydescriptiondeleted boolean,
		null, --	IN create_entitydescriptiondraft boolean,
		null, -- OUT create_entitydescriptionentityuuid uuid,
		337 )

	-- no field or template then error 
	call entity.crud_entitydescription_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --IN create_entitydescriptionownerentityuuid uuid,
		null, --	IN create_entitytemplateentityuuid uuid,
		null, --	IN create_entityfieldentityuuid uuid,
		'Test Description '||now()::text, --	IN create_entitydescriptionname text,
		null, --	IN create_entitydescriptionsoplink text,
		null, --	IN create_entitydescriptionfile text,
		null, --	IN create_entitydescriptionicon text,
		null, --	IN create_entitydescriptionmimetypeuuid uuid,
		null, --	IN create_languagetypeuuid uuid,
		null, --	IN create_entitydescriptiondeleted boolean,
		null, --	IN create_entitydescriptiondraft boolean,
		null, -- OUT create_entitydescriptionentityuuid uuid,
		337 )



	-- no descriptionname, soplink, file, or icon the error
	call entity.crud_entitydescription_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --IN create_entitydescriptionownerentityuuid uuid,
		'274541f8-5c9f-4e8c-9982-08c35b79e2b3', --	IN create_entitytemplateentityuuid uuid,
		'07d6a055-2d39-4f0f-bcc1-0c61e5cabe0c', --	IN create_entityfieldentityuuid uuid,
		null, --	IN create_entitydescriptionname text,
		null, --	IN create_entitydescriptionsoplink text,
		null, --	IN create_entitydescriptionfile text,
		null, --	IN create_entitydescriptionicon text,
		null, --	IN create_entitydescriptionmimetypeuuid uuid,
		null, --	IN create_languagetypeuuid uuid,
		null, --	IN create_entitydescriptiondeleted boolean,
		null, --	IN create_entitydescriptiondraft boolean,
		null, -- OUT create_entitydescriptionentityuuid uuid,
		337 )
	
	-- add description to template
	call entity.crud_entitydescription_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --IN create_entitydescriptionownerentityuuid uuid,
		'274541f8-5c9f-4e8c-9982-08c35b79e2b3', --	IN create_entitytemplateentityuuid uuid,
		null, --	IN create_entityfieldentityuuid uuid,
		'Test Description '||now()::text, --	IN create_entitydescriptionname text,
		null, --	IN create_entitydescriptionsoplink text,
		null, --	IN create_entitydescriptionfile text,
		null, --	IN create_entitydescriptionicon text,
		null, --	IN create_entitydescriptionmimetypeuuid uuid,
		null, --	IN create_languagetypeuuid uuid,
		null, --	IN create_entitydescriptiondeleted boolean,
		null, --	IN create_entitydescriptiondraft boolean,
		null, -- OUT create_entitydescriptionentityuuid uuid,
		337 )

	-- add description to field 
	call entity.crud_entitydescription_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --IN create_entitydescriptionownerentityuuid uuid,
		null, --	IN create_entitytemplateentityuuid uuid,
		'07d6a055-2d39-4f0f-bcc1-0c61e5cabe0c', --	IN create_entityfieldentityuuid uuid,
		'Test Description '||now()::text, --	IN create_entitydescriptionname text,
		null, --	IN create_entitydescriptionsoplink text,
		null, --	IN create_entitydescriptionfile text,
		null, --	IN create_entitydescriptionicon text,
		null, --	IN create_entitydescriptionmimetypeuuid uuid,
		null, --	IN create_languagetypeuuid uuid,
		null, --	IN create_entitydescriptiondeleted boolean,
		null, --	IN create_entitydescriptiondraft boolean,
		null, -- OUT create_entitydescriptionentityuuid uuid,
		337 )

	-- need a test in the future loading a file.  

select * from entity.entitydescription
*/


tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if create_entitydescriptionownerentityuuid isNull
	then tempentitydescriptionownerentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61'::uuid; -- default is customer 0.  Could look this up instead.  
	else tempentitydescriptionownerentityuuid = create_entitydescriptionownerentityuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
					from entity.crud_customer_read_min(null,tempentitydescriptionownerentityuuid,null,false,null,null,null, null);

-- probably return an error if the entity is not set to a customer.  Need to sort this out.  
if tempcustomerid isNull
	then return;
end if;

-- setup the language type

if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,templanguagetypeentityuuid);

-- one of these can't be null. 

if 	(create_entitytemplateentityuuid isNull 
		and create_entityfieldentityuuid isNull)
	then return;
end if;

-- we need something to not be null

if 	(create_entitydescriptionname isNull and coalesce(create_entitydescriptionname, '') = ''
	and create_entitydescriptionsoplink isNull and coalesce(create_entitydescriptionname, '') = ''
	and create_entitydescriptionfile isNull and coalesce(create_entitydescriptionfile, '') = ''
	and create_entitydescriptionicon isNull and coalesce(create_entitydescriptionicon, '') = '')
	then return;
end if;

-- Check for valid mime type -- mime type is only for file.  

if create_entitydescriptionmimetypeuuid in (
	select systagentityuuid from entity.crud_systag_read_min(tendreluuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,templanguagetypeentityuuid)
	)
	then tempentitydescriptionmimetypeuuid = create_entitydescriptionmimetypeuuid;
	else tempentitydescriptionmimetypeuuid = null;
end if;

If create_entitydescriptiondeleted isNull
	then tempentitydescriptiondeleted = false;
	else tempentitydescriptiondeleted = create_entitydescriptiondeleted;
end if;

If create_entitydescriptiondraft isNull
	then tempentitydescriptiondraft = false;
	else tempentitydescriptiondraft = create_entitydescriptiondraft;
end if;

-- time to insert the base entity tables

-- insert name into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		create_entitydescriptionname,    
		create_modifiedbyid)  
	Returning languagemasteruuid into templanguagemasteruuid;

INSERT INTO entity.entitydescription(
	entitydescriptionownerentityuuid, 
	entitydescriptionentitytemplateentityuuid, 
	entitydescriptionentityfieldentityduuid, 
	entitydescriptionname, 
	entitydescriptionsoplink, 
	entitydescriptionfile, 
	entitydescriptionicon, 
	entitydescriptionlanguagemasteruuid, 
	entitydescriptioncreateddate, 
	entitydescriptionmodifieddate, 
	entitydescriptionstartdate, 
	entitydescriptionenddate, 
	entitydescriptionmodifiedby, 
	entitydescriptionexternalid, 
	entitydescriptionexternalsystementityuuid, 
	entitydescriptionrefid, 
	entitydescriptionrefuuid, 
	entitydescriptiondraft, 
	entitydescriptiondeleted, 
	entitydescriptionmimetypeuuid)
values(
	tempentitydescriptionownerentityuuid, 
	create_entitytemplateentityuuid , 
	create_entityfieldentityuuid , 
	create_entitydescriptionname, 
	create_entitydescriptionsoplink, 
	create_entitydescriptionfile, 
	create_entitydescriptionicon, 
	templanguagemasteruuid, 
	now(), 
	now(), 
	now(), 
	null, 
	(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid), 
	null, 
	null, 
	null, 
	null, 
	tempentitydescriptiondraft , 
	tempentitydescriptiondeleted, 
	tempentitydescriptionmimetypeuuid
)
	Returning entitydescriptionuuid into create_entitydescriptionentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitydescription_create(uuid,uuid,uuid,text,text,text,text,uuid,uuid,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_create(uuid,uuid,uuid,text,text,text,text,uuid,uuid,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_create(uuid,uuid,uuid,text,text,text,text,uuid,uuid,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_create(uuid,uuid,uuid,text,text,text,text,uuid,uuid,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitydescription_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitydescription_delete(IN create_entitydescriptionownerentityuuid uuid, IN create_entitydescriptionentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

-- tests needed

	-- may need to create some descriptions.
	
	-- no owner isNull
		call entity.crud_entitydescription_delete(
			null, -- IN create_entitytemplateownerentityuuid uuid,
			'4b04166f-4d91-4183-b0d4-e2072de41fc6', -- IN create_entitytemplateentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_entitydescription_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entitytemplateownerentityuuid uuid,
			null, -- IN create_entitytemplateentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_entitydescription_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entitytemplateownerentityuuid uuid,
			'4b04166f-4d91-4183-b0d4-e2072de41fc6', -- IN create_entitytemplateentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_entitydescription_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entitytemplateownerentityuuid uuid,
			'4b04166f-4d91-4183-b0d4-e2072de41fc6', -- IN create_entitytemplateentityuuid uuid,	
			337)

	-- reset the field
		update entity.entitydescription
		set entitydescriptiondeleted = false
		where entitydescriptionuuid = '4b04166f-4d91-4183-b0d4-e2072de41fc6'	

-- use this to find fields to work with
select entitytemplatename, * from  entity.entitytemplate order by entitytemplatecreateddate desc

-- how to check if the update was successful
select * from entity.entitydescription where entitydescriptiondeleted = true

*/

-- check for owner 

if create_entitydescriptionownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for template

if create_entitydescriptionentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the template record to deleted

update entity.entitydescription
set entitydescriptiondeleted = true,
	entitydescriptionmodifieddate = now(),
	entitydescriptionenddate = now(),
	entitydescriptionmodifiedby = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entitydescriptionownerentityuuid = create_entitydescriptionownerentityuuid
	and entitydescriptionuuid = create_entitydescriptionentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitydescription_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entitydescription_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entitydescription_read_min(read_ownerentityuuid uuid, read_entitydescriptionentityuuid uuid, read_entitytemplateentityuuid uuid, read_entityfieldentityuuid uuid, read_entitydescriptionsenddeleted boolean, read_entitydescriptionsenddrafts boolean, read_entitydescriptionsendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entitydescriptionuuid uuid, entitydescriptionownerentityuuid uuid, entitydescriptionentitytemplateentityuuid uuid, entitydescriptionentityfieldentityduuid uuid, entitydescriptionname text, entitydescriptionlanguagemasteruuid text, entitydescriptionsoplink text, entitydescriptionfile text, entitydescriptionicon text, entitydescriptioncreateddate timestamp with time zone, entitydescriptionmodifieddate timestamp with time zone, entitydescriptionstartdate timestamp with time zone, entitydescriptionenddate timestamp with time zone, entitydescriptionmodifiedby text, entitydescriptionexternalid text, entitydescriptionexternalsystementityuuid uuid, entitydescriptionrefid bigint, entitydescriptionrefuuid text, entitydescriptiondraft boolean, entitydescriptiondeleted boolean, entitydescriptionactive boolean, entitydescriptionmimetypeuuid uuid)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentitydescriptionsenddeleted boolean[]; 
	tempentitydescriptionsenddrafts  boolean[];  
	tempentitydescriptionsendinactive boolean[];
	tendreluuid uuid;
BEGIN

/*  Examples

-- all descriptions
select * from entity.crud_entitydescription_read_min(null, null, null,null, null, null,null,null)

-- all descriptions for an owner
select * from entity.crud_entitydescription_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,null, null, null,null,null)

-- descriptions for an entity
select * from entity.crud_entitydescription_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', 'f42f8873-37a0-450e-97c8-c223955b2f02', null,null, null, null,null,null)

-- all descriptions for a template
select * from entity.crud_entitydescription_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, '2de8bf04-15bd-4df9-b5bc-4eb7fbb8e37e',null, null, null,null,null)

-- all descriptions for a field
select * from entity.crud_entitydescription_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,'3b477e48-82d7-43fa-a8a4-757d4d5ad457', null, null,null,null)

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min(	tendreluuid, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,read_entitydescriptionsenddeleted, read_entitydescriptionsenddrafts,read_entitydescriptionsendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_entitydescriptionsenddeleted isNull and read_entitydescriptionsenddeleted = false
	then tempentitydescriptionsenddeleted = Array[false];
	else tempentitydescriptionsenddeleted = Array[true,false];
end if;

if read_entitydescriptionsenddrafts isNull and read_entitydescriptionsenddrafts = false
	then tempentitydescriptionsenddrafts = Array[false];
	else tempentitydescriptionsenddrafts = Array[true,false];
end if;

if read_entitydescriptionsendinactive isNull and read_entitydescriptionsendinactive = false
	then tempentitydescriptionsendinactive = Array[true];
	else tempentitydescriptionsendinactive = Array[true,false];
end if;

-- probably can do this cealner with less sql

if allowners = true and (read_entitydescriptionentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et.entitydescriptionuuid, 
				et.entitydescriptionownerentityuuid, 
				et.entitydescriptionentitytemplateentityuuid, 
				et.entitydescriptionentityfieldentityduuid, 
				et.entitydescriptionname, 
				et.entitydescriptionlanguagemasteruuid,
				et.entitydescriptionsoplink, 
				et.entitydescriptionfile, 
				et.entitydescriptionicon, 
				et.entitydescriptioncreateddate, 
				et.entitydescriptionmodifieddate, 
				et.entitydescriptionstartdate, 
				et.entitydescriptionenddate, 
				et.entitydescriptionmodifiedby, 
				et.entitydescriptionexternalid, 
				et.entitydescriptionexternalsystementityuuid, 
				et.entitydescriptionrefid, 
				et.entitydescriptionrefuuid, 
				et.entitydescriptiondraft, 
				et.entitydescriptiondeleted,
			case when et.entitydescriptiondeleted then false
			when et.entitydescriptiondraft then false
			when et.entitydescriptionstartdate::Date > now()::date 
				and et.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et.entitydescriptionmimetypeuuid
			FROM entity.entitydescription et
			where et.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
				 and et.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive
		) ;
		return;
end if;

if allowners = false and read_entitydescriptionentityuuid notNull  
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et2.entitydescriptionuuid, 
				et2.entitydescriptionownerentityuuid, 
				et2.entitydescriptionentitytemplateentityuuid, 
				et2.entitydescriptionentityfieldentityduuid, 
				et2.entitydescriptionname, 
				et2.entitydescriptionlanguagemasteruuid,
				et2.entitydescriptionsoplink, 
				et2.entitydescriptionfile, 
				et2.entitydescriptionicon, 
				et2.entitydescriptioncreateddate, 
				et2.entitydescriptionmodifieddate, 
				et2.entitydescriptionstartdate, 
				et2.entitydescriptionenddate, 
				et2.entitydescriptionmodifiedby, 
				et2.entitydescriptionexternalid, 
				et2.entitydescriptionexternalsystementityuuid, 
				et2.entitydescriptionrefid, 
				et2.entitydescriptionrefuuid, 
				et2.entitydescriptiondraft, 
				et2.entitydescriptiondeleted,
			case when et2.entitydescriptiondeleted then false
			when et2.entitydescriptiondraft then false
			when et2.entitydescriptionstartdate::Date > now()::date 
				and et2.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et2.entitydescriptionmimetypeuuid
		FROM entity.entitydescription et2
		where (et2.entitydescriptionownerentityuuid = read_ownerentityuuid
					or et2.entitydescriptionownerentityuuid = tendreluuid) 
			and et2.entitydescriptionuuid = read_entitydescriptionentityuuid			
			and et2.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
			and et2.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive
		) ;
		return;
end if;

if allowners = false and read_entityfieldentityuuid notNull
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et3.entitydescriptionuuid, 
				et3.entitydescriptionownerentityuuid, 
				et3.entitydescriptionentitytemplateentityuuid, 
				et3.entitydescriptionentityfieldentityduuid, 
				et3.entitydescriptionname, 
				et3.entitydescriptionlanguagemasteruuid,
				et3.entitydescriptionsoplink, 
				et3.entitydescriptionfile, 
				et3.entitydescriptionicon, 
				et3.entitydescriptioncreateddate, 
				et3.entitydescriptionmodifieddate, 
				et3.entitydescriptionstartdate, 
				et3.entitydescriptionenddate, 
				et3.entitydescriptionmodifiedby, 
				et3.entitydescriptionexternalid, 
				et3.entitydescriptionexternalsystementityuuid, 
				et3.entitydescriptionrefid, 
				et3.entitydescriptionrefuuid, 
				et3.entitydescriptiondraft, 
				et3.entitydescriptiondeleted,
			case when et3.entitydescriptiondeleted then false
			when et3.entitydescriptiondraft then false
			when et3.entitydescriptionstartdate::Date > now()::date 
				and et3.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et3.entitydescriptionmimetypeuuid
			FROM entity.entitydescription et3
			where (et3.entitydescriptionownerentityuuid = read_ownerentityuuid
					or et3.entitydescriptionownerentityuuid = tendreluuid) 
				and et3.entitydescriptionentityfieldentityduuid = read_entityfieldentityuuid
				and et3.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
				and et3.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive) ;
end if;

if allowners = false and read_entitytemplateentityuuid notNull
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et4.entitydescriptionuuid, 
				et4.entitydescriptionownerentityuuid, 
				et4.entitydescriptionentitytemplateentityuuid, 
				et4.entitydescriptionentityfieldentityduuid, 
				et4.entitydescriptionname, 
				et4.entitydescriptionlanguagemasteruuid,
				et4.entitydescriptionsoplink, 
				et4.entitydescriptionfile, 
				et4.entitydescriptionicon, 
				et4.entitydescriptioncreateddate, 
				et4.entitydescriptionmodifieddate, 
				et4.entitydescriptionstartdate, 
				et4.entitydescriptionenddate, 
				et4.entitydescriptionmodifiedby, 
				et4.entitydescriptionexternalid, 
				et4.entitydescriptionexternalsystementityuuid, 
				et4.entitydescriptionrefid, 
				et4.entitydescriptionrefuuid, 
				et4.entitydescriptiondraft, 
				et4.entitydescriptiondeleted,
			case when et4.entitydescriptiondeleted then false
			when et4.entitydescriptiondraft then false
			when et4.entitydescriptionstartdate::Date > now()::date 
				and et4.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et4.entitydescriptionmimetypeuuid
			FROM entity.entitydescription et4
			where (et4.entitydescriptionownerentityuuid = read_ownerentityuuid
					or et4.entitydescriptionownerentityuuid = tendreluuid) 
				and et4.entitydescriptionentitytemplateentityuuid = read_entitytemplateentityuuid
				and et4.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
				and et4.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive) ;
end if;

if allowners = false and read_entitytemplateentityuuid isNull 
	and read_entityfieldentityuuid isNull and read_entitydescriptionentityuuid isNull  
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et5.entitydescriptionuuid, 
				et5.entitydescriptionownerentityuuid, 
				et5.entitydescriptionentitytemplateentityuuid, 
				et5.entitydescriptionentityfieldentityduuid, 
				et5.entitydescriptionname, 
				et5.entitydescriptionlanguagemasteruuid,
				et5.entitydescriptionsoplink, 
				et5.entitydescriptionfile, 
				et5.entitydescriptionicon, 
				et5.entitydescriptioncreateddate, 
				et5.entitydescriptionmodifieddate, 
				et5.entitydescriptionstartdate, 
				et5.entitydescriptionenddate, 
				et5.entitydescriptionmodifiedby, 
				et5.entitydescriptionexternalid, 
				et5.entitydescriptionexternalsystementityuuid, 
				et5.entitydescriptionrefid, 
				et5.entitydescriptionrefuuid, 
				et5.entitydescriptiondraft, 
				et5.entitydescriptiondeleted,
			case when et5.entitydescriptiondeleted then false
			when et5.entitydescriptiondraft then false
			when et5.entitydescriptionstartdate::Date > now()::date 
				and et5.entitydescriptionenddate < now() then false
			else true
	end as entitydescriptionactive,
				et5.entitydescriptionmimetypeuuid
		FROM entity.entitydescription et5
		where (et5.entitydescriptionownerentityuuid = read_ownerentityuuid
					or et5.entitydescriptionownerentityuuid = tendreluuid) 
			and et5.entitydescriptiondeleted = ANY (tempentitydescriptionsenddeleted)
			and et5.entitydescriptiondraft = ANY (tempentitydescriptionsenddrafts)) as foo
		where foo.entitydescriptionactive = Any (tempentitydescriptionsendinactive
		) ;
		return;
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entitydescription_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitydescription_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitydescription_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entitydescription_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitydescription_update(uuid,uuid,uuid,uuid,text,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitydescription_update(IN update_entitydescriptionuuid uuid, IN update_entitydescriptionownerentityuuid uuid, IN update_entitydescriptionentitytemplateentityuuid uuid, IN update_entitydescriptionentityfieldentityuuid uuid, IN update_entitydescriptionname text, IN update_entitydescriptionsoplink text, IN update_entitydescriptionfile text, IN update_entitydescriptionicon text, IN update_entitydescriptionmimetypeuuid uuid, IN update_entitydescriptionexternalid text, IN update_entitydescriptionexternalsystementityuuid uuid, IN update_entitydescriptiondeleted boolean, IN update_entitydescriptiondraft boolean, IN update_entitydescriptionstartdate timestamp with time zone, IN update_entitydescriptionenddate timestamp with time zone, IN update_entitydescriptionmodifiedbyuuid text, IN update_languagetypeuuid uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templocationid bigint;
Begin

-- Once created, the only things that can change after something is publsihed are ???

/*
-- Add testing here

*/

-- remove this once language issues are passed through

if update_languagetypeuuid isNull
	then update_languagetypeuuid = (select systaguuid from systag where systagid = 20);
End if;

 if update_entitydescriptiondraft = true or ((select entitydescriptiondraft 
										from entity.entitydescription
										WHERE entitydescriptionuuid = update_entitydescriptionuuid ) = true)
	then -- let everything change
		UPDATE entity.entitydescription
			SET entitydescriptionownerentityuuid = case when update_entitydescriptionownerentityuuid notnull 
												then update_entitydescriptionownerentityuuid
												else entitydescriptionownerentityuuid end,	
				entitydescriptionentitytemplateentityuuid = case when update_entitydescriptionentitytemplateentityuuid notnull 
												then update_entitydescriptionentitytemplateentityuuid
												else entitydescriptionentitytemplateentityuuid end,
				entitydescriptionentityfieldentityduuid = case when update_entitydescriptionentityfieldentityuuid notnull 
												then update_entitydescriptionentityfieldentityuuid
												else entitydescriptionentityfieldentityduuid end,
 				entitydescriptionname  = case when update_entitydescriptionname notnull and (coalesce(update_entitydescriptionname,'') <> '')
												then update_entitydescriptionname
												else entitydescriptionname end,
 				entitydescriptionsoplink  = update_entitydescriptionsoplink,
 				entitydescriptionfile  = update_entitydescriptionfile,
 				entitydescriptionicon  = update_entitydescriptionicon,													
 				entitydescriptionmimetypeuuid  = case when update_entitydescriptionmimetypeuuid notnull 
												then update_entitydescriptionmimetypeuuid
												else entitydescriptionmimetypeuuid end,
				entitydescriptionexternalid = update_entitydescriptionexternalid,
				entitydescriptionexternalsystementityuuid = case when update_entitydescriptionexternalsystementityuuid notnull 
														then update_entitydescriptionexternalsystementityuuid
														else entitydescriptionexternalsystementityuuid end,
				entitydescriptiondeleted = case when update_entitydescriptiondeleted notnull 
										then update_entitydescriptiondeleted
										else entitydescriptiondeleted end, 
				entitydescriptiondraft = case when update_entitydescriptiondraft notnull 
										then update_entitydescriptiondraft
										else entitydescriptiondraft end,
				entitydescriptionstartdate = case when update_entitydescriptionstartdate notnull 
										then update_entitydescriptionstartdate
										else entitydescriptionstartdate end,
				  				entitydescriptionenddate = case 	when entitydescriptiondeleted = true 
											and entitydescriptionenddate isNull
											and update_entitydescriptionenddate isNull then now()
										when entitydescriptiondeleted = true 
											and entitydescriptionenddate isNull
											and entitydescriptionenddate notNull then entitydescriptionenddate 
										when entitydescriptiondeleted = true 
											and entitydescriptionenddate notNull
											and entitydescriptionenddate isNull then entitydescriptionenddate
										when entitydescriptiondeleted = true and entitydescriptionenddate notNull
											and entitydescriptionenddate notNull and entitydescriptionenddate <> entitydescriptionenddate
											then entitydescriptionenddate	
										else null
									end,
				entitydescriptionmodifieddate=now(),
				entitydescriptionmodifiedby = update_entitydescriptionmodifiedbyuuid
		WHERE entitydescriptionuuid = update_entitydescriptionuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entitydescription
			SET entitydescriptionname  = case when update_entitydescriptionname notnull and (coalesce(update_entitydescriptionname,'') <> '')
												then update_entitydescriptionname
												else entitydescriptionname end,
 				entitydescriptionsoplink  = update_entitydescriptionsoplink,
 				entitydescriptionfile  = update_entitydescriptionfile,
 				entitydescriptionicon  = update_entitydescriptionicon,												
 				entitydescriptionmimetypeuuid  = case when update_entitydescriptionmimetypeuuid notnull 
												then update_entitydescriptionmimetypeuuid
												else entitydescriptionmimetypeuuid end,
				entitydescriptionexternalid = update_entitydescriptionexternalid,
				entitydescriptionexternalsystementityuuid = case when update_entitydescriptionexternalsystementityuuid notnull 
														then update_entitydescriptionexternalsystementityuuid
														else entitydescriptionexternalsystementityuuid end,
				entitydescriptionstartdate = case when update_entitydescriptionstartdate notnull 
										then update_entitydescriptionstartdate
										else entitydescriptionstartdate end,
				entitydescriptiondeleted = case when update_entitydescriptiondeleted notnull 
										then update_entitydescriptiondeleted
										else entitydescriptiondeleted end, 
				  				entitydescriptionenddate = case 	when entitydescriptiondeleted = true 
											and entitydescriptionenddate isNull
											and entitydescriptionenddate isNull then now()
										when entitydescriptiondeleted = true 
											and entitydescriptionenddate isNull
											and entitydescriptionenddate notNull then entitydescriptionenddate 
										when entitydescriptiondeleted = true 
											and entitydescriptionenddate notNull
											and entitydescriptionenddate isNull then entitydescriptionenddate
										when entitydescriptiondeleted = true and entitydescriptionenddate notNull
											and entitydescriptionenddate notNull and entitydescriptionenddate <> entitydescriptionenddate
											then entitydescriptionenddate	
										else null
									end,
				entitydescriptionmodifieddate=now(),
				entitydescriptionmodifiedby = update_entitydescriptionmodifiedbyuuid
		WHERE entitydescriptionuuid = update_entitydescriptionuuid;
end if;

-- update the languagemaster if the name changed

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_entitydescriptionownerentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);


if update_entitydescriptionname notNull and (coalesce(update_entitydescriptionname,'') <> '') 
	then
	
		update public.languagetranslations
			set languagetranslationvalue = update_entitydescriptionname
		from entity.entitydescription
			where entitydescriptionuuid = update_entitydescriptionuuid
				and languagetranslationmasterid = (select languagemasterid from languagemaster where languagemasteruuid = entitydescriptionlanguagemasteruuid)
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_entitydescriptionname;

		update languagemaster
		set languagemastersource = update_entitydescriptionname,
			languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid =update_entitydescriptionmodifiedbyuuid),
			languagemastersourcelanguagetypeid = (select entityinstanceoriginalid from entity.entityinstance where entityinstanceuuid = update_languagetypeuuid),
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'		
		from entity.entitydescription
		where entitydescriptionuuid = update_entitydescriptionuuid
			and languagemasteruuid = entitydescriptionlanguagemasteruuid
			and languagemastersource <> update_entitydescriptionname;
End if;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitydescription_update(uuid,uuid,uuid,uuid,text,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_update(uuid,uuid,uuid,uuid,text,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_update(uuid,uuid,uuid,uuid,text,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitydescription_update(uuid,uuid,uuid,uuid,text,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfield_create(uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,text,uuid,text,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,uuid,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfield_create(IN create_entityfieldownerentityuuid uuid, IN create_entityfieldparententityuuid uuid, IN create_entityfieldtemplateentityuuid uuid, IN create_entityfieldcornerstoneorder integer, IN create_entityfieldname text, IN create_entityfieldtypeentityuuid uuid, IN create_entityfieldentityparenttypeentityuuid uuid, IN create_entityfieldentitytypeentityuuid uuid, IN create_entityfielddefaultvalue text, IN create_entityfieldformatentityuuid uuid, IN create_entityfieldformatentityname text, IN create_entityfieldwidgetentityuuid uuid, IN create_entityfieldwidgetentityname text, IN create_entityfieldiscalculated boolean, IN create_entityfieldiseditable boolean, IN create_entityfieldisvisible boolean, IN create_entityfieldisrequired boolean, IN create_entityfieldisprimary boolean, IN create_entityfieldtranslate boolean, IN create_entityfieldexternalid text, IN create_entityfieldexternalsystemuuid uuid, IN create_languagetypeuuid uuid, IN create_entityfielddeleted boolean, IN create_entityfielddraft boolean, OUT create_entityfieldentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	templanguagetypeentityuuid uuid;	
	tempcustomerid bigint;
	tempentityfieldparententityuuid uuid;
	tempsystagid bigint;
	tempsystaguuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	tempcornerstoneorder integer; 
	templanguagemasteruuid text;
	tempentityfieldentitytypeentityuuid uuid;
	tempentityfieldtypeentityuuid uuid;
	tempentityfieldentityparenttypeentityuuid uuid;
	tempentityfieldformatentityuuid uuid;
	tempentityfieldwidgetentityuuid uuid;
	temptendrelentityuuid uuid;
	tempentitytemplateownerentityuuid uuid;
	tempentityfieldname text;
	tempentityfieldtemplateentityuuid uuid;
	tempentityfielddeleted boolean;
	tempentityfielddraft boolean;  
		
Begin

/*

-- tests needed
	-- no field name
		call entity.crud_entityfield_create(
			null, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			null, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			null, -- IN create_entityfieldname text,
			null, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)		

	-- no template
		call entity.crud_entityfield_create(
			null, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			null, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			null, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)		
	
	-- invalid customer valid template
		call entity.crud_entityfield_create(
			'7bbaa455-1965-4171-95f1-ee9f22a98f10', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			null, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)		
			
	-- valid customer valid template invalid combo
		call entity.crud_entityfield_create(
			'3d388b1e-a9e6-4d31-a5a4-e7e454282d30', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			null, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)	
			
	-- invalid result type
		call entity.crud_entityfield_create(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			'b07bf96e-0a35-4b01-bcc0-863dc7b3db0c', -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)	

	-- invalid entity type
		call entity.crud_entityfield_create(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			'2de2bbde-6319-4886-a58d-bf9d369fc677', -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			'7bbaa455-1965-4171-95f1-ee9f22a98f10', -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)
	
	-- invalid entity parent type has value and entity type does not
		call entity.crud_entityfield_create(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			'2de2bbde-6319-4886-a58d-bf9d369fc677', -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			'67af22cb-3183-4e6e-8542-7968f744965a', -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)

	-- invalid format type

		call entity.crud_entityfield_create(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			'2de2bbde-6319-4886-a58d-bf9d369fc677', -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)

	-- invalid widget type

		call entity.crud_entityfield_create(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			'2de2bbde-6319-4886-a58d-bf9d369fc677', -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			'4f13599f-8766-4589-b80f-77ff00819380', -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)

---------------------------------------------------
	-- Need a test template
		call entity.crud_entitytemplate_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0',  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
			null,  -- merged site and parent.  Set to self if no parent sent in.
			null,  -- default is 1.
			null, -- Used to be only locations had a location category.
			null,  -- If a tag is sent in that does not exist then we create one at the template level.
			'entitytemplate'||now()::text,  -- Name of the template 
			true, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
			'scanid'||now()::text, -- create_entitytemplatescanid text,  
			null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
			null, -- create_entitytemplateexternalid text,
			null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
			null,-- create_entitytemplatedeleted boolean,
			null,-- create_entitytemplatedraft boolean,
			null, -- create_entitytemplateentityuuid uuid,
			337::bigint) 
	
	-- valid insert-- existing widget.  
	
		call entity.crud_entityfield_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'274541f8-5c9f-4e8c-9982-08c35b79e2b3', -- IN create_entityfieldtemplateentityuuid uuid,
			5, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			'2de2bbde-6319-4886-a58d-bf9d369fc677', -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			'Test', -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			'0bf3e80c-ff85-4f5a-9586-56519dca4d2e', -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)

	-- valid insert-- new format/widget.  

		call entity.crud_entityfield_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			'274541f8-5c9f-4e8c-9982-08c35b79e2b3', -- IN create_entityfieldtemplateentityuuid uuid,
			5, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||now()::text, -- IN create_entityfieldname text,
			'2de2bbde-6319-4886-a58d-bf9d369fc677', -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			'testvalue'||now()::text, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			'format'||now()::text, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			'widget'||now()::text,  -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			null, -- OUT create_entityfieldentityuuid uuid,
			337::bigint)

*/

-- setup the tendrel uuid that we use for many function calls
temptendrelentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

-- check for a field name
-- should we also check for empty string?  if yes, add it here.  

if (create_entityfieldname  isNull or coalesce(create_entityfieldname, '')='') 
	then 
		return;   -- need an error code here
	else tempentityfieldname = create_entityfieldname;
end if;


-- check for null template

if create_entityfieldtemplateentityuuid isNull
	then return;   -- need an error code here
	else tempentityfieldtemplateentityuuid = create_entityfieldtemplateentityuuid;
end if;


-- set up customer/owner  
-- Assumes customer until custag is cutover to entity 100%
-- Owner will always be taken from the entity template.  We may want to change this in the future
-- Note this checks for a valid template and valid customer


select entitytemplateownerentityuuid into tempentitytemplateownerentityuuid
	from entity.crud_entitytemplate_read_min(create_entityfieldownerentityuuid ,tempentityfieldtemplateentityuuid ,null,null,null,null);

select customerid into tempcustomerid
	from entity.crud_customer_read_min(null,tempentitytemplateownerentityuuid,null,false, null,null,null,null);


-- probably return an error if the entity is not set to a customer.  
-- This also covers invalid entity template
if tempcustomerid isNull
	then return;   -- need an error code here
end if;


-- check for valid result type - uuid =  '7bbaa455-1965-4171-95f1-ee9f22a98f10'
if create_entityfieldtypeentityuuid in 
		(select systagentityuuid
		from entity.crud_systag_read_min(temptendrelentityuuid,null,null, '7bbaa455-1965-4171-95f1-ee9f22a98f10', false,null,null, null,create_languagetypeuuid))
	then tempentityfieldtypeentityuuid = create_entityfieldtypeentityuuid;
	else return;  -- need an error code here
end if;

-- check for valid entity type 'b07bf96e-0a35-4b01-bcc0-863dc7b3db0c'

If create_entityfieldentitytypeentityuuid isNull
	then tempentityfieldentitytypeentityuuid = create_entityfieldentitytypeentityuuid;
	elseif (create_entityfieldtypeentityuuid notNull 
			and create_entityfieldentitytypeentityuuid in (select systagentityuuid 
						from entity.crud_systag_read_min(temptendrelentityuuid,null,null, 'b07bf96e-0a35-4b01-bcc0-863dc7b3db0c', false,null,null, null,create_languagetypeuuid)))
	then tempentityfieldentitytypeentityuuid = create_entityfieldentitytypeentityuuid;
	else return;  -- need an error code here
end if;

-- check for filters on entity type  -- tempentityfieldentitytypeentityuuid is Valid or Null

if create_entityfieldentityparenttypeentityuuid isNull
	then tempentityfieldentityparenttypeentityuuid = create_entityfieldentityparenttypeentityuuid;
	elseif create_entityfieldentityparenttypeentityuuid notNull 
			and tempentityfieldentitytypeentityuuid isNull
		then return; -- need an error code here
	else tempentityfieldentityparenttypeentityuuid = create_entityfieldentityparenttypeentityuuid;
end if;

-- setup the language type

if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

-- check for a valid format 'ef107a7a-eadd-46dd-be63-d06e8b660852' -- null is ok

if create_entityfieldformatentityuuid isNull 
	then tempentityfieldformatentityuuid = create_entityfieldformatentityuuid;
	elseif create_entityfieldformatentityuuid notNull 
		and create_entityfieldformatentityuuid in 
			(select systagentityuuid
			from entity.crud_systag_read_min(temptendrelentityuuid,null,null, 'ef107a7a-eadd-46dd-be63-d06e8b660852', false,null,null, null,create_languagetypeuuid)
			union
			select systagentityuuid
			from entity.crud_systag_read_min(tempentitytemplateownerentityuuid,null,null, 'ef107a7a-eadd-46dd-be63-d06e8b660852', false,null,null, null,create_languagetypeuuid))
	then tempentityfieldformatentityuuid = create_entityfieldformatentityuuid;
	else return;  -- need an error code here
end if;

if tempentityfieldformatentityuuid isNull and (create_entityfieldformatentityname notNull and coalesce(create_entityfieldformatentityname, '')<>'')
	then 	
		call entity.crud_systag_create(
			tempentitytemplateownerentityuuid, --create_systagownerentityuuid
			'ef107a7a-eadd-46dd-be63-d06e8b660852', --create_systagparententityuuid
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			create_entityfieldformatentityname,  -- create_systag
			templanguagetypeentityuuid, -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null,--create_systagdeleted boolean,
			null,--create_systagdraft boolean,
			tempsystagid, -- OUT create_systagid
			tempsystaguuid, -- OUT create_systaguuid text,
			tempentityfieldformatentityuuid, -- OUT create_systagentityuuid uuid
			337::bigint);
end if;

-- check for a valid widget 'd19d9e21-0749-4c2a-96c5-02f648e28826'
if create_entityfieldwidgetentityuuid isNull 
	then tempentityfieldwidgetentityuuid = create_entityfieldwidgetentityuuid;
	elseif create_entityfieldwidgetentityuuid notNull 
		and create_entityfieldwidgetentityuuid in (
				select systagentityuuid 
				from entity.crud_systag_read_min(temptendrelentityuuid,null,null, 'd19d9e21-0749-4c2a-96c5-02f648e28826', false,null,null, null,create_languagetypeuuid)
				union
				select systagentityuuid 
				from entity.crud_systag_read_min(tempentitytemplateownerentityuuid,null,null, 'd19d9e21-0749-4c2a-96c5-02f648e28826', false,null,null, null,create_languagetypeuuid)
					)
	then tempentityfieldwidgetentityuuid = create_entityfieldwidgetentityuuid;
	else return;
end if;

if tempentityfieldwidgetentityuuid isNull and (create_entityfieldwidgetentityname notNull and coalesce(create_entityfieldwidgetentityname, '')<>'')
	then 
		call entity.crud_systag_create(
			tempentitytemplateownerentityuuid, --create_systagownerentityuuid
			'd19d9e21-0749-4c2a-96c5-02f648e28826', --create_systagparententityuuid
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			create_entityfieldwidgetentityname,  -- create_systag
			templanguagetypeentityuuid, -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null,--create_systagdeleted boolean,
			null,--create_systagdraft boolean,
			tempsystagid, -- OUT create_systagid
			tempsystaguuid, -- OUT create_systaguuid text,
			tempentityfieldwidgetentityuuid, -- OUT create_systagentityuuid uuid
			337::bigint);
end if;

-- check if the parent is an enity field.  
-- This will return null if there is no match and we will use null and fix it later.
select entityfielduuid into tempentityfieldparententityuuid
from entity.crud_entityfield_read_min(create_entityfieldownerentityuuid,null,create_entityfieldparententityuuid ,	null,	null,	null,	null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9');

-- create cornerstone order

if create_entityfieldcornerstoneorder is Null
	then tempcornerstoneorder = 1::integer;
	else tempcornerstoneorder = create_entityfieldcornerstoneorder::integer;
end if;

If create_entityfielddeleted isNull
	then tempentityfielddeleted = false;
	else tempentityfielddeleted = create_entityfielddeleted;
end if;

If create_entityfielddraft isNull
	then tempentityfielddraft = false;
	else tempentityfielddraft = create_entityfielddraft;
end if;


-- time to insert the base entity template

-- insert name into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		tempentityfieldname,    
		create_modifiedbyid)  
	Returning languagemasteruuid into templanguagemasteruuid;

INSERT INTO entity.entityfield(
		entityfieldownerentityuuid, 		
		entityfieldparententityuuid, 		
		entityfieldentitytemplateentityuuid, 
		entityfieldorder, 
		entityfieldname, 
		entityfieldlanguagemasteruuid,   
		entityfieldtypeentityuuid,
		entityfieldentityparenttypeentityuuid, -- not used ATM??  Check
		entityfieldentitytypeentityuuid, 
		entityfielddefaultvalue, 
		entityfieldformatentityuuid, 
		entityfieldwidgetentityuuid, 	
		entityfieldiscalculated, 
		entityfieldiseditable, 
		entityfieldisvisible, 
		entityfieldisrequired,
		entityfieldisprimary, 
		entityfieldtranslate, 
		entityfieldcreateddate, 
		entityfieldmodifieddate, 
		entityfieldstartdate, 
		entityfieldenddate, 
		entityfieldexternalid, 
		entityfieldexternalsystementityuuid,
		entityfieldmodifiedbyuuid,
		entityfielddeleted,
		entityfielddraft
		)
	VALUES (
		tempentitytemplateownerentityuuid, 		
		tempentityfieldparententityuuid, 	-- for nesting  	
		tempentityfieldtemplateentityuuid, 
		tempcornerstoneorder, 
		tempentityfieldname, 
		templanguagemasteruuid,  
		tempentityfieldtypeentityuuid,  -- this is the field type like result.  Uses result.     
		tempentityfieldentityparenttypeentityuuid, -- this is for sys/cus tag.  A way to get greater filtering.  
		tempentityfieldentitytypeentityuuid,  -- this is the entity type
		create_entityfielddefaultvalue,   -- In the future we may want to check for type mismatch.
		tempentityfieldformatentityuuid, 
		tempentityfieldwidgetentityuuid, 	
		case when create_entityfieldiscalculated isNull
			then false
			else create_entityfieldiscalculated
		end,
		case when create_entityfieldiseditable isNull
			then true
			else create_entityfieldiseditable
		end,
		case when create_entityfieldisvisible isNull
			then true
			else create_entityfieldisvisible
		end,
		case when create_entityfieldisrequired isNull
			then false
			else create_entityfieldisrequired
		end,
		case when create_entityfieldisprimary isNull
			then false
			else create_entityfieldisprimary
		end,
		case when create_entityfieldtranslate isNull
			then true
			else create_entityfieldtranslate
		end,
		now(), -- entityfieldcreateddate, 
		now(), -- entityfieldmodifieddate, 
		now(), -- entityfieldstartdate, 
		null, -- entityfieldenddate, 
		create_entityfieldexternalid, 
		create_entityfieldexternalsystemuuid,
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		tempentityfielddeleted,
		tempentityfielddraft
		)
	returning entityfielduuid into create_entityfieldentityuuid ;

update entity.entityfield
set entityfieldparententityuuid = entityfielduuid
where entityfielduuid = create_entityfieldentityuuid
	and entityfieldparententityuuid isNull;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfield_create(uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,text,uuid,text,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,uuid,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_create(uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,text,uuid,text,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,uuid,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_create(uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,text,uuid,text,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,uuid,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_create(uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,text,uuid,text,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,uuid,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfield_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfield_delete(IN create_entityfieldownerentityuuid uuid, IN create_entityfieldentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare

Begin

/*

-- tests needed
	-- no owner isNull
		call entity.crud_entityfield_delete(
			null, -- IN create_entityfieldownerentityuuid uuid,
			'c77db174-7b16-4f47-b138-b56766375449', -- IN create_entityfieldentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_entityfield_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldownerentityuuid uuid,
			null, -- IN create_entityfieldentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_entityfield_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldownerentityuuid uuid,
			'c77db174-7b16-4f47-b138-b56766375449', -- IN create_entityfieldentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_entityfield_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfieldownerentityuuid uuid,
			'c77db174-7b16-4f47-b138-b56766375449', -- IN create_entityfieldentityuuid uuid,	
			337)

	-- reset the field
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = 'c77db174-7b16-4f47-b138-b56766375449'

-- use this to find fields to work with
select entityfieldname, * from  entity.entityfield order by entityfieldcreateddate desc

-- how to check if the update was successful
select * from entity.entityfield where entityfielddeleted = true

*/

-- check for owner 

if create_entityfieldownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for field

if create_entityfieldentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the field record to deleted

update entity.entityfield
set entityfielddeleted = true,
	entityfieldmodifieddate = now(),
	entityfieldmodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entityfieldownerentityuuid = create_entityfieldownerentityuuid
	and entityfielduuid = create_entityfieldentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfield_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityfield_read_min(uuid,uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityfield_read_min(read_ownerentityuuid uuid, read_entitytemplateentityuuid uuid, read_entityfieldentityuuid uuid, read_entityfieldsenddeleted boolean, read_entityfieldsenddrafts boolean, read_entityfieldsendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entityfielduuid uuid, entityfieldentitytemplateentityuuid uuid, entityfieldcreateddate timestamp with time zone, entityfieldmodifieddate timestamp with time zone, entityfieldstartdate timestamp with time zone, entityfieldenddate timestamp with time zone, entityfieldlanguagemasteruuid text, entityfieldorder bigint, entityfielddefaultvalue text, entityfieldiscalculated boolean, entityfieldiseditable boolean, entityfieldisvisible boolean, entityfieldisrequired boolean, entityfieldformatentityuuid uuid, entityfieldwidgetentityuuid uuid, entityfieldexternalid text, entityfieldexternalsystementityuuid uuid, entityfieldmodifiedbyuuid text, entityfieldrefid bigint, entityfieldrefuuid text, entityfieldisprimary boolean, entityfieldtranslate boolean, entityfieldname text, entityfieldownerentityuuid uuid, entityfieldtypeentityuuid uuid, entityfieldparententityuuid uuid, entityfieldentitytypeentityuuid uuid, entityfieldentityparenttypeentityuuid uuid, entityfieldeleted boolean, entityfielddraft boolean, entityfieldactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentityfieldsenddeleted boolean[]; 
	tempentityfieldsenddrafts  boolean[];  
	tempentityfieldsendinactive boolean[];
BEGIN

/*  Examples

-- all customers no entity template no field
select * from entity.crud_entityfield_read_min(null, null, null,null, null, null,null)

-- specific customer no entity template no field
select * from entity.crud_entityfield_read_min(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,null, null, null, null)

-- specific entity template
select * 
from entity.crud_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,	null, null, null,null)

-- specific entity field
select * 
from entity.crud_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',	null, null, null,null)

-- negative tests - empty or wrong cutomer returns nothing
select * 
from entity.crud_entityfield_read_min(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',	null,null, null, null,null)

select * 
from entity.crud_entityfield_read_min(null,null,	'd15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)

*/

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,read_entityfieldsenddeleted , read_entityfieldsenddrafts , read_entityfieldsendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_entityfieldsenddeleted isNull and read_entityfieldsenddeleted = false
	then tempentityfieldsenddeleted = Array[false];
	else tempentityfieldsenddeleted = Array[true,false];
end if;

if read_entityfieldsenddrafts isNull and read_entityfieldsenddrafts = false
	then tempentityfieldsenddrafts = Array[false];
	else tempentityfieldsenddrafts = Array[true,false];
end if;

if read_entityfieldsendinactive isNull and read_entityfieldsendinactive = false
	then tempentityfieldsendinactive = Array[true];
	else tempentityfieldsendinactive = Array[true,false];
end if;

-- probably can do this cealner with less sql

if allowners = true and (read_entitytemplateentityuuid isNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			ef.entityfielduuid, 
			ef.entityfieldentitytemplateentityuuid, 
			ef.entityfieldcreateddate, 
			ef.entityfieldmodifieddate, 
			ef.entityfieldstartdate, 
			ef.entityfieldenddate, 
			ef.entityfieldlanguagemasteruuid, 
			ef.entityfieldorder, 
			ef.entityfielddefaultvalue, 
			ef.entityfieldiscalculated, 
			ef.entityfieldiseditable, 
			ef.entityfieldisvisible, 
			ef.entityfieldisrequired, 
			ef.entityfieldformatentityuuid, 
			ef.entityfieldwidgetentityuuid, -- replace this with the entity instance when it is ready
			ef.entityfieldexternalid,
			ef.entityfieldexternalsystementityuuid, 
			ef.entityfieldmodifiedbyuuid, 
			ef.entityfieldrefid, 
			ef.entityfieldrefuuid,
			ef.entityfieldisprimary, 
			ef.entityfieldtranslate, 
			ef.entityfieldname, 
			ef.entityfieldownerentityuuid, 
			ef.entityfieldtypeentityuuid, 
			ef.entityfieldparententityuuid, 
			ef.entityfieldentitytypeentityuuid, 
			ef.entityfieldentityparenttypeentityuuid,
				ef.entityfielddeleted,
				ef.entityfielddraft,
				case when ef.entityfieldenddate notnull and ef.entityfieldenddate::Date < now()::date
					then false
					else true
				end as entityfieldsendinactive
		FROM entity.entityfield ef
		where ef.entityfielddeleted = ANY (tempentityfieldsenddeleted)
			and ef.entityfielddraft = ANY (tempentityfieldsenddrafts)) as foo
		where  foo.entityfieldsendinactive = Any (tempentityfieldsendinactive);
		return;
end if;

if allowners = false and (read_entitytemplateentityuuid isNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			ef2.entityfielduuid, 
			ef2.entityfieldentitytemplateentityuuid, 
			ef2.entityfieldcreateddate, 
			ef2.entityfieldmodifieddate, 
			ef2.entityfieldstartdate, 
			ef2.entityfieldenddate, 
			ef2.entityfieldlanguagemasteruuid, 
			ef2.entityfieldorder, 
			ef2.entityfielddefaultvalue, 
			ef2.entityfieldiscalculated, 
			ef2.entityfieldiseditable, 
			ef2.entityfieldisvisible, 
			ef2.entityfieldisrequired, 
			ef2.entityfieldformatentityuuid, 
			ef2.entityfieldwidgetentityuuid, -- replace this with the entity instance when it is ready
			ef2.entityfieldexternalid,
			ef2.entityfieldexternalsystementityuuid, 
			ef2.entityfieldmodifiedbyuuid, 
			ef2.entityfieldrefid, 
			ef2.entityfieldrefuuid,
			ef2.entityfieldisprimary, 
			ef2.entityfieldtranslate, 
			ef2.entityfieldname, 
			ef2.entityfieldownerentityuuid, 
			ef2.entityfieldtypeentityuuid, 
			ef2.entityfieldparententityuuid, 
			ef2.entityfieldentitytypeentityuuid, 
			ef2.entityfieldentityparenttypeentityuuid,
				ef2.entityfielddeleted,
				ef2.entityfielddraft,
				case when ef2.entityfieldenddate notnull and ef2.entityfieldenddate::Date < now()::date
					then false
					else true
				end as entityfieldsendinactive
		FROM entity.entityfield ef2
		where ef2.entityfieldownerentityuuid = read_ownerentityuuid
			and ef2.entityfielddeleted = ANY (tempentityfieldsenddeleted)
			and ef2.entityfielddraft = ANY (tempentityfieldsenddrafts)) as foo
		where  foo.entityfieldsendinactive = Any (tempentityfieldsendinactive);
		return;
end if;

if allowners = false and (read_entitytemplateentityuuid notNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			ef3.entityfielduuid, 
			ef3.entityfieldentitytemplateentityuuid, 
			ef3.entityfieldcreateddate, 
			ef3.entityfieldmodifieddate, 
			ef3.entityfieldstartdate, 
			ef3.entityfieldenddate, 
			ef3.entityfieldlanguagemasteruuid, 
			ef3.entityfieldorder, 
			ef3.entityfielddefaultvalue, 
			ef3.entityfieldiscalculated, 
			ef3.entityfieldiseditable, 
			ef3.entityfieldisvisible, 
			ef3.entityfieldisrequired, 
			ef3.entityfieldformatentityuuid, 
			ef3.entityfieldwidgetentityuuid, -- replace this with the entity instance when it is ready
			ef3.entityfieldexternalid,
			ef3.entityfieldexternalsystementityuuid, 
			ef3.entityfieldmodifiedbyuuid, 
			ef3.entityfieldrefid, 
			ef3.entityfieldrefuuid,
			ef3.entityfieldisprimary, 
			ef3.entityfieldtranslate, 
			ef3.entityfieldname, 
			ef3.entityfieldownerentityuuid, 
			ef3.entityfieldtypeentityuuid, 
			ef3.entityfieldparententityuuid, 
			ef3.entityfieldentitytypeentityuuid, 
			ef3.entityfieldentityparenttypeentityuuid,
				ef3.entityfielddeleted,
				ef3.entityfielddraft,
				case when ef3.entityfieldenddate notnull and ef3.entityfieldenddate::Date < now()::date
					then false
					else true
				end as entityfieldsendinactive
		FROM entity.entityfield ef3
		where ef3.entityfieldownerentityuuid = read_ownerentityuuid
			and ef3.entityfieldentitytemplateentityuuid = read_entitytemplateentityuuid
			and ef3.entityfielddeleted = ANY (tempentityfieldsenddeleted)
			and ef3.entityfielddraft = ANY (tempentityfieldsenddrafts)) as foo
			where  foo.entityfieldsendinactive = Any (tempentityfieldsendinactive);
		return;

end if;

if allowners = false and (read_entityfieldentityuuid notNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			ef4.entityfielduuid, 
			ef4.entityfieldentitytemplateentityuuid, 
			ef4.entityfieldcreateddate, 
			ef4.entityfieldmodifieddate, 
			ef4.entityfieldstartdate, 
			ef4.entityfieldenddate, 
			ef4.entityfieldlanguagemasteruuid, 
			ef4.entityfieldorder, 
			ef4.entityfielddefaultvalue, 
			ef4.entityfieldiscalculated, 
			ef4.entityfieldiseditable, 
			ef4.entityfieldisvisible, 
			ef4.entityfieldisrequired, 
			ef4.entityfieldformatentityuuid, 
			ef4.entityfieldwidgetentityuuid, -- replace this with the entity instance when it is ready
			ef4.entityfieldexternalid,
			ef4.entityfieldexternalsystementityuuid, 
			ef4.entityfieldmodifiedbyuuid, 
			ef4.entityfieldrefid, 
			ef4.entityfieldrefuuid,
			ef4.entityfieldisprimary, 
			ef4.entityfieldtranslate, 
			ef4.entityfieldname, 
			ef4.entityfieldownerentityuuid, 
			ef4.entityfieldtypeentityuuid, 
			ef4.entityfieldparententityuuid, 
			ef4.entityfieldentitytypeentityuuid, 
			ef4.entityfieldentityparenttypeentityuuid,
				ef4.entityfielddeleted,
				ef4.entityfielddraft,
				case when ef4.entityfieldenddate notnull and ef4.entityfieldenddate::Date < now()::date
					then false
					else true
				end as entityfieldsendinactive
		FROM entity.entityfield ef4
		where ef4.entityfieldownerentityuuid = read_ownerentityuuid
				and ef4.entityfielduuid = read_entityfieldentityuuid
				and ef4.entityfielddeleted = ANY (tempentityfieldsenddeleted)
				and ef4.entityfielddraft = ANY (tempentityfieldsenddrafts)) as foo
		where  foo.entityfieldsendinactive = Any (tempentityfieldsendinactive);
		return;
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityfield_read_min(uuid,uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfield_read_min(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfield_read_min(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityfield_read_min(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfield_update(uuid,uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfield_update(IN update_entityfielduuid uuid, IN update_entityfieldownerentityuuid uuid, IN update_entityfieldparententityuuid uuid, IN update_entityfieldtemplateentityuuid uuid, IN update_entityfieldcornerstoneorder integer, IN update_entityfieldname text, IN update_entityfieldtypeentityuuid uuid, IN update_entityfieldentityparenttypeentityuuid uuid, IN update_entityfieldentitytypeentityuuid uuid, IN update_entityfielddefaultvalue text, IN update_entityfieldformatentityuuid uuid, IN update_entityfieldwidgetentityuuid uuid, IN update_entityfieldiscalculated boolean, IN update_entityfieldiseditable boolean, IN update_entityfieldisvisible boolean, IN update_entityfieldisrequired boolean, IN update_entityfieldisprimary boolean, IN update_entityfieldtranslate boolean, IN update_entityfieldexternalid text, IN update_entityfieldexternalsystemuuid uuid, IN update_entityfielddeleted boolean, IN update_entityfielddraft boolean, IN update_entityfieldstartdate timestamp with time zone, IN update_entityfieldenddate timestamp with time zone, IN update_entityfieldmodifiedbyuuid text, IN update_languagetypeuuid uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templocationid bigint;
Begin

-- Once created, the only things that can change after something is publsihed are ???

/*
-- Add testing here

*/

-- remove this once language issues are passed through

if update_languagetypeuuid isNull
	then update_languagetypeuuid = (select systaguuid from systag where systagid = 20);
End if;

 if update_entityfielddraft = true or ((select entityfielddraft 
										from entity.entityfield
										WHERE entityfielduuid = update_entityfielduuid ) = true)
	then -- let everything change
		UPDATE entity.entityfield
			SET entityfieldownerentityuuid = case when update_entityfieldownerentityuuid notnull 
												then update_entityfieldownerentityuuid
												else entityfieldownerentityuuid end,	
				entityfieldparententityuuid = case when update_entityfieldparententityuuid notnull 
												then update_entityfieldparententityuuid
												else entityfieldparententityuuid end,
				entityfieldentitytemplateentityuuid = case when entityfieldentitytemplateentityuuid notnull 
												then update_entityfieldtemplateentityuuid
												else entityfieldentitytemplateentityuuid end,
				entityfieldorder = case when update_entityfieldcornerstoneorder notnull 
												then update_entityfieldcornerstoneorder
												else entityfieldorder end, 
				entityfieldtypeentityuuid = case when update_entityfieldtypeentityuuid notnull 
												then update_entityfieldtypeentityuuid
												else entityfieldtypeentityuuid end,
				entityfieldentityparenttypeentityuuid = case when update_entityfieldentityparenttypeentityuuid notnull 
												then update_entityfieldentityparenttypeentityuuid
												else entityfieldentityparenttypeentityuuid end,
				entityfieldentitytypeentityuuid = case when update_entityfieldentitytypeentityuuid notnull 
												then update_entityfieldentitytypeentityuuid
												else entityfieldentitytypeentityuuid end,
				entityfielddefaultvalue = update_entityfielddefaultvalue,
				entityfieldformatentityuuid = case when update_entityfieldformatentityuuid notnull 
												then update_entityfieldformatentityuuid
												else entityfieldformatentityuuid end,
				entityfieldwidgetentityuuid = case when update_entityfieldwidgetentityuuid notnull 
												then update_entityfieldwidgetentityuuid
												else entityfieldwidgetentityuuid end,
 				entityfieldname  = case when update_entityfieldname notnull and (coalesce(update_entityfieldname,'') <> '')
												then update_entityfieldname
												else entityfieldname end,
				entityfieldisprimary = case when update_entityfieldisprimary notnull 
												then update_entityfieldisprimary
												else entityfieldisprimary end,  
				entityfieldiscalculated = case when update_entityfieldiscalculated notnull 
												then update_entityfieldiscalculated
												else entityfieldiscalculated end,
				entityfieldiseditable = case when update_entityfieldiseditable notnull 
												then update_entityfieldiseditable
												else entityfieldiseditable end,											
				entityfieldisvisible = case when update_entityfieldisvisible notnull 
												then update_entityfieldisvisible
												else entityfieldisvisible end,
				entityfieldisrequired = case when update_entityfieldisrequired notnull 
												then update_entityfieldisrequired
												else entityfieldisrequired end,
				entityfieldtranslate = case when update_entityfieldtranslate notnull 
												then update_entityfieldtranslate
												else entityfieldtranslate end,
				entityfieldexternalid = update_entityfieldexternalid,
				entityfieldexternalsystementityuuid = case when update_entityfieldexternalsystemuuid notnull 
														then update_entityfieldexternalsystemuuid
														else entityfieldexternalsystementityuuid end,
				entityfielddeleted = case when update_entityfielddeleted notnull 
										then update_entityfielddeleted
										else entityfielddeleted end, 
				entityfielddraft = case when update_entityfielddraft notnull 
										then update_entityfielddraft
										else entityfielddraft end,
				entityfieldstartdate = case when update_entityfieldstartdate notnull 
										then update_entityfieldstartdate
										else entityfieldstartdate end,
				entityfieldenddate = case 	when entityfielddeleted = true 
											and entityfieldenddate isNull
											and update_entityfieldenddate isNull then now()
										when entityfielddeleted = true 
											and entityfieldenddate isNull
											and update_entityfieldenddate notNull then update_entityfieldenddate 
										when entityfielddeleted = true 
											and entityfieldenddate notNull
											and update_entityfieldenddate isNull then entityfieldenddate
										when entityfielddeleted = true and entityfieldenddate notNull
											and update_entityfieldenddate notNull and update_entityfieldenddate <> entityfieldenddate
											then update_entityfieldenddate	
										else null
									end,
				entityfieldmodifieddate=now(),
				entityfieldmodifiedbyuuid = update_entityfieldmodifiedbyuuid
		WHERE entityfielduuid = update_entityfielduuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entityfield
			SET entityfieldstartdate = case when update_entityfieldstartdate notnull 
										then update_entityfieldstartdate
										else entityfieldstartdate end,
				entityfieldorder = case when update_entityfieldcornerstoneorder notnull 
												then update_entityfieldcornerstoneorder
												else entityfieldorder end, 
				entityfielddefaultvalue = update_entityfielddefaultvalue,
				entityfieldformatentityuuid = case when update_entityfieldformatentityuuid notnull 
												then update_entityfieldformatentityuuid
												else entityfieldformatentityuuid end,
				entityfieldwidgetentityuuid = case when update_entityfieldwidgetentityuuid notnull 
												then update_entityfieldwidgetentityuuid
												else entityfieldwidgetentityuuid end,
 				entityfieldname  = case when update_entityfieldname notnull and (coalesce(update_entityfieldname,'') <> '')
												then update_entityfieldname
												else entityfieldname end,
				entityfieldiseditable = case when update_entityfieldiseditable notnull 
												then update_entityfieldiseditable
												else entityfieldiseditable end,											
				entityfieldisvisible = case when update_entityfieldisvisible notnull 
												then update_entityfieldisvisible
												else entityfieldisvisible end,
				entityfieldisrequired = case when update_entityfieldisrequired notnull 
												then update_entityfieldisrequired
												else entityfieldisrequired end,
				entityfieldtranslate = case when update_entityfieldtranslate notnull 
												then update_entityfieldtranslate
												else entityfieldtranslate end,
				entityfieldexternalid = update_entityfieldexternalid,
				entityfieldexternalsystementityuuid = case when update_entityfieldexternalsystemuuid notnull 
														then update_entityfieldexternalsystemuuid
														else entityfieldexternalsystementityuuid end,
				entityfielddeleted = case when update_entityfielddeleted notnull 
										then update_entityfielddeleted
										else entityfielddeleted end, 
				entityfieldenddate = case 	when entityfielddeleted = true 
											and entityfieldenddate isNull
											and update_entityfieldenddate isNull then now()
										when entityfielddeleted = true 
											and entityfieldenddate isNull
											and update_entityfieldenddate notNull then update_entityfieldenddate 
										when entityfielddeleted = true 
											and entityfieldenddate notNull
											and update_entityfieldenddate isNull then entityfieldenddate
										when entityfielddeleted = true and entityfieldenddate notNull
											and update_entityfieldenddate notNull and update_entityfieldenddate <> entityfieldenddate
											then update_entityfieldenddate	
										else null
									end,
				entityfieldmodifieddate=now(),
				entityfieldmodifiedbyuuid = update_entityfieldmodifiedbyuuid
		WHERE entityfielduuid = update_entityfielduuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_entityfieldownerentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);


if update_entityfieldname notNull and (coalesce(update_entityfieldname,'') <> '') 
	then

		update public.languagetranslations
			set languagetranslationvalue = update_entityfieldname
		from entity.entityfield
			where entityfielduuid = update_entityfielduuid
				and languagetranslationmasterid = (select languagemasterid from languagemaster where languagemasteruuid = entityfieldlanguagemasteruuid)
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_entityfieldname;
			
		update languagemaster
		set languagemastersource = entityfieldname,
			languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid =update_entityfieldmodifiedbyuuid),
			languagemastersourcelanguagetypeid = (select entityinstanceoriginalid from entity.entityinstance where entityinstanceuuid = update_languagetypeuuid),
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'		
		from entity.entityfield
		where entityfielduuid = update_entityfielduuid
			and languagemasteruuid = entityfieldlanguagemasteruuid
			and languagemastersource <> update_entityfieldname;
End if;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfield_update(uuid,uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_update(uuid,uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_update(uuid,uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfield_update(uuid,uuid,uuid,uuid,integer,text,uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,boolean,boolean,boolean,boolean,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfieldinstance_create(uuid,uuid,uuid,text,text,uuid,text,uuid,text,text,uuid,boolean,boolean,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfieldinstance_create(IN create_entityfieldinstanceownerentityuuid uuid, IN create_entityfieldinstanceentityinstanceentityuuid uuid, IN create_entityfieldinstanceentityfieldentityuuid uuid, IN create_entityfieldinstancevalue text, IN create_entityfieldinstanceentityfieldname text, IN create_entityfieldformatentityuuid uuid, IN create_entityfieldformatentityname text, IN create_entityfieldwidgetentityuuid uuid, IN create_entityfieldwidgetentityname text, IN create_entityfieldinstanceexternalid text, IN create_entityfieldinstanceexternalsystemuuid uuid, IN create_entityfieldinstancedeleted boolean, IN create_entityfieldinstancedraft boolean, OUT create_entityfieldinstanceentityuuid uuid, IN create_languagetypeuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tendreluuid uuid;
	tempentityfieldinstanceownerentityuuid uuid;
	tempentityfieldinstanceentityinstanceentityuuid uuid;
	tempentityfieldinstanceentityfieldentityuuid uuid;
	tempcustagid bigint;
	tempcustaguuid text;
	tempentityinstanceownerentityuuid uuid;
	tempentityinstanceentitytemplateentityuuid uuid;
	tempentityfieldinstanceentitytemplateentityuuid uuid;
	templanguagetypeentityuuid uuid;
	tempentityfieldinstanceentityuuid uuid;  -- return value
	tempentityinstancedeleted boolean;
	tempentityinstancedraft boolean;
	tempentityfieldinstanceentityfieldname text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
 	templanguagemasteruuid text;
	tempcustomerid bigint;
	tempcustomeruuid text;	
	tempentityinstanceuuid uuid;

Begin

/*  Future New
-- Lazy init version
-- create_entityfieldinstancevalue validated?
-- Languagemaster create to be smarter than it is.  Maybe even a function.  (Should only do language master on strings)
-- Validate externalsystem
-- externalsystemuuid vs externalsystementityuuid - one is a systag, but we are not handling this well.  Keep both?  
-- Duplicate checking of field instance creation.

interesting sql:
-- 	select unnest(array['test','test2'])
--	FOREACH tempcustagentityuuid IN ARRAY tempentitytagcustagentityuuid
	LOOP 
		call entity.crud_entitytag_create(tempentityinstanceownerentityuuid,tempentityinstanceuuid,tempcustagentityuuid,tempentitytagcustagentityuuid, null, null, null, null, create_modifiedbyid);
	END LOOP;
*/

/*  Testing

-- select * from entity.entityfield where entityfieldownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'
-- select * from entity.entityinstance where entityinstanceentitytemplateentityuuid = '274541f8-5c9f-4e8c-9982-08c35b79e2b3'
-- select * from entity.entityinstance where entityinstanceownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- error if owner isNull or entityinstanceentityuuid isNull or fieldentityuuid isNull
	call entity.crud_entityfieldinstance_create(
		null,-- IN create_entityfieldinstanceownerentityuuid uuid,
		null,-- IN create_entityfieldinstanceentityinstanceentityuuid uuid,
		null,-- IN create_entityfieldinstanceentityfieldentityuuid uuid,
		'test value'||now()::text,-- IN create_entityfieldinstancevalue text,
		null,-- IN create_entityfieldinstanceentityfieldname text,
		null,-- IN create_entityfieldformatentityuuid uuid,
		null,-- IN create_entityfieldformatentityname text,
		null,-- IN create_entityfieldwidgetentityuuid uuid,
		null,-- IN create_entityfieldwidgetentityname text,
		null,-- IN create_entityfieldinstanceexternalid text,
		null,-- IN create_entityfieldinstanceexternalsystemuuid uuid,
		null,-- IN create_entityfieldinstancedeleted boolean,
		null,-- IN create_entityfieldinstancedraft boolean,
		null,-- OUT create_entityfieldinstanceentityuuid uuid,
		null,-- IN create_languagetypeuuid uuid,
		337)

-- invalid customer
	call entity.crud_entityfieldinstance_create(
		'c77db174-7b16-4f47-b138-b56766375449',-- IN create_entityfieldinstanceownerentityuuid uuid,
		'744feee2-a676-41fc-8e03-a70e54e9f8e8',-- IN create_entityfieldinstanceentityinstanceentityuuid uuid,
		'ee3de35e-47e8-4590-a71f-6070abe760c7',-- IN create_entityfieldinstanceentityfieldentityuuid uuid,
		'test value'||now()::text,-- IN create_entityfieldinstancevalue text,
		null,-- IN create_entityfieldinstanceentityfieldname text,
		null,-- IN create_entityfieldformatentityuuid uuid,
		null,-- IN create_entityfieldformatentityname text,
		null,-- IN create_entityfieldwidgetentityuuid uuid,
		null,-- IN create_entityfieldwidgetentityname text,
		null,-- IN create_entityfieldinstanceexternalid text,
		null,-- IN create_entityfieldinstanceexternalsystemuuid uuid,
		null,-- IN create_entityfieldinstancedeleted boolean,
		null,-- IN create_entityfieldinstancedraft boolean,
		null,-- OUT create_entityfieldinstanceentityuuid uuid,
		null,-- IN create_languagetypeuuid uuid,
		337)

-- invalid owner instance combo
	call entity.crud_entityfieldinstance_create(
		'f90d618d-5de7-4126-8c65-0afb700c6c61',-- IN create_entityfieldinstanceownerentityuuid uuid,
		'744feee2-a676-41fc-8e03-a70e54e9f8e8',-- IN create_entityfieldinstanceentityinstanceentityuuid uuid,
		'ee3de35e-47e8-4590-a71f-6070abe760c7',-- IN create_entityfieldinstanceentityfieldentityuuid uuid,
		'test value'||now()::text,-- IN create_entityfieldinstancevalue text,
		null,-- IN create_entityfieldinstanceentityfieldname text,
		null,-- IN create_entityfieldformatentityuuid uuid,
		null,-- IN create_entityfieldformatentityname text,
		null,-- IN create_entityfieldwidgetentityuuid uuid,
		null,-- IN create_entityfieldwidgetentityname text,
		null,-- IN create_entityfieldinstanceexternalid text,
		null,-- IN create_entityfieldinstanceexternalsystemuuid uuid,
		null,-- IN create_entityfieldinstancedeleted boolean,
		null,-- IN create_entityfieldinstancedraft boolean,
		null,-- OUT create_entityfieldinstanceentityuuid uuid,
		null,-- IN create_languagetypeuuid uuid,
		337)

-- invalid templateid
	-- no test written yet

-- valid insert
	call entity.crud_entityfieldinstance_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0',-- IN create_entityfieldinstanceownerentityuuid uuid,
		'744feee2-a676-41fc-8e03-a70e54e9f8e8',-- IN create_entityfieldinstanceentityinstanceentityuuid uuid,
		'ee3de35e-47e8-4590-a71f-6070abe760c7',-- IN create_entityfieldinstanceentityfieldentityuuid uuid,
		'test value'||now()::text,-- IN create_entityfieldinstancevalue text,
		null,-- IN create_entityfieldinstanceentityfieldname text,
		null,-- IN create_entityfieldformatentityuuid uuid,
		null,-- IN create_entityfieldformatentityname text,
		null,-- IN create_entityfieldwidgetentityuuid uuid,
		null,-- IN create_entityfieldwidgetentityname text,
		null,-- IN create_entityfieldinstanceexternalid text,
		null,-- IN create_entityfieldinstanceexternalsystemuuid uuid,
		null,-- IN create_entityfieldinstancedeleted boolean,
		null,-- IN create_entityfieldinstancedraft boolean,
		null,-- OUT create_entityfieldinstanceentityuuid uuid,
		null,-- IN create_languagetypeuuid uuid,
		337)


*/

-- constanneeded when looking up entity templates and fields 
-- entity templatse and field are owned by the customer and tendrel
tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

-- validate mandatory fields  
-- might want to split this into 3 checks so each retun can be a unique error
if (create_entityfieldinstanceownerentityuuid isNull
		or create_entityfieldinstanceentityinstanceentityuuid isNull
		or create_entityfieldinstanceentityfieldentityuuid isNull)
	then return; -- need an error code  
	else tempentityfieldinstanceownerentityuuid = create_entityfieldinstanceownerentityuuid;
		tempentityfieldinstanceentityinstanceentityuuid = create_entityfieldinstanceentityinstanceentityuuid;
		tempentityfieldinstanceentityfieldentityuuid = create_entityfieldinstanceentityfieldentityuuid;
end if;

-- Return an error if the entity is not set to a customer.  
-- We need the customerid when dealing with languagemaster
select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,tempentityfieldinstanceownerentityuuid,null,false,null,null,null, null);

if tempcustomerid isNull
	then return; -- need an error code  
end if;

-- Is the instance valid and the owner the same as what was sent in 
select entityinstanceownerentityuuid, entityinstanceentitytemplateentityuuid 
into tempentityinstanceownerentityuuid, tempentityinstanceentitytemplateentityuuid
from entity.crud_entityinstance_read_min(tempentityfieldinstanceownerentityuuid, tempentityfieldinstanceentityinstanceentityuuid, null, null, null, null, false, null, null, null, null, null);

if tempentityinstanceownerentityuuid isNull or tempentityinstanceownerentityuuid <> tempentityfieldinstanceownerentityuuid	
	then return ; -- need an error code  
end if;

-- Is the field valid for the template 
-----------------------------------------------------------------------------------
-- FUTURE: handle lazy init here.  If fielduuid is null and field name is not null.
-- FUTURE: Use the passed in format and widget if this is a create field sceanrio

select entityfieldentitytemplateentityuuid, entityfieldname
into tempentityfieldinstanceentitytemplateentityuuid, tempentityfieldinstanceentityfieldname
from entity.crud_entityfield_read_min(tempentityfieldinstanceownerentityuuid,null,tempentityfieldinstanceentityfieldentityuuid,null, null, null,null);

-- check if this is a primary template
if tempentityfieldinstanceentitytemplateentityuuid isNull
	then  select entityfieldentitytemplateentityuuid, entityfieldname
			into tempentityfieldinstanceentitytemplateentityuuid, tempentityfieldinstanceentityfieldname
			from entity.crud_entityfield_read_min(tendreluuid,null,tempentityfieldinstanceentityfieldentityuuid,null, null, null,null);
end if;

if tempentityfieldinstanceentitytemplateentityuuid isnull 
	or tempentityfieldinstanceentitytemplateentityuuid <> tempentityinstanceentitytemplateentityuuid	
	then return; -- need an error code  
end if;

-- setup the language type
if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,templanguagetypeentityuuid);

if templanguagetypeid isNull
	then return;
end if;

-- set default values

If create_entityfieldinstancedeleted isNull
	then tempentityinstancedeleted = false;
	else tempentityinstancedeleted = create_entityinstancedeleted;
end if;

If create_entityfieldinstancedraft isNull
	then tempentityinstancedraft = false;
	else tempentityinstancedraft = create_entityinstancedraft;
end if;

-- this needs to be smarter.  
-- Leverage the result type and the field to know if this is needed and is translatable.  
-- insert value into languagemaster

if create_entityfieldinstancevalue notNull
	then	insert into public.languagemaster
				(languagemastercustomerid,
				languagemastersourcelanguagetypeid,
				languagemastersource,
				languagemastermodifiedby)
			values(tempcustomerid,
				templanguagetypeid, 	
				create_entityfieldinstancevalue,    
				create_modifiedbyid)
			Returning languagemasteruuid into templanguagemasteruuid;
	else templanguagemasteruuid = null;
end if;

-- now let's create the field instance  

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid,  
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue,  
		entityfieldinstancevaluelanguagemasteruuid, 
		entityfieldinstancecreateddate,
		entityfieldinstancemodifieddate, 
		entityfieldinstancestartdate, 
		entityfieldinstanceenddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid, 
		entityfieldinstancerefid, 
		entityfieldinstancerefuuid, 
		entityfieldinstanceentityfieldname,  
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancedeleted, 
		entityfieldinstancedraft )
	values (
		tempentityfieldinstanceentityinstanceentityuuid,
		tempentityfieldinstanceownerentityuuid,  
		create_entityfieldinstancevalue,
		templanguagemasteruuid,
		now(),
		now(), 
		now(), 
		null, 
		tempentityfieldinstanceentityfieldentityuuid,
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		null,
		null,
		tempentityfieldinstanceentityfieldname,
		templanguagetypeentityuuid,
		tempentityinstancedeleted,
		tempentityinstancedraft
		) 	Returning entityfieldinstanceuuid into tempentityinstanceuuid;

create_entityfieldinstanceentityuuid = tempentityinstanceuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfieldinstance_create(uuid,uuid,uuid,text,text,uuid,text,uuid,text,text,uuid,boolean,boolean,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_create(uuid,uuid,uuid,text,text,uuid,text,uuid,text,text,uuid,boolean,boolean,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_create(uuid,uuid,uuid,text,text,uuid,text,uuid,text,text,uuid,boolean,boolean,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_create(uuid,uuid,uuid,text,text,uuid,text,uuid,text,text,uuid,boolean,boolean,uuid,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfieldinstance_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfieldinstance_delete(IN create_entityfieldinstanceownerentityuuid uuid, IN create_entityfieldinstanceentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

-- tests needed

	-- no owner isNull
		call entity.crud_entityfieldinstance_delete(
			null, -- IN create_entityinstanceownerentityuuid uuid,
			'f6aad9bf-d98d-43c6-8a2c-e3c076f4089d', -- IN create_entityfieldinstanceentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_entityfieldinstance_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfieldinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_entityfieldinstance_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfieldinstanceownerentityuuid uuid,
			'3c04bedf-bcd8-40de-ae35-3a650146f7d7', -- IN create_entityfieldinstanceentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_entityfieldinstance_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfieldinstanceownerentityuuid uuid,
			'f6aad9bf-d98d-43c6-8a2c-e3c076f4089d', -- IN create_entityfieldinstanceentityuuid uuid,	
			337)

	-- reset the data
		update entity.entityfieldinstance
		set entityfieldinstancedeleted = false
		where entityfieldinstanceuuid = 'f6aad9bf-d98d-43c6-8a2c-e3c076f4089d'

-- use this to find fields to work with
select  * from  entity.entityfieldinstance order by entityfieldinstancecreateddate desc limit 100

-- how to check if the update was successful
select * from entity.entityfieldinstance where entityfieldinstancedeleted = true
select * from entity.entityfieldinstance where entityfieldinstanceownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

*/

-- check for owner 

if create_entityfieldinstanceownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for field

if create_entityfieldinstanceentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the field record to deleted

update entity.entityfieldinstance
set entityfieldinstancedeleted = true,
	entityfieldinstancemodifieddate = now(),
	entityfieldinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entityfieldinstanceownerentityuuid = create_entityfieldinstanceownerentityuuid
	and entityfieldinstanceuuid = create_entityfieldinstanceentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfieldinstance_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityfieldinstance_read_api(uuid[],uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityfieldinstance_read_api(read_entityfieldinstanceownerentityuuid uuid[], read_entityfieldinstanceentityinstanceentityuuid uuid, read_entityfieldinstanceentityuuid uuid, read_allentityfieldinstances boolean, read_entityfieldinstancesenddeleted boolean, read_entityfieldinstancesenddrafts boolean, read_entityfieldinstancesendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entityfieldinstanceuuid uuid, entityfieldinstanceentityinstanceentityuuid uuid, entityfieldinstanceentityinstanceentityname text, entityfieldinstanceownerentityuuid uuid, entityfieldinstanceownerentityname text, entityfieldinstancetemplateentityuuid uuid, entityfieldinstancetemplateentityname text, entityfieldinstancetemplateprimary boolean, entityfieldinstanceentityfieldentityuuid uuid, entityfieldinstancetranslatedname text, entityfieldinstancetypeentityuuid uuid, entityfieldinstancetypename text, entityfieldinstanceentitytypeentityuuid uuid, entityfieldinstanceentitytypename text, entityfieldinstanceformatentityuuid uuid, entityfieldinstanceformatname text, entityfieldinstancewidgetentityuuid uuid, entityfieldinstancewidgetname text, entityfieldinstancevalue text, entityfieldinstancevaluelanguagemasteruuid text, entityfieldinstanceorder integer, entityfieldinstanceiscalculated boolean, entityfieldinstanceiseditable boolean, entityfieldinstanceisvisible boolean, entityfieldinstanceisrequired boolean, entityfieldinstanceisprimary boolean, entityfieldinstancetranslate boolean, entityfieldinstancecreateddate timestamp with time zone, entityfieldinstancemodifieddate timestamp with time zone, entityfieldinstancestartdate timestamp with time zone, entityfieldinstanceenddate timestamp with time zone, entityfieldinstancemodifiedbyuuid text, entityfieldinstancerefid bigint, entityfieldinstancerefuuid text, entityfieldinstancevaluelanguagetypeentityuuid uuid, entityfieldinstancedeleted boolean, entityfieldinstancedraft boolean, entityfieldinstanceactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allcustomers boolean; 
	tempentityfieldinstancesenddeleted boolean[];
	tempentityfieldinstancesenddrafts boolean[];
	tempentityfieldinstancesendinactive boolean[];
	templanguagetranslationtypeid bigint;	
	templanguagetranslationtypeuuid text;
BEGIN

-- Curently ignores language translation.  We should change this in the future for location. 
-- Might want to add a parameter to send in active as a boolean
-- probably should move this to use arrays for in parameters

/*  examples

-- call entity.test_entity()

-- all customers all entities all tags
select * from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific customer all entities all tags
select * from entity.crud_entityfieldinstance_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific entity instance

select * from entity.crud_entityfieldinstance_read_full(
	'f90d618d-5de7-4126-8c65-0afb700c6c61', --read_entityfieldinstanceownerentityuuid uuid,
	'b6b8b170-954d-47cf-8d84-d925babd0987', --read_entityfieldinstanceentityinstanceentityuuid uuid,
	null, --read_entityfieldinstanceentityuuid uuid,
	false, --read_allentityfieldinstances boolean,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null,
	null )

-- specific field instance

select * from entity.crud_entityfieldinstance_read_full(
	'f90d618d-5de7-4126-8c65-0afb700c6c61', --read_entityfieldinstanceownerentityuuid uuid,
	'b6b8b170-954d-47cf-8d84-d925babd0987', --read_entityfieldinstanceentityinstanceentityuuid uuid,
	'28e66975-b0d8-4420-ad44-8a4173e4e64f', --read_entityfieldinstanceentityuuid uuid,
	false, --read_allentityfieldinstances boolean,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null,
	null )

select * from entity.entityfieldinstance limit 10

*/

if read_entityfieldinstanceownerentityuuid isNull
	then allcustomers = true;
	else allcustomers = false;
end if;

if read_languagetranslationtypeentityuuid isNull
	then read_languagetranslationtypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'; 
end if;

select systaguuid, systagid
into templanguagetranslationtypeuuid,templanguagetranslationtypeid
from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeentityuuid, null, false,read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts, read_entityfieldinstancesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9');

-- all entities
 
return query 
SELECT 
		read_languagetranslationtypeentityuuid,
		efi.entityfieldinstanceuuid, 
		efi.entityfieldinstanceentityinstanceentityuuid, 
		efi.entityfieldinstanceentityinstanceentityname,			
		efi.entityfieldinstanceownerentityuuid,
		COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),	
		template.entitytemplateuuid as template,
		template.entitytemplatename as template_name,
		template.entitytemplateisprimary as template_primary,
		efi.entityfieldinstanceentityfieldentityuuid,
		field.entityfieldtranslatedname,
		field.entityfieldtypeentityuuid, 
		field.entityfieldtypename,
		field.entityfieldentitytypeentityuuid, 
		field.entityfieldentitytypename,
		field.entityfieldformatentityuuid, 
		field.entityfieldformatname, 
		field.entityfieldwidgetentityuuid, 
		field.entityfieldwidgetname,
		efi.entityfieldinstancevalue,    -- how do we determin this (should be a value, a string, or a uuid)
		efi.entityfieldinstancevaluelanguagemasteruuid,
		field.entityfieldorder::integer,
		field.entityfieldiscalculated, 
		field.entityfieldiseditable, 
		field.entityfieldisvisible, 
		field.entityfieldisrequired, 
		field.entityfieldisprimary, 
		field.entityfieldtranslate,
		efi.entityfieldinstancecreateddate, 
		efi.entityfieldinstancemodifieddate, 
		efi.entityfieldinstancestartdate, 
		efi.entityfieldinstanceenddate, 
		efi.entityfieldinstancemodifiedbyuuid, 
		efi.entityfieldinstancerefid, 
		efi.entityfieldinstancerefuuid, 
		efi.entityfieldinstancevaluelanguagetypeentityuuid, 
		efi.entityfieldinstancedeleted, 
		efi.entityfieldinstancedraft,
		case when efi.entityfieldinstancedeleted then false
				when efi.entityfieldinstancedraft then false
				when efi.entityfieldinstanceenddate::Date > now()::date 
					and efi.entityfieldinstancestartdate < now() then false
				else true
		end as entityfieldinstanceactive
	from (select * from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,null,read_languagetranslationtypeentityuuid)) efi
		join  entity.entityinstance eiowner
			on efi.entityfieldinstanceownerentityuuid= eiowner.entityinstanceuuid  
				and efi.entityfieldinstanceownerentityuuid = ANY(read_entityfieldinstanceownerentityuuid)
		join languagemaster lmowner
			on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
		left join public.languagetranslations ltowner
			on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
				and ltowner.languagetranslationtypeid = templanguagetranslationtypeid
		inner join (select * from entity.crud_entityfield_read_full(null, null, null,true, null, null,read_languagetranslationtypeentityuuid)) field
			on efi.entityfieldinstanceentityfieldentityuuid = entityfielduuid
		inner join (select * from entity.crud_entitytemplate_read_full(null, null, null, null, null,read_languagetranslationtypeentityuuid)) template
			on field.entityfieldentitytemplateentityuuid   = template.entitytemplateuuid; 		
	return;

end;
$function$;


REVOKE ALL ON FUNCTION entity.crud_entityfieldinstance_read_api(uuid[],uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_api(uuid[],uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_api(uuid[],uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_api(uuid[],uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityfieldinstance_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityfieldinstance_read_full(read_entityfieldinstanceownerentityuuid uuid, read_entityfieldinstanceentityinstanceentityuuid uuid, read_entityfieldinstanceentityuuid uuid, read_allentityfieldinstances boolean, read_entityfieldinstancesenddeleted boolean, read_entityfieldinstancesenddrafts boolean, read_entityfieldinstancesendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entityfieldinstanceuuid uuid, entityfieldinstanceentityinstanceentityuuid uuid, entityfieldinstanceentityinstanceentityname text, entityfieldinstanceownerentityuuid uuid, entityfieldinstanceownerentityname text, entityfieldinstancevalue text, entityfieldinstancevaluelanguagemasteruuid text, entityfieldinstancecreateddate timestamp with time zone, entityfieldinstancemodifieddate timestamp with time zone, entityfieldinstancestartdate timestamp with time zone, entityfieldinstanceenddate timestamp with time zone, entityfieldinstanceentityfieldentityuuid uuid, entityfieldinstancemodifiedbyuuid text, entityfieldinstancerefid bigint, entityfieldinstancerefuuid text, entityfieldinstanceentityfieldname text, entityfieldinstancevaluelanguagetypeentityuuid uuid, entityfieldinstancedeleted boolean, entityfieldinstancedraft boolean, entityfieldinstanceinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allcustomers boolean; 
	tempentityfieldinstancesenddeleted boolean[];
	tempentityfieldinstancesenddrafts boolean[];
	tempentityfieldinstancesendinactive boolean[];
	templanguagetranslationtypeid bigint;
BEGIN

-- Curently ignores language translation.  We should change this in the future for location. 
-- Might want to add a parameter to send in active as a boolean
-- probably should move this to use arrays for in parameters

/*  examples

-- call entity.test_entity()

-- all customers all entities all tags
select * from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific customer all entities all tags
select * from entity.crud_entityfieldinstance_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific entity instance

select * from entity.crud_entityfieldinstance_read_full(
	'f90d618d-5de7-4126-8c65-0afb700c6c61', --read_entityfieldinstanceownerentityuuid uuid,
	'b6b8b170-954d-47cf-8d84-d925babd0987', --read_entityfieldinstanceentityinstanceentityuuid uuid,
	null, --read_entityfieldinstanceentityuuid uuid,
	false, --read_allentityfieldinstances boolean,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null,
	null )

-- specific field instance

select * from entity.crud_entityfieldinstance_read_full(
	'f90d618d-5de7-4126-8c65-0afb700c6c61', --read_entityfieldinstanceownerentityuuid uuid,
	'b6b8b170-954d-47cf-8d84-d925babd0987', --read_entityfieldinstanceentityinstanceentityuuid uuid,
	'28e66975-b0d8-4420-ad44-8a4173e4e64f', --read_entityfieldinstanceentityuuid uuid,
	false, --read_allentityfieldinstances boolean,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null,
	null )

select * from entity.entityfieldinstance limit 10

*/

if read_entityfieldinstanceownerentityuuid isNull
	then allcustomers = true;
	else allcustomers = false;
end if;

if read_languagetranslationtypeentityuuid isNull
	then read_languagetranslationtypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'; 
end if;

if read_entityfieldinstancesenddeleted isNull and read_entityfieldinstancesenddeleted = false
	then tempentityfieldinstancesenddeleted = Array[false];
	else tempentityfieldinstancesenddeleted = Array[true,false];
end if;

if read_entityfieldinstancesenddrafts isNull and read_entityfieldinstancesenddrafts = false
	then tempentityfieldinstancesenddrafts = Array[false];
	else tempentityfieldinstancesenddrafts = Array[true,false];
end if;

if read_entityfieldinstancesendinactive isNull and read_entityfieldinstancesendinactive = false
	then tempentityfieldinstancesendinactive = Array[true];
	else tempentityfieldinstancesendinactive = Array[true,false];
end if;

templanguagetranslationtypeid =  (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeentityuuid, null, false,read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts, read_entityfieldinstancesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'));

-- all entities

if allcustomers = true and read_allentityfieldinstances = true 
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			efi.entityfieldinstanceuuid, 
			efi.entityfieldinstanceentityinstanceentityuuid, 
			COALESCE(lt.languagetranslationvalue,lm.languagemastersource),			
			efi.entityfieldinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),		
			efi.entityfieldinstancevalue, 
			efi.entityfieldinstancevaluelanguagemasteruuid,
			efi.entityfieldinstancecreateddate, 
			efi.entityfieldinstancemodifieddate, 
			efi.entityfieldinstancestartdate, 
			efi.entityfieldinstanceenddate, 
			efi.entityfieldinstanceentityfieldentityuuid, 
			efi.entityfieldinstancemodifiedbyuuid, 
			efi.entityfieldinstancerefid, 
			efi.entityfieldinstancerefuuid, 
			efi.entityfieldinstanceentityfieldname, 
			efi.entityfieldinstancevaluelanguagetypeentityuuid, 
			efi.entityfieldinstancedeleted, 
			efi.entityfieldinstancedraft,
	case when efi.entityfieldinstancedeleted then false
			when efi.entityfieldinstancedraft then false
			when efi.entityfieldinstanceenddate::Date > now()::date 
				and efi.entityfieldinstancestartdate < now() then false
			else true
	end as entityfieldinstanceactive
		from entity.entityfieldinstance efi
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityfieldinstanceownerentityuuid,null,null,allcustomers,read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts,read_entityfieldinstancesendinactive, null)) as cust
				on cust.customerentityuuid = efi.entityfieldinstanceownerentityuuid
					and efi.entityfieldinstancedeleted = ANY (tempentityfieldinstancesenddeleted)
				 	and efi.entityfieldinstancedraft = ANY (tempentityfieldinstancesenddrafts)
			join  entity.entityinstance ei  
				on efi.entityfieldinstanceentityinstanceentityuuid = ei.entityinstanceuuid
			join languagemaster lm
				on ei.entityinstancenameuuid = lm.languagemasteruuid
			left join public.languagetranslations lt
				on lt.languagetranslationmasterid  = lm.languagemasterid
					and lt.languagetranslationtypeid = templanguagetranslationtypeid 					 
			join  entity.entityinstance eiowner
				on efi.entityfieldinstanceownerentityuuid= eiowner.entityinstanceuuid
			join languagemaster lmowner
				on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
			left join public.languagetranslations ltowner
				on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
					and ltowner.languagetranslationtypeid = templanguagetranslationtypeid) as foo
		where foo.entityfieldinstanceactive = Any (tempentityfieldinstancesendinactive) ; 		
		return;
end if;

-- all instances for a customer

if allcustomers = false and read_allentityfieldinstances = true 
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			efi.entityfieldinstanceuuid, 
			efi.entityfieldinstanceentityinstanceentityuuid, 
			COALESCE(lt.languagetranslationvalue,lm.languagemastersource),			
			efi.entityfieldinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),		
			efi.entityfieldinstancevalue, 
			efi.entityfieldinstancevaluelanguagemasteruuid,
			efi.entityfieldinstancecreateddate, 
			efi.entityfieldinstancemodifieddate, 
			efi.entityfieldinstancestartdate, 
			efi.entityfieldinstanceenddate, 
			efi.entityfieldinstanceentityfieldentityuuid, 
			efi.entityfieldinstancemodifiedbyuuid, 
			efi.entityfieldinstancerefid, 
			efi.entityfieldinstancerefuuid, 
			efi.entityfieldinstanceentityfieldname, 
			efi.entityfieldinstancevaluelanguagetypeentityuuid, 
			efi.entityfieldinstancedeleted, 
			efi.entityfieldinstancedraft,
	case when efi.entityfieldinstancedeleted then false
			when efi.entityfieldinstancedraft then false
			when efi.entityfieldinstanceenddate::Date > now()::date 
				and efi.entityfieldinstancestartdate < now() then false
			else true
	end as entityfieldinstanceactive
		from entity.entityfieldinstance efi
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityfieldinstanceownerentityuuid,null,null,allcustomers,read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts,read_entityfieldinstancesendinactive, null)) as cust
				on cust.customerentityuuid = efi.entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceownerentityuuid = read_entityfieldinstanceownerentityuuid
					and efi.entityfieldinstancedeleted = ANY (tempentityfieldinstancesenddeleted)
				 	and efi.entityfieldinstancedraft = ANY (tempentityfieldinstancesenddrafts)
			join  entity.entityinstance ei  
				on efi.entityfieldinstanceentityinstanceentityuuid = ei.entityinstanceuuid
			join languagemaster lm
				on ei.entityinstancenameuuid = lm.languagemasteruuid
			left join public.languagetranslations lt
				on lt.languagetranslationmasterid  = lm.languagemasterid
					and lt.languagetranslationtypeid = templanguagetranslationtypeid 					 
			join  entity.entityinstance eiowner
				on efi.entityfieldinstanceownerentityuuid= eiowner.entityinstanceuuid
			join languagemaster lmowner
				on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
			left join public.languagetranslations ltowner
				on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
					and ltowner.languagetranslationtypeid = templanguagetranslationtypeid) as foo
		where foo.entityfieldinstanceactive = Any (tempentityfieldinstancesendinactive) ; 	
		return;
end if;

-- all fields for an instance

if read_entityfieldinstanceentityinstanceentityuuid notNull 
	and read_entityfieldinstanceentityuuid isnull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			efi.entityfieldinstanceuuid, 
			efi.entityfieldinstanceentityinstanceentityuuid, 
			COALESCE(lt.languagetranslationvalue,lm.languagemastersource),			
			efi.entityfieldinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),		
			efi.entityfieldinstancevalue, 
			efi.entityfieldinstancevaluelanguagemasteruuid,
			efi.entityfieldinstancecreateddate, 
			efi.entityfieldinstancemodifieddate, 
			efi.entityfieldinstancestartdate, 
			efi.entityfieldinstanceenddate, 
			efi.entityfieldinstanceentityfieldentityuuid, 
			efi.entityfieldinstancemodifiedbyuuid, 
			efi.entityfieldinstancerefid, 
			efi.entityfieldinstancerefuuid, 
			efi.entityfieldinstanceentityfieldname, 
			efi.entityfieldinstancevaluelanguagetypeentityuuid, 
			efi.entityfieldinstancedeleted, 
			efi.entityfieldinstancedraft,
	case when efi.entityfieldinstancedeleted then false
			when efi.entityfieldinstancedraft then false
			when efi.entityfieldinstanceenddate::Date > now()::date 
				and efi.entityfieldinstancestartdate < now() then false
			else true
	end as entityfieldinstanceactive
		from entity.entityfieldinstance efi
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityfieldinstanceownerentityuuid,null,null,allcustomers, read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts,read_entityfieldinstancesendinactive,null)) as cust
				on cust.customerentityuuid = efi.entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceownerentityuuid = read_entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceentityinstanceentityuuid = read_entityfieldinstanceentityinstanceentityuuid
					and efi.entityfieldinstancedeleted = ANY (tempentityfieldinstancesenddeleted)
				 	and efi.entityfieldinstancedraft = ANY (tempentityfieldinstancesenddrafts)
			join  entity.entityinstance ei  
				on efi.entityfieldinstanceentityinstanceentityuuid = ei.entityinstanceuuid
			join languagemaster lm
				on ei.entityinstancenameuuid = lm.languagemasteruuid
			left join public.languagetranslations lt
				on lt.languagetranslationmasterid  = lm.languagemasterid
					and lt.languagetranslationtypeid = templanguagetranslationtypeid 					 
			join  entity.entityinstance eiowner
				on efi.entityfieldinstanceownerentityuuid= eiowner.entityinstanceuuid
			join languagemaster lmowner
				on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
			left join public.languagetranslations ltowner
				on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
					and ltowner.languagetranslationtypeid = templanguagetranslationtypeid) as foo
		where foo.entityfieldinstanceactive = Any (tempentityfieldinstancesendinactive) ; 		
			return;
end if;

	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			efi.entityfieldinstanceuuid, 
			efi.entityfieldinstanceentityinstanceentityuuid, 
			COALESCE(lt.languagetranslationvalue,lm.languagemastersource),			
			efi.entityfieldinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),		
			efi.entityfieldinstancevalue, 
			efi.entityfieldinstancevaluelanguagemasteruuid,
			efi.entityfieldinstancecreateddate, 
			efi.entityfieldinstancemodifieddate, 
			efi.entityfieldinstancestartdate, 
			efi.entityfieldinstanceenddate, 
			efi.entityfieldinstanceentityfieldentityuuid, 
			efi.entityfieldinstancemodifiedbyuuid, 
			efi.entityfieldinstancerefid, 
			efi.entityfieldinstancerefuuid, 
			efi.entityfieldinstanceentityfieldname, 
			efi.entityfieldinstancevaluelanguagetypeentityuuid, 
			efi.entityfieldinstancedeleted, 
			efi.entityfieldinstancedraft,
	case when efi.entityfieldinstancedeleted then false
			when efi.entityfieldinstancedraft then false
			when efi.entityfieldinstanceenddate::Date > now()::date 
				and efi.entityfieldinstancestartdate < now() then false
			else true
	end as entityfieldinstanceactive
		from entity.entityfieldinstance efi
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityfieldinstanceownerentityuuid,null,null,allcustomers, read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts,read_entityfieldinstancesendinactive,null)) as cust
				on cust.customerentityuuid = efi.entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceownerentityuuid = read_entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceentityinstanceentityuuid = read_entityfieldinstanceentityinstanceentityuuid
					and efi.entityfieldinstanceuuid  = read_entityfieldinstanceentityuuid 
					and efi.entityfieldinstancedeleted = ANY (tempentityfieldinstancesenddeleted)
				 	and efi.entityfieldinstancedraft = ANY (tempentityfieldinstancesenddrafts)
			join  entity.entityinstance ei  
				on efi.entityfieldinstanceentityinstanceentityuuid = ei.entityinstanceuuid
			join languagemaster lm
				on ei.entityinstancenameuuid = lm.languagemasteruuid
			left join public.languagetranslations lt
				on lt.languagetranslationmasterid  = lm.languagemasterid
					and lt.languagetranslationtypeid = templanguagetranslationtypeid 					 
			join  entity.entityinstance eiowner
				on efi.entityfieldinstanceownerentityuuid= eiowner.entityinstanceuuid
			join languagemaster lmowner
				on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
			left join public.languagetranslations ltowner
				on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
					and ltowner.languagetranslationtypeid = templanguagetranslationtypeid) as foo
		where foo.entityfieldinstanceactive = Any (tempentityfieldinstancesendinactive) ; 		
		return;
End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityfieldinstance_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_full(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityfieldinstance_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityfieldinstance_read_min(read_entityfieldinstanceownerentityuuid uuid, read_entityfieldinstanceentityinstanceentityuuid uuid, read_entityfieldinstanceentityuuid uuid, read_allentityfieldinstances boolean, read_entityfieldinstancesenddeleted boolean, read_entityfieldinstancesenddrafts boolean, read_entityfieldinstancesendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entityfieldinstanceuuid uuid, entityfieldinstanceentityinstanceentityuuid uuid, entityfieldinstanceownerentityuuid uuid, entityfieldinstancevalue text, entityfieldinstancevaluelanguagemasteruuid text, entityfieldinstancecreateddate timestamp with time zone, entityfieldinstancemodifieddate timestamp with time zone, entityfieldinstancestartdate timestamp with time zone, entityfieldinstanceenddate timestamp with time zone, entityfieldinstanceentityfieldentityuuid uuid, entityfieldinstancemodifiedbyuuid text, entityfieldinstancerefid bigint, entityfieldinstancerefuuid text, entityfieldinstanceentityfieldname text, entityfieldinstancevaluelanguagetypeentityuuid uuid, entityfieldinstancedeleted boolean, entityfieldinstancedraft boolean, entityfieldinstanceinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allcustomers boolean; 
	tempentityfieldinstancesenddeleted boolean[];
	tempentityfieldinstancesenddrafts boolean[];
	tempentityfieldinstancesendinactive boolean[];
	templanguagetranslationtypeid bigint;
BEGIN

-- Curently ignores language translation.  We should change this in the future for location. 
-- Might want to add a parameter to send in active as a boolean
-- probably should move this to use arrays for in parameters

/*  examples

-- call entity.test_entity()

-- all customers all entities all tags
select * from entity.crud_entityfieldinstance_read_min(null,null,null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific customer all entities all tags
select * from entity.crud_entityfieldinstance_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific entity instance

select * from entity.crud_entityfieldinstance_read_min(
	'f90d618d-5de7-4126-8c65-0afb700c6c61', --read_entityfieldinstanceownerentityuuid uuid,
	'b6b8b170-954d-47cf-8d84-d925babd0987', --read_entityfieldinstanceentityinstanceentityuuid uuid,
	null, --read_entityfieldinstanceentityuuid uuid,
	false, --read_allentityfieldinstances boolean,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null,
	null )

-- specific field instance

select * from entity.crud_entityfieldinstance_read_min(
	'f90d618d-5de7-4126-8c65-0afb700c6c61', --read_entityfieldinstanceownerentityuuid uuid,
	'b6b8b170-954d-47cf-8d84-d925babd0987', --read_entityfieldinstanceentityinstanceentityuuid uuid,
	'28e66975-b0d8-4420-ad44-8a4173e4e64f', --read_entityfieldinstanceentityuuid uuid,
	false, --read_allentityfieldinstances boolean,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null,
	null )

select * from entity.entityfieldinstance limit 10

*/

if read_entityfieldinstanceownerentityuuid isNull
	then allcustomers = true;
	else allcustomers = false;
end if;

if read_languagetranslationtypeentityuuid isNull
	then read_languagetranslationtypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'; 
end if;

if read_entityfieldinstancesenddeleted isNull and read_entityfieldinstancesenddeleted = false
	then tempentityfieldinstancesenddeleted = Array[false];
	else tempentityfieldinstancesenddeleted = Array[true,false];
end if;

if read_entityfieldinstancesenddrafts isNull and read_entityfieldinstancesenddrafts = false
	then tempentityfieldinstancesenddrafts = Array[false];
	else tempentityfieldinstancesenddrafts = Array[true,false];
end if;

if read_entityfieldinstancesendinactive isNull and read_entityfieldinstancesendinactive = false
	then tempentityfieldinstancesendinactive = Array[true];
	else tempentityfieldinstancesendinactive = Array[true,false];
end if;

templanguagetranslationtypeid =  (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeentityuuid, null, false,read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts, read_entityfieldinstancesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'));

-- all entities

if allcustomers = true and read_allentityfieldinstances = true 
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			efi.entityfieldinstanceuuid, 
			efi.entityfieldinstanceentityinstanceentityuuid, 
			efi.entityfieldinstanceownerentityuuid, 
			efi.entityfieldinstancevalue, 
			efi.entityfieldinstancevaluelanguagemasteruuid, 
			efi.entityfieldinstancecreateddate, 
			efi.entityfieldinstancemodifieddate, 
			efi.entityfieldinstancestartdate, 
			efi.entityfieldinstanceenddate, 
			efi.entityfieldinstanceentityfieldentityuuid, 
			efi.entityfieldinstancemodifiedbyuuid, 
			efi.entityfieldinstancerefid, 
			efi.entityfieldinstancerefuuid, 
			efi.entityfieldinstanceentityfieldname, 
			efi.entityfieldinstancevaluelanguagetypeentityuuid, 
			efi.entityfieldinstancedeleted, 
			efi.entityfieldinstancedraft,
	case when efi.entityfieldinstancedeleted then false
			when efi.entityfieldinstancedraft then false
			when efi.entityfieldinstanceenddate::Date > now()::date 
				and efi.entityfieldinstancestartdate < now() then false
			else true
	end as entityfieldinstanceactive
		from entity.entityfieldinstance efi
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityfieldinstanceownerentityuuid,null,null,allcustomers, read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts,read_entityfieldinstancesendinactive,
null)) as cust
				on cust.customerentityuuid = efi.entityfieldinstanceownerentityuuid
					and efi.entityfieldinstancedeleted = ANY (tempentityfieldinstancesenddeleted)
				 	and efi.entityfieldinstancedraft = ANY (tempentityfieldinstancesenddrafts)) as foo
		where foo.entityfieldinstanceactive = Any (tempentityfieldinstancesendinactive) ; 	
		return;
end if;

-- all instances for a customer

if allcustomers = false and read_allentityfieldinstances = true 
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			efi.entityfieldinstanceuuid, 
			efi.entityfieldinstanceentityinstanceentityuuid, 
			efi.entityfieldinstanceownerentityuuid, 
			efi.entityfieldinstancevalue, 
			efi.entityfieldinstancevaluelanguagemasteruuid, 
			efi.entityfieldinstancecreateddate, 
			efi.entityfieldinstancemodifieddate, 
			efi.entityfieldinstancestartdate, 
			efi.entityfieldinstanceenddate, 
			efi.entityfieldinstanceentityfieldentityuuid, 
			efi.entityfieldinstancemodifiedbyuuid, 
			efi.entityfieldinstancerefid, 
			efi.entityfieldinstancerefuuid, 
			efi.entityfieldinstanceentityfieldname, 
			efi.entityfieldinstancevaluelanguagetypeentityuuid, 
			efi.entityfieldinstancedeleted, 
			efi.entityfieldinstancedraft,
	case when efi.entityfieldinstancedeleted then false
			when efi.entityfieldinstancedraft then false
			when efi.entityfieldinstanceenddate::Date > now()::date 
				and efi.entityfieldinstancestartdate < now() then false
			else true
	end as entityfieldinstanceactive
		from entity.entityfieldinstance efi
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityfieldinstanceownerentityuuid,null,null,allcustomers,read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts,read_entityfieldinstancesendinactive,
 null)) as cust
				on cust.customerentityuuid = efi.entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceownerentityuuid = read_entityfieldinstanceownerentityuuid
					and efi.entityfieldinstancedeleted = ANY (tempentityfieldinstancesenddeleted)
				 	and efi.entityfieldinstancedraft = ANY (tempentityfieldinstancesenddrafts)) as foo
		where foo.entityfieldinstanceactive = Any (tempentityfieldinstancesendinactive) ; 		
		return;
end if;

-- all fields for an instance

if read_entityfieldinstanceentityinstanceentityuuid notNull 
	and read_entityfieldinstanceentityuuid isnull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			efi.entityfieldinstanceuuid, 
			efi.entityfieldinstanceentityinstanceentityuuid, 
			efi.entityfieldinstanceownerentityuuid, 
			efi.entityfieldinstancevalue, 
			efi.entityfieldinstancevaluelanguagemasteruuid, 
			efi.entityfieldinstancecreateddate, 
			efi.entityfieldinstancemodifieddate, 
			efi.entityfieldinstancestartdate, 
			efi.entityfieldinstanceenddate, 
			efi.entityfieldinstanceentityfieldentityuuid, 
			efi.entityfieldinstancemodifiedbyuuid, 
			efi.entityfieldinstancerefid, 
			efi.entityfieldinstancerefuuid, 
			efi.entityfieldinstanceentityfieldname, 
			efi.entityfieldinstancevaluelanguagetypeentityuuid, 
			efi.entityfieldinstancedeleted, 
			efi.entityfieldinstancedraft,
	case when efi.entityfieldinstancedeleted then false
			when efi.entityfieldinstancedraft then false
			when efi.entityfieldinstanceenddate::Date > now()::date 
				and efi.entityfieldinstancestartdate < now() then false
			else true
	end as entityfieldinstanceactive	
		from entity.entityfieldinstance efi
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityfieldinstanceownerentityuuid,null,null,allcustomers, read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts,read_entityfieldinstancesendinactive,
null)) as cust
				on cust.customerentityuuid = efi.entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceownerentityuuid = read_entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceentityinstanceentityuuid = read_entityfieldinstanceentityinstanceentityuuid
					and efi.entityfieldinstancedeleted = ANY (tempentityfieldinstancesenddeleted)
				 	and efi.entityfieldinstancedraft = ANY (tempentityfieldinstancesenddrafts)) as foo
		where foo.entityfieldinstanceactive = Any (tempentityfieldinstancesendinactive) ; 		
		return;
end if;

	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			efi.entityfieldinstanceuuid, 
			efi.entityfieldinstanceentityinstanceentityuuid, 
			efi.entityfieldinstanceownerentityuuid, 
			efi.entityfieldinstancevalue, 
			efi.entityfieldinstancevaluelanguagemasteruuid, 
			efi.entityfieldinstancecreateddate, 
			efi.entityfieldinstancemodifieddate, 
			efi.entityfieldinstancestartdate, 
			efi.entityfieldinstanceenddate, 
			efi.entityfieldinstanceentityfieldentityuuid, 
			efi.entityfieldinstancemodifiedbyuuid, 
			efi.entityfieldinstancerefid, 
			efi.entityfieldinstancerefuuid, 
			efi.entityfieldinstanceentityfieldname, 
			efi.entityfieldinstancevaluelanguagetypeentityuuid, 
			efi.entityfieldinstancedeleted, 
			efi.entityfieldinstancedraft,
	case when efi.entityfieldinstancedeleted then false
			when efi.entityfieldinstancedraft then false
			when efi.entityfieldinstanceenddate::Date > now()::date 
				and efi.entityfieldinstancestartdate < now() then false
			else true
	end as entityfieldinstanceactivee	
		from entity.entityfieldinstance efi
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityfieldinstanceownerentityuuid,null,null,allcustomers,read_entityfieldinstancesenddeleted,read_entityfieldinstancesenddrafts,read_entityfieldinstancesendinactive,
 null)) as cust
				on cust.customerentityuuid = efi.entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceownerentityuuid = read_entityfieldinstanceownerentityuuid
					and efi.entityfieldinstanceentityinstanceentityuuid = read_entityfieldinstanceentityinstanceentityuuid
					and efi.entityfieldinstanceuuid  = read_entityfieldinstanceentityuuid 
					and efi.entityfieldinstancedeleted = ANY (tempentityfieldinstancesenddeleted)
				 	and efi.entityfieldinstancedraft = ANY (tempentityfieldinstancesenddrafts)) as foo
		where foo.entityfieldinstanceactive = Any (tempentityfieldinstancesendinactive) ; 	
		return;
End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityfieldinstance_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityfieldinstance_read_min(uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfieldinstance_update(uuid,uuid,uuid,uuid,text,text,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfieldinstance_update(IN update_entityfieldinstanceentityuuid uuid, IN update_entityfieldinstanceownerentityuuid uuid, IN update_entityfieldinstanceentityinstanceentityuuid uuid, IN update_entityfieldinstanceentityfieldentityuuid uuid, IN update_entityfieldinstancevalue text, IN update_entityfieldinstanceentityfieldname text, IN update_entityfieldinstanceexternalid text, IN update_entityfieldinstanceexternalsystemuuid uuid, IN update_entityfieldinstancedeleted boolean, IN update_entityfieldinstancedraft boolean, IN update_entityfieldinstancestartdate timestamp with time zone, IN update_entityfieldinstanceenddate timestamp with time zone, IN update_entityfieldinstancemodifiedbyuuid text, IN update_languagetypeuuid uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare

Begin

-- Once created, the only things that can change after something is publsihed are ???

/*
-- Add testing here

*/

-- remove this once language issues are passed through

if update_languagetypeuuid isNull
	then update_languagetypeuuid = (select systaguuid from systag where systagid = 20);
End if;

 if update_entityfieldinstancedraft = true or ((select entityfieldinstancedraft 
										from entity.entityfieldinstance
										WHERE entityfieldinstanceuuid = update_entityfieldinstanceentityuuid ) = true)
	then -- let everything change
		UPDATE entity.entityfieldinstance
			SET entityfieldinstancevalue = case when update_entityfieldinstancevalue notnull 
												then update_entityfieldinstancevalue
												else entityfieldinstancevalue end, 
				entityfieldinstancevaluelanguagetypeentityuuid = case when update_entityfieldinstancevalue notnull 
																		then update_languagetypeuuid
																		else entityfieldinstancevaluelanguagetypeentityuuid end,
				entityfieldinstancestartdate = case when update_entityfieldinstancestartdate notnull 
												then update_entityfieldinstancestartdate
												else entityfieldinstancestartdate end,
				entityfieldinstanceenddate = update_entityfieldinstanceenddate,
				entityfieldinstancedeleted = case when update_entityfieldinstancedeleted notnull 
										then update_entityfieldinstancedeleted
										else entityfieldinstancedeleted end, 
				entityfieldinstancedraft = case when update_entityfieldinstancedraft notnull 
										then update_entityfieldinstancedraft
										else entityfieldinstancedraft end,	
				entityfieldinstancemodifieddate=now(),
				entityfieldinstancemodifiedbyuuid = update_entityfieldinstancemodifiedbyuuid
		WHERE entityfieldinstanceuuid = update_entityfieldinstanceentityuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entityfieldinstance
			SET entityfieldinstancevalue = case when update_entityfieldinstancevalue notnull 
												then update_entityfieldinstancevalue
												else entityfieldinstancevalue end, 
				entityfieldinstancevaluelanguagetypeentityuuid = case when update_entityfieldinstancevalue notnull 
																		then update_languagetypeuuid
																		else entityfieldinstancevaluelanguagetypeentityuuid end,
				entityfieldinstancestartdate = case when update_entityfieldinstancestartdate notnull 
												then update_entityfieldinstancestartdate
												else entityfieldinstancestartdate end,
				entityfieldinstanceenddate = update_entityfieldinstanceenddate,
				entityfieldinstancedeleted = case when update_entityfieldinstancedeleted notnull 
										then update_entityfieldinstancedeleted
										else entityfieldinstancedeleted end, 
				entityfieldinstancedraft = case when update_entityfieldinstancedraft notnull 
										then update_entityfieldinstancedraft
										else entityfieldinstancedraft end,	
				entityfieldinstancemodifieddate=now(),
				entityfieldinstancemodifiedbyuuid = update_entityfieldinstancemodifiedbyuuid
		WHERE entityfieldinstanceuuid = update_entityfieldinstanceentityuuid;
end if;

if  update_entityfieldinstancevalue notNull and (coalesce(update_entityfieldinstancevalue,'') <> '')
	then
		-- update the languagemaster if the name changed
	
		update languagemaster
		set languagemastersource = update_entityfieldinstancevalue,
			languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid =update_entityfieldinstancemodifiedbyuuid),
			languagemastersourcelanguagetypeid = (select entityinstanceoriginalid from entity.entityinstance where entityfieldinstanceuuid = update_languagetypeuuid),
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'		
		from entity.entityfieldinstance
		where entityfieldinstanceuuid = update_entityfieldinstanceentityuuid
			and languagemasteruuid = entityfieldinstancevaluelanguagetypeentityuuid
			and languagemastersource <> update_entityfieldinstancevalue;

END IF;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfieldinstance_update(uuid,uuid,uuid,uuid,text,text,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_update(uuid,uuid,uuid,uuid,text,text,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_update(uuid,uuid,uuid,uuid,text,text,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfieldinstance_update(uuid,uuid,uuid,uuid,text,text,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfileinstance_create(uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfileinstance_create(IN create_entityfileinstanceownerentityuuid uuid, IN create_entityfileinstanceentityentityinstanceentityuuid uuid, IN create_entityfileinstanceentityfieldinstanceentityuuid uuid, IN create_entityfileinstancestoragelocation text, IN create_entityfileinstancemimetypeuuid uuid, IN create_languagetypeuuid uuid, IN create_entityfileinstancedeleted boolean, IN create_entityfileinstancedraft boolean, OUT create_entityfileinstanceentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
 
Declare
	templanguagetypeentityuuid uuid;	
	tempentityfileinstanceownerentityuuid uuid;
	tempcustomeruuid text;
	tempcustomerid bigint;
	tendreluuid uuid;
	tempentityfileinstancemimetypeuuid uuid;
	tempentityfileinstancedeleted boolean;
	tempentityfileinstancedraft boolean;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templanguagemasteruuid text;	
	
Begin

/*
-- tests needed
	-- mime types
	select * from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,null)

	-- bogus owner fail
		call entity.crud_entityfileinstance_create(
			'744feee2-a676-41fc-8e03-a70e54e9f8e8', -- IN create_entityfileinstanceownerentityuuid uuid,
			'744feee2-a676-41fc-8e03-a70e54e9f8e8', -- IN create_entityfileinstanceentityentityinstanceentityuuid uuid,
			'a89f6687-dcb1-423d-8906-7ab1b3a49892', -- IN create_entityfileinstanceentityfieldinstanceentityuuid uuid,
			'storagelocation '||now()::text, -- IN create_entityfileinstancestoragelocation text,
			'c262c14c-7f33-4a51-b11a-b65892b59d0e', -- IN create_entityfileinstancemimetypeuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- IN create_entityfileinstancedeleted boolean,
			null, -- IN create_entityfileinstancedraft boolean,
			null, -- OUT create_entityfileinstanceentityuuid uuid,
			337)
			
	-- no instance or  field instance then error 
		call entity.crud_entityfileinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfileinstanceownerentityuuid uuid,
			null, -- IN create_entityfileinstanceentityentityinstanceentityuuid uuid,
			null, -- IN create_entityfileinstanceentityfieldinstanceentityuuid uuid,
			'storagelocation '||now()::text, -- IN create_entityfileinstancestoragelocation text,
			'c262c14c-7f33-4a51-b11a-b65892b59d0e', -- IN create_entityfileinstancemimetypeuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- IN create_entityfileinstancedeleted boolean,
			null, -- IN create_entityfileinstancedraft boolean,
			null, -- OUT create_entityfileinstanceentityuuid uuid,
			337)

	-- no storage location
		call entity.crud_entityfileinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfileinstanceownerentityuuid uuid,
			'744feee2-a676-41fc-8e03-a70e54e9f8e8', -- IN create_entityfileinstanceentityentityinstanceentityuuid uuid,
			'a89f6687-dcb1-423d-8906-7ab1b3a49892', -- IN create_entityfileinstanceentityfieldinstanceentityuuid uuid,
			null, -- IN create_entityfileinstancestoragelocation text,
			'c262c14c-7f33-4a51-b11a-b65892b59d0e', -- IN create_entityfileinstancemimetypeuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- IN create_entityfileinstancedeleted boolean,
			null, -- IN create_entityfileinstancedraft boolean,
			null, -- OUT create_entityfileinstanceentityuuid uuid,
			337)
	
	-- add description to template


	-- add File to field instance
		call entity.crud_entityfileinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfileinstanceownerentityuuid uuid,
			'744feee2-a676-41fc-8e03-a70e54e9f8e8', -- IN create_entityfileinstanceentityentityinstanceentityuuid uuid,
			'a89f6687-dcb1-423d-8906-7ab1b3a49892', -- IN create_entityfileinstanceentityfieldinstanceentityuuid uuid,
			'storagelocation '||now()::text, -- IN create_entityfileinstancestoragelocation text,
			'c262c14c-7f33-4a51-b11a-b65892b59d0e', -- IN create_entityfileinstancemimetypeuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- IN create_entityfileinstancedeleted boolean,
			null, -- IN create_entityfileinstancedraft boolean,
			null, -- OUT create_entityfileinstanceentityuuid uuid,
			337)
		
select * from entity.entityfieldinstance where entityfieldinstanceuuid = 'a89f6687-dcb1-423d-8906-7ab1b3a49892'
*/


tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if create_entityfileinstanceownerentityuuid isNull
	then tempentityfileinstanceownerentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61'::uuid; -- default is customer 0.  Could look this up instead.  
	else tempentityfileinstanceownerentityuuid = create_entityfileinstanceownerentityuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
					from entity.crud_customer_read_min(null,tempentityfileinstanceownerentityuuid,null,false,null,null,null, null);

-- probably return an error if the entity is not set to a customer.  Need to sort this out.  
if tempcustomerid isNull
	then return;
end if;

-- setup the language type

if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,templanguagetypeentityuuid);

-- one of these can't be null. 

if 	(create_entityfileinstanceentityentityinstanceentityuuid isNull 
		and create_entityfileinstanceentityfieldinstanceentityuuid isNull)
	then return;
end if;

-- storagelocation can't be null

if 	(create_entityfileinstancestoragelocation isNull and coalesce(create_entityfileinstancestoragelocation, '') = '')
	then return;
end if;

-- Check for valid mime type 

if create_entityfileinstancemimetypeuuid in (
	select systagentityuuid from entity.crud_systag_read_min(tendreluuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,templanguagetypeentityuuid)
	)
	then tempentityfileinstancemimetypeuuid = create_entityfileinstancemimetypeuuid;
	else return;
end if;

If create_entityfileinstancedeleted isNull
	then tempentityfileinstancedeleted = false;
	else tempentityfileinstancedeleted = create_entityfileinstancedeleted;
end if;

If create_entityfileinstancedraft isNull
	then tempentityfileinstancedraft = false;
	else tempentityfileinstancedraft = create_entityfileinstancedraft;
end if;

-- time to insert the base entity tables

INSERT INTO entity.entityfileinstance(
	entityfileinstanceownerentityuuid, 
	entityfileinstanceentityentityinstanceentityuuid, 
	entityfileinstanceentityfieldinstanceentityuuid, 
	entityfileinstancestoragelocation, 
	entityfileinstancemimetypeuuid, 
	entityfileinstancecreateddate, 
	entityfileinstancemodifieddate, 
	entityfileinstanceexternalid, 
	entityfileinstancemodifiedby, 
	entityfileinstancerefid, 
	entityfileinstancerefuuid, 
	entityfileinstancedraft, 
	entityfileinstancedeleted, 
	entityfileinstanceexternalsystemuuid)
values(
	tempentityfileinstanceownerentityuuid,
	create_entityfileinstanceentityentityinstanceentityuuid,
	create_entityfileinstanceentityfieldinstanceentityuuid,
	create_entityfileinstancestoragelocation,
	tempentityfileinstancemimetypeuuid,
	now(),
	now(),
	null,
	(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid), 
	null,
	null,
	tempentityfileinstancedraft,
	tempentityfileinstancedeleted,
	null)
	Returning entityfileinstanceuuid into create_entityfileinstanceentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfileinstance_create(uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_create(uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_create(uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_create(uuid,uuid,uuid,text,uuid,uuid,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfileinstance_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfileinstance_delete(IN create_entityfileinstanceownerentityuuid uuid, IN create_entityfileinstanceentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

-- tests needed
	-- no owner isNull
		call entity.crud_entityfileinstance_delete(
			null, -- IN create_entityfileinstanceownerentityuuid uuid,
			'f6aad9bf-d98d-43c6-8a2c-e3c076f4089d', -- IN create_entityfileinstanceentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_entityfileinstance_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfileinstanceownerentityuuid uuid,
			null, -- IN create_entityfileinstanceentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_entityfileinstance_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfileinstanceownerentityuuid uuid,
			'f6aad9bf-d98d-43c6-8a2c-e3c076f4089d', -- IN create_entityfileinstanceentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_entityfileinstance_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityfileinstanceownerentityuuid uuid,
			'f6aad9bf-d98d-43c6-8a2c-e3c076f4089d', -- IN create_entityfileinstanceentityuuid uuid,	
			337)

-- how to check if the update was successful
select * from entity.entityfileinstance where entityfileinstancedeleted = true

*/

-- check for owner 

if create_entityfileinstanceownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for file instance

if create_entityfileinstanceentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the file instance record to deleted

update entity.entityfileinstance
set entityfileinstancedeleted = true,
	entityfileinstancemodifieddate = now(),
	entityfileinstancemodifiedby = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entityfileinstanceownerentityuuid = create_entityfileinstanceownerentityuuid
	and entityfileinstanceuuid = create_entityfileinstanceentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfileinstance_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityfileinstance_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityfileinstance_read_full(read_ownerentityuuid uuid, read_entityfileinstanceentityuuid uuid, read_entityfileinstanceentityentityinstanceentityuuid uuid, read_entityfileinstanceentityfieldinstanceentityuuid uuid, read_entityfileinstancesenddeleted boolean, read_entityfileinstancesenddrafts boolean, read_entityfileinstancesendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entityfileinstanceuuid uuid, entityfileinstanceownerentityuuid uuid, entityfileinstanceownerentityname text, entityfileinstanceentityentityinstanceentityuuid uuid, entityfileinstanceentityentityinstanceentityname text, entityfileinstanceentityfieldinstanceentityuuid uuid, entityfileinstanceentityfieldinstanceentityname text, entityfileinstancestoragelocation text, entityfileinstancemimetypeuuid uuid, entityfileinstancemimetypename text, entityfileinstancecreateddate timestamp with time zone, entityfileinstancemodifieddate timestamp with time zone, entityfileinstanceexternalid text, entityfileinstanceexternalsystemuuid uuid, entityfileinstancemodifiedbyuuid text, entityfileinstancerefid bigint, entityfileinstancerefuuid text, entityfileinstancedraft boolean, entityfileinstancedeleted boolean, entityfileinstanceinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentityfileinstancesenddeleted boolean[]; 
	tempentityfileinstancesenddrafts  boolean[];  
	tempentityfileinstancesendinactive boolean[];
	tendreluuid uuid;
BEGIN

/*  Examples

-- all file instances
select * from entity.crud_entityfileinstance_read_full(null, null, null,null, null, null,null,null)

-- all file instances for an owner
select * from entity.crud_entityfileinstance_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,null, null, null,null,null)

-- all file instances for a fileinstanceuuid
select * from entity.crud_entityfileinstance_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', 'b19d4a6d-151b-4924-88c8-da66b64f0658', null,null, null, null,null,null)

-- all file instances for a instanceuuid
select * from entity.crud_entityfileinstance_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, '87fc6238-1c3d-4f34-8a38-609855ab94ab',null, null, null,null,null)

-- all file instances for a fieldinstanceuuid
select * from entity.crud_entityfileinstance_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,'6d29bc9a-f37f-43e4-81c0-b34a940ae1f9', null, null,null,null)

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min(	tendreluuid, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,read_entityfileinstancesenddeleted, read_entityfileinstancesenddrafts,read_entityfileinstancesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_entityfileinstancesenddeleted isNull and read_entityfileinstancesenddeleted = false
	then tempentityfileinstancesenddeleted = Array[false];
	else tempentityfileinstancesenddeleted = Array[true,false];
end if;

if read_entityfileinstancesenddrafts isNull and read_entityfileinstancesenddrafts = false
	then tempentityfileinstancesenddrafts = Array[false];
	else tempentityfileinstancesenddrafts = Array[true,false];
end if;

if read_entityfileinstancesendinactive isNull and read_entityfileinstancesendinactive = false
	then tempentityfileinstancesendinactive = Array[true];
	else tempentityfileinstancesendinactive = Array[true,false];
end if;

-- probably can do this cealner with less sql

if allowners = true and (read_entityfileinstanceentityuuid isNull)
	then
	return query 
		select *
		from (
			SELECT
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				cust.customername,				
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				ei.entityinstancename,
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efield.entityfieldinstanceentityfieldname,
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				mime.systagtype,				
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi	
				inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entityfileinstancesenddeleted,read_entityfileinstancesenddrafts,read_entityfileinstancesendinactive, null)) as cust
					on cust.customerentityuuid = efi.entityfileinstanceownerentityuuid
						and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
					 	and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)
				left join (select * 
							from entity.crud_entityinstance_read_full(
								read_ownerentityuuid,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeuuid)) as ei				
					on ei.entityinstanceuuid = efi.entityfileinstanceentityentityinstanceentityuuid
				left join (select * 
							from entity.crud_entityfieldinstance_read_full(
							read_ownerentityuuid,null, null,true,null,null,null,read_languagetranslationtypeuuid)) as	efield	
					on efield.entityfieldinstanceuuid = efi.entityfileinstanceentityfieldinstanceentityuuid
				inner join (select * from entity.crud_systag_read_full(tendreluuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = efi.entityfileinstancemimetypeuuid
			) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive) ;
		return;
end if;

if allowners = false and read_entityfileinstanceentityuuid notNull  
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				cust.customername,				
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				ei.entityinstancename,
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efield.entityfieldinstanceentityfieldname,
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				mime.systagtype,				
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi	
				inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entityfileinstancesenddeleted,read_entityfileinstancesenddrafts,read_entityfileinstancesendinactive, null)) as cust
					on cust.customerentityuuid = efi.entityfileinstanceownerentityuuid
						and (efi.entityfileinstanceownerentityuuid = read_ownerentityuuid
							or efi.entityfileinstanceownerentityuuid = tendreluuid) 
						and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
					 	and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)
						and efi.entityfileinstanceuuid = read_entityfileinstanceentityuuid	
				left join (select * 
							from entity.crud_entityinstance_read_full(
								read_ownerentityuuid,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeuuid)) as ei				
					on ei.entityinstanceuuid = efi.entityfileinstanceentityentityinstanceentityuuid
				left join (select * 
							from entity.crud_entityfieldinstance_read_full(
							read_ownerentityuuid,null, null,true,null,null,null,read_languagetranslationtypeuuid)) as	efield	
					on efield.entityfieldinstanceuuid = efi.entityfileinstanceentityfieldinstanceentityuuid
				inner join (select * from entity.crud_systag_read_full(tendreluuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = efi.entityfileinstancemimetypeuuid
			) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive
		) ;
		return;
end if;

if allowners = false and read_entityfileinstanceentityentityinstanceentityuuid  notNull
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				cust.customername,				
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				ei.entityinstancename,
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efield.entityfieldinstanceentityfieldname,
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				mime.systagtype,				
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
			FROM entity.entityfileinstance	efi	
				inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entityfileinstancesenddeleted,read_entityfileinstancesenddrafts,read_entityfileinstancesendinactive, null)) as cust
					on cust.customerentityuuid = efi.entityfileinstanceownerentityuuid
						and (efi.entityfileinstanceownerentityuuid = read_ownerentityuuid
							or efi.entityfileinstanceownerentityuuid = tendreluuid)  
						and efi.entityfileinstanceentityentityinstanceentityuuid = read_entityfileinstanceentityentityinstanceentityuuid 
						and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
						and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)
				left join (select * 
							from entity.crud_entityinstance_read_full(
								read_ownerentityuuid,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeuuid)) as ei				
					on ei.entityinstanceuuid = efi.entityfileinstanceentityentityinstanceentityuuid
				left join (select * 
							from entity.crud_entityfieldinstance_read_full(
							read_ownerentityuuid,null, null,true,null,null,null,read_languagetranslationtypeuuid)) as	efield	
					on efield.entityfieldinstanceuuid = efi.entityfileinstanceentityfieldinstanceentityuuid
				inner join (select * from entity.crud_systag_read_full(tendreluuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = efi.entityfileinstancemimetypeuuid) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive) ;
end if;

if allowners = false and read_entityfileinstanceentityfieldinstanceentityuuid notNull
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				cust.customername,				
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				ei.entityinstancename,
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efield.entityfieldinstanceentityfieldname,
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				mime.systagtype,				
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi
				inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entityfileinstancesenddeleted,read_entityfileinstancesenddrafts,read_entityfileinstancesendinactive, null)) as cust
					on cust.customerentityuuid = efi.entityfileinstanceownerentityuuid
						and (efi.entityfileinstanceownerentityuuid = read_ownerentityuuid
							or efi.entityfileinstanceownerentityuuid = tendreluuid) 
						and efi.entityfileinstanceentityfieldinstanceentityuuid = read_entityfileinstanceentityfieldinstanceentityuuid 
						and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
						and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)
				left join (select * 
							from entity.crud_entityinstance_read_full(
								read_ownerentityuuid,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeuuid)) as ei				
					on ei.entityinstanceuuid = efi.entityfileinstanceentityentityinstanceentityuuid
				left join (select * 
							from entity.crud_entityfieldinstance_read_full(
							read_ownerentityuuid,null, null,true,null,null,null,read_languagetranslationtypeuuid)) as	efield	
					on efield.entityfieldinstanceuuid = efi.entityfileinstanceentityfieldinstanceentityuuid
				inner join (select * from entity.crud_systag_read_full(tendreluuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = efi.entityfileinstancemimetypeuuid) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive) ;
end if;

if allowners = false and read_entityfileinstanceentityfieldinstanceentityuuid isNull 
	and read_entityfileinstanceentityuuid isNull and read_entityfileinstanceentityentityinstanceentityuuid isNull  
	then
	return query 
		select *
		from (
			SELECT
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				cust.customername,				
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				ei.entityinstancename,
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efield.entityfieldinstanceentityfieldname,
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				mime.systagtype,				
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi	
				inner join (select * from entity.crud_customer_read_full(null,null, null,true,read_entityfileinstancesenddeleted,read_entityfileinstancesenddrafts,read_entityfileinstancesendinactive, null)) as cust
					on cust.customerentityuuid = efi.entityfileinstanceownerentityuuid
						and (efi.entityfileinstanceownerentityuuid = read_ownerentityuuid
							or efi.entityfileinstanceownerentityuuid = tendreluuid) 
						and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
					 	and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)
				left join (select * 
							from entity.crud_entityinstance_read_full(
								read_ownerentityuuid,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeuuid)) as ei				
					on ei.entityinstanceuuid = efi.entityfileinstanceentityentityinstanceentityuuid
				left join (select * 
							from entity.crud_entityfieldinstance_read_full(
							read_ownerentityuuid,null, null,true,null,null,null,read_languagetranslationtypeuuid)) as	efield	
					on efield.entityfieldinstanceuuid = efi.entityfileinstanceentityfieldinstanceentityuuid
				inner join (select * from entity.crud_systag_read_full(tendreluuid,null,null, 'e5d15a8c-ea2e-4def-b214-6eb7f6b1e70a', false,null,null, null,read_languagetranslationtypeuuid)) as mime
					on mime.systagentityuuid = efi.entityfileinstancemimetypeuuid
			) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive) ;
		return;
end if;	

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityfileinstance_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfileinstance_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfileinstance_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityfileinstance_read_full(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityfileinstance_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityfileinstance_read_min(read_ownerentityuuid uuid, read_entityfileinstanceentityuuid uuid, read_entityfileinstanceentityentityinstanceentityuuid uuid, read_entityfileinstanceentityfieldinstanceentityuuid uuid, read_entityfileinstancesenddeleted boolean, read_entityfileinstancesenddrafts boolean, read_entityfileinstancesendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entityfileinstanceuuid uuid, entityfileinstanceownerentityuuid uuid, entityfileinstanceentityentityinstanceentityuuid uuid, entityfileinstanceentityfieldinstanceentityuuid uuid, entityfileinstancestoragelocation text, entityfileinstancemimetypeuuid uuid, entityfileinstancecreateddate timestamp with time zone, entityfileinstancemodifieddate timestamp with time zone, entityfileinstanceexternalid text, entityfileinstanceexternalsystemuuid uuid, entityfileinstancemodifiedby text, entityfileinstancerefid bigint, entityfileinstancerefuuid text, entityfileinstancedraft boolean, entityfileinstancedeleted boolean, entityfileinstanceinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentityfileinstancesenddeleted boolean[]; 
	tempentityfileinstancesenddrafts  boolean[];  
	tempentityfileinstancesendinactive boolean[];
	tendreluuid uuid;
BEGIN

/*  Examples

-- all file instances
select * from entity.crud_entityfileinstance_read_min(null, null, null,null, null, null,null,null)

-- all file instances for an owner
select * from entity.crud_entityfileinstance_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,null, null, null,null,null)

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min(	tendreluuid, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,read_entityfileinstancesenddeleted, read_entityfileinstancesenddrafts,read_entityfileinstancesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_entityfileinstancesenddeleted isNull and read_entityfileinstancesenddeleted = false
	then tempentityfileinstancesenddeleted = Array[false];
	else tempentityfileinstancesenddeleted = Array[true,false];
end if;

if read_entityfileinstancesenddrafts isNull and read_entityfileinstancesenddrafts = false
	then tempentityfileinstancesenddrafts = Array[false];
	else tempentityfileinstancesenddrafts = Array[true,false];
end if;

if read_entityfileinstancesendinactive isNull and read_entityfileinstancesendinactive = false
	then tempentityfileinstancesendinactive = Array[true];
	else tempentityfileinstancesendinactive = Array[true,false];
end if;

-- probably can do this cealner with less sql

if allowners = true and (read_entityfileinstanceentityuuid isNull)
	then
	return query 
		select *
		from (
			SELECT
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi	
			where efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
				 and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive) ;
		return;
end if;

if allowners = false and read_entityfileinstanceentityuuid notNull  
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi	
		where (efi.entityfileinstanceownerentityuuid = read_ownerentityuuid
					or efi.entityfileinstanceownerentityuuid = tendreluuid) 
			and efi.entityfileinstanceuuid = read_entityfileinstanceentityuuid			
			and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
			and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive
		) ;
		return;
end if;

if allowners = false and read_entityfileinstanceentityentityinstanceentityuuid  notNull
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi	
			where (efi.entityfileinstanceownerentityuuid = read_ownerentityuuid
					or efi.entityfileinstanceownerentityuuid = tendreluuid) 
				and efi.entityfileinstanceentityentityinstanceentityuuid = read_entityfileinstanceentityentityinstanceentityuuid 
				and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
				and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive) ;
end if;

if allowners = false and read_entityfileinstanceentityfieldinstanceentityuuid notNull
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi	
			where (efi.entityfileinstanceownerentityuuid = read_ownerentityuuid
					or efi.entityfileinstanceownerentityuuid = tendreluuid) 
				and efi.entityfileinstanceentityfieldinstanceentityuuid = read_entityfileinstanceentityfieldinstanceentityuuid
				and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
				and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive) ;
end if;

if allowners = false and read_entityfileinstanceentityfieldinstanceentityuuid isNull 
	and read_entityfileinstanceentityuuid isNull and read_entityfileinstanceentityentityinstanceentityuuid isNull  
	then
	return query 
		select *
		from (
			SELECT
				read_languagetranslationtypeuuid,
				efi.entityfileinstanceuuid,
				efi.entityfileinstanceownerentityuuid, 
				efi.entityfileinstanceentityentityinstanceentityuuid, 
				efi.entityfileinstanceentityfieldinstanceentityuuid, 
				efi.entityfileinstancestoragelocation, 
				efi.entityfileinstancemimetypeuuid, 
				efi.entityfileinstancecreateddate, 
				efi.entityfileinstancemodifieddate, 
				efi.entityfileinstanceexternalid, 
				efi.entityfileinstanceexternalsystemuuid, 
				efi.entityfileinstancemodifiedby, 
				efi.entityfileinstancerefid, 
				efi.entityfileinstancerefuuid, 
				efi.entityfileinstancedraft, 
				efi.entityfileinstancedeleted,
	case when efi.entityfileinstancedeleted then false
			when efi.entityfileinstancedraft then false
			else true
			end as entityfileinstanceactive
		FROM entity.entityfileinstance	efi	
			where (efi.entityfileinstanceownerentityuuid = read_ownerentityuuid
					or efi.entityfileinstanceownerentityuuid = tendreluuid) 
					and efi.entityfileinstancedeleted = ANY (tempentityfileinstancesenddeleted)
				 	and efi.entityfileinstancedraft = ANY (tempentityfileinstancesenddrafts)
				 ) as foo
		where foo.entityfileinstanceactive = Any (tempentityfileinstancesendinactive) ;
		return;
end if;	

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityfileinstance_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfileinstance_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityfileinstance_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityfileinstance_read_min(uuid,uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityfileinstance_update(uuid,uuid,uuid,uuid,text,uuid,boolean,boolean,text,uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityfileinstance_update(IN update_entityfileinstanceentityuuid uuid, IN update_entityfileinstanceownerentityuuid uuid, IN update_entityfileinstanceentityentityinstanceentityuuid uuid, IN update_entityfileinstanceentityfieldinstanceentityuuid uuid, IN update_entityfileinstancestoragelocation text, IN update_entityfileinstancemimetypeuuid uuid, IN update_entityfileinstancedeleted boolean, IN update_entityfileinstancedraft boolean, IN update_entityfileinstancemodifiedbyuuid text, IN update_languagetypeuuid uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare

Begin

-- Once created, the only things that can change after something is publsihed are ???

/*
-- Add testing here

*/

-- remove this once language issues are passed through

if update_languagetypeuuid isNull
	then update_languagetypeuuid = (select systaguuid from systag where systagid = 20);
End if;




 if update_entityfileinstancedraft = true or ((select entityfileinstancedraft 
										from entity.entityfileinstance
										WHERE entityfileinstanceuuid = update_entityfileinstanceentityuuid ) = true)
	then -- let everything change
		UPDATE entity.entityfileinstance
			SET entityfileinstancestoragelocation = case when update_entityfileinstancestoragelocation notnull 
														then update_entityfileinstancestoragelocation
														else entityfileinstancestoragelocation end,
				entityfileinstancemimetypeuuid = case when update_entityfileinstancemimetypeuuid notnull 
														then update_entityfileinstancemimetypeuuid
														else entityfileinstancemimetypeuuid end,
				entityfileinstancedeleted = case when update_entityfileinstancedeleted notnull 
										then update_entityfileinstancedeleted
										else entityfileinstancedeleted end, 
				entityfileinstancedraft = case when update_entityfileinstancedraft notnull 
										then update_entityfileinstancedraft
										else entityfileinstancedraft end,	
				entityfileinstancemodifieddate=now(),
				entityfileinstancemodifiedby = update_entityfileinstancemodifiedbyuuid
		WHERE entityfileinstanceuuid = update_entityfileinstanceentityuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entityfileinstance
			SET entityfileinstancestoragelocation = case when update_entityfileinstancestoragelocation notnull 
														then update_entityfileinstancestoragelocation
														else entityfileinstancestoragelocation end,
				entityfileinstancemimetypeuuid = case when update_entityfileinstancemimetypeuuid notnull 
														then update_entityfileinstancemimetypeuuid
														else entityfileinstancemimetypeuuid end,
				entityfileinstancemodifieddate=now(),
				entityfileinstancemodifiedby = update_entityfileinstancemodifiedbyuuid
		WHERE entityfileinstanceuuid = update_entityfileinstanceentityuuid;
end if;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityfileinstance_update(uuid,uuid,uuid,uuid,text,uuid,boolean,boolean,text,uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_update(uuid,uuid,uuid,uuid,text,uuid,boolean,boolean,text,uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_update(uuid,uuid,uuid,uuid,text,uuid,boolean,boolean,text,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityfileinstance_update(uuid,uuid,uuid,uuid,text,uuid,boolean,boolean,text,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityinstance_create(uuid,uuid,text,uuid,uuid,integer,uuid,text,text,text,uuid,text,uuid,boolean,boolean,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityinstance_create(IN create_entityinstanceownerentityuuid uuid, IN create_entityinstanceentitytemplateentityuuid uuid, IN create_entityinstanceentitytemplateentityname text, IN create_entityinstanceparententityuuid uuid, IN create_entityinstanceecornerstoneentityuuid uuid, IN create_entityinstancecornerstoneorder integer, IN create_entityinstancetaguuid uuid, IN create_entityinstancetag text, IN create_entityinstancename text, IN create_entityinstancescanid text, IN create_entityinstancetypeuuid uuid, IN create_entityinstanceexternalid text, IN create_entityinstanceexternalsystemuuid uuid, IN create_entityinstancedeleted boolean, IN create_entityinstancedraft boolean, OUT create_entityinstanceentityuuid uuid, IN create_languagetypeuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
 	templanguagemasteruuid text;
	tempcustomerid bigint;
	tempcustomeruuid text;	
	tempentityinstanceuuid uuid;
	tempcustagid bigint;
  	tempcustaguuid text;
	tempcustagentityuuid uuid;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	tempcornerstoneorder integer;
	tempentityinstanceownerentityuuid uuid;
	templanguagetypeentityuuid uuid;
	tempentitytemplateuuid uuid;
	tempentitytemplatetypeentityuuid uuid; 
	tempentitytemplatetype text; 
	tempentitytemplateisprimary boolean;
	tempentitytagcustagentityuuid uuid[];
	tempentityinstancedeleted boolean;
	tempentityinstancedraft boolean;
	tempentitytaguuid uuid;

Begin

/*  Future 
-- Validate externalsystem, cornerstone, and parent?  Possible validations - same level - same customer - etc
-- externalsystemuuid vs externalsystementityuuid - one is a systag, but we are not handling this well.  Keep both?  
-- Duplicate checking of tag creation, tempalte creation, and instance type
-- Create languagemaster function - probably all things having to do with language
-- testing should use a created customer with all the bells and whistles

interesting sql:
-- 	select unnest(array['test','test2'])
--	FOREACH tempcustagentityuuid IN ARRAY tempentitytagcustagentityuuid
	LOOP 
		call entity.crud_entitytag_create(tempentityinstanceownerentityuuid,tempentityinstanceuuid,tempcustagentityuuid,tempentitytagcustagentityuuid, null, null, null, null, create_modifiedbyid);
	END LOOP;
*/

/*  Testing

-- during create

-- Using customer '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'
-- test return -- create_entityinstanceentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

-- tests
	-- error - no entityinstanceownerentityuuid
		call entity.crud_entityinstance_create(
			null, -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			null, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)

	-- error - invalid entityinstanceownerentityuuid not a customer
		call entity.crud_entityinstance_create(	
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			null, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)

	-- error - valid entityinstanceownerentityuuid no instance name or empty string
		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'', -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)

	-- error - valid entityinstanceownerentityuuid valid instance name no templateuuid no template name

		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)

	-- error - primary template valid instance name

		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)

	-- error - entityinstanceownerentityuuid valid instance name template/owner mismatch
	
		call entity.crud_entityinstance_create(
			'4e294bf5-115a-42f2-bf37-aaf4655ef8d6', -- IN create_entityinstanceownerentityuuid uuid,
			'e62e67f3-9bd6-4be8-b379-e22d61b51c91', -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)	

	-- success - valid entityinstanceownerentityuuid valid instance name no templateuuid valid template name	no tags no cutags

		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			'newtemplate'||now()::text, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)

-------------------------------------------

	-- success - valid entityinstanceownerentityuuid valid instance name valid templateuuid with tags no cutags
	-- might need to create a to the template created above.  

		call entity.crud_custag_create('70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', null, null, null, 'templatetag'||now()::text, 
									'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, null, null, null, null, null, null, 	337);

		call entity.crud_entitytag_create(
				'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entitytagownerentityuuid uuid,
				null, -- IN create_entitytagentityinstanceuuid uuid,
				'274541f8-5c9f-4e8c-9982-08c35b79e2b3', -- IN create_entitytagentitytemplateuuid uuid,	
				'c2d5ecdd-a657-4448-aef2-54467045134a', -- IN create_entitytagcustaguuid uuid,
				null,
				null,
				null, -- IN create_languagetypeuuid uuid,
				null, -- OUT create_entitytaguuid uuid,
				337::bigint)	

---------------------------------------------------
		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			'274541f8-5c9f-4e8c-9982-08c35b79e2b3', -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			'c2d5ecdd-a657-4448-aef2-54467045134a', -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)

	-- success - valid entityinstanceownerentityuuid valid instance name valid templateuuid no tags invalid custtaguuid

		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			'e62e67f3-9bd6-4be8-b379-e22d61b51c91', -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)	

	-- success - valid entityinstanceownerentityuuid valid templateuuid with tags no custtaguuid with custtagname

		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			'e62e67f3-9bd6-4be8-b379-e22d61b51c91', -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			'newtag'||now()::text, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)	

	-- success - valid entityinstanceownerentityuuid valid templateuuid no tags valid custtaguuid	
		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			'e62e67f3-9bd6-4be8-b379-e22d61b51c91', -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			'5ef190d1-2a73-48e5-a80f-d351065f6692', -- IN create_entityinstancetaguuid uuid,  grab the test one just generated
			null, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337) 

-- possible future tests
	-- dupe checking for custag creation (Maybe put this in custag create and return the existing tag.)
	-- dupe checking on entityinstancename??? 

*/

-- setup customer info
if create_entityinstanceownerentityuuid isNull
	then 
		return; -- need an error code  
	else tempentityinstanceownerentityuuid = create_entityinstanceownerentityuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,tempentityinstanceownerentityuuid,null,false,null,null,null, null);

-- probably return an error if the entity is not set to a customer.  Need to sort this out.  
if tempcustomerid isNull
	then  
		return;
end if;

-- instances need a name
if (create_entityinstancename isNull or coalesce(create_entityinstancename,'')= ''	)
	then return; -- need error code
end if;

-- setup the language type
if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,templanguagetypeentityuuid);

if templanguagetypeid isNull
	then return;
end if;

-- Block Primary templates from creation
if create_entityinstanceentitytemplateentityuuid notNull
	then select entitytemplateuuid, entitytemplatetypeentityuuid, entitytemplateisprimary 
			into tempentitytemplateuuid, tempentitytemplatetypeentityuuid, tempentitytemplateisprimary
			from entity.crud_entitytemplate_read_min(tempentityinstanceownerentityuuid, create_entityinstanceentitytemplateentityuuid, null, null, null, templanguagetypeentityuuid)
			group by entitytemplateuuid, entitytemplatetypeentityuuid, entitytemplateisprimary;
			tempentitytemplatetype = create_entityinstanceentitytemplateentityname; 
	else tempentitytemplateuuid = null;
end if;

-- Instances with no template uuid sent in but a name, create the template
-- Check that the name is not empty/null -- if uuid is null and name is not we cand do lazy initialization of template

if tempentitytemplateuuid isnull 
	and (create_entityinstanceentitytemplateentityname isNull or coalesce(create_entityinstanceentitytemplateentityname,'')= '')
	then return; -- need error code
end if;

-- if we still have no templateuuid but have a template name we need to create this using lazy init
-- We will want to later add the tag to this template.  
-- Have not decided yet if the tag will be an the isntance or template level
if tempentitytemplateuuid isNull and (create_entityinstanceentitytemplateentityname notNull and coalesce(create_entityinstanceentitytemplateentityname, '')<>'')
	then call entity.crud_entitytemplate_create( tempentityinstanceownerentityuuid, null, null, null, null, create_entityinstanceentitytemplateentityname, false, create_entityinstanceentitytemplateentityname, templanguagetypeentityuuid, null, null, null, null, tempentitytemplateuuid, 337::bigint); 
		tempentitytemplatetype = create_entityinstanceentitytemplateentityname;
		tempentitytemplatetypeentityuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplateuuid = tempentitytemplateuuid);
end if;

-- pull any tags that exist on the template.  
tempentitytagcustagentityuuid = Array(
		select entitytagcustagentityuuid
		from entity.crud_entitytag_read_min(tempentityinstanceownerentityuuid, null, null, tempentitytemplateuuid, null, false, null, null, null, templanguagetypeentityuuid));

-- validate, create, or skip the tag

if create_entityinstancetaguuid notnull
	and create_entityinstancetaguuid in ( select custagentityuuid 
								from entity.crud_custag_read_min(tempentityinstanceownerentityuuid,null,null, null, true,null,null, null,templanguagetypeentityuuid) )
	then tempentitytagcustagentityuuid = tempentitytagcustagentityuuid||create_entityinstancetaguuid; 
end if;

If array_length(tempentitytagcustagentityuuid, 1) = 0 and (create_entityinstancetag notNull and coalesce(create_entityinstancetag, '')<>'')
	then call entity.crud_custag_create(
		tempentityinstanceownerentityuuid, 
		null, 
		null, 
		null, 
		create_entityinstancetag, 
		templanguagetypeentityuuid, 
		null, 
		null, 
		null, 
		null, 		
		tempcustagid, 
		tempcustaguuid, 
		tempcustagentityuuid, 	
		null);
end if;

-- create cornerstone order

if create_entityinstancecornerstoneorder is Null
	then tempcornerstoneorder = 1::integer;
	else tempcornerstoneorder = create_entityinstancecornerstoneorder::integer;
end if;

If create_entityinstancedeleted isNull
	then tempentityinstancedeleted = false;
	else tempentityinstancedeleted = create_entityinstancedeleted;
end if;

If create_entityinstancedraft isNull
	then tempentityinstancedraft = false;
	else tempentityinstancedraft = create_entityinstancedraft;
end if;

-- insert name into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		create_entityinstancename,    
		create_modifiedbyid)
	Returning languagemasteruuid into templanguagemasteruuid;

-- now let's create the instance entity 

	INSERT INTO entity.entityinstance(
		entityinstanceoriginalid, 
		entityinstanceoriginaluuid, 
		entityinstanceownerentityuuid, 
		entityinstanceentitytemplateentityuuid, 
		entityinstancetypeentityuuid,   -- this is the entity systag
		entityinstanceentitytemplatename, 		
		entityinstancesiteentityuuid, 
		entityinstanceparententityuuid, 
		entityinstancecornerstoneentityuuid, 
		entityinstancecornerstoneorder, 
		entityinstancescanid, 
		entityinstancetype, -- this is the name of the instance in the smae way we do custag/systag
		entityinstancenameuuid,
		entityinstancedeleted, 
		entityinstancedraft, 
		entityinstanceexternalid, 		
		entityinstanceexternalsystemuuid, -- deprecate???
		entityinstanceexternalsystementityuuid, 
		entityinstancerefid, 
		entityinstancerefuuid,		
		entityinstancecreateddate, 
		entityinstancemodifieddate, 
		entityinstancestartdate, 
		entityinstanceenddate, 
		entityinstancemodifiedbyuuid)
values(
		null,
		null,
		tempentityinstanceownerentityuuid,
		tempentitytemplateuuid,
		tempentitytemplatetypeentityuuid,   
		tempentitytemplatetype,
		null,
		create_entityinstanceparententityuuid,  -- insert the parent id sent in.  If null fix it later with self.  
		create_entityinstanceecornerstoneentityuuid,  -- insert the cornerstone id sent in.  If null fix it later with self.
		tempcornerstoneorder,	
		create_entityinstancename, 
		create_entityinstancename,
		templanguagemasteruuid,
		tempentityinstancedeleted, 
		tempentityinstancedraft, 
		create_entityinstanceexternalid, 		
		null, -- deprecate???
		create_entityinstanceexternalsystemuuid, 
		null,
		null,
		now(),
		now(),
		now(),
		null,
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
	)
	Returning entityinstanceuuid into tempentityinstanceuuid;

	update entity.entityinstance
	set entityinstanceparententityuuid = tempentityinstanceuuid
	where entityinstanceparententityuuid isNull
		and entityinstanceuuid = tempentityinstanceuuid;

	update entity.entityinstance
	set entityinstancecornerstoneentityuuid = tempentityinstanceuuid
	where entityinstancecornerstoneentityuuid isNull
		and entityinstanceuuid = tempentityinstanceuuid;

	-- insert tags

if tempcustagentityuuid notNull
	then call entity.crud_entitytag_create(
			tempentityinstanceownerentityuuid, -- IN create_entitytagownerentityuuid uuid,
			tempentityinstanceuuid, -- IN create_entitytagentityinstanceuuid uuid,
			tempentitytemplateuuid, -- IN create_entitytagentitytemplateuuid uuid,	
			tempcustagentityuuid, -- IN create_entitytagcustaguuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- create_entitytagdraft 
			null, -- create_entitytagdeleted
			tempentitytaguuid, -- OUT create_entitytaguuid uuid,
			337::bigint);
end if;

if array_length(tempentitytagcustagentityuuid, 1) > 0
	then 
		FOREACH tempcustagentityuuid IN ARRAY tempentitytagcustagentityuuid
			LOOP 
				call entity.crud_entitytag_create(
					tempentityinstanceownerentityuuid, -- IN create_entitytagownerentityuuid uuid,
					tempentityinstanceuuid, -- IN create_entitytagentityinstanceuuid uuid,
					tempentitytemplateuuid, -- IN create_entitytagentitytemplateuuid uuid,	
					tempcustagentityuuid, -- IN create_entitytagcustaguuid uuid,
					null, -- IN create_languagetypeuuid uuid,
					null, -- create_entitytagdraft
					null, -- create_entitytagdeleted
					tempentitytaguuid, -- OUT create_entitytaguuid uuid,
					337::bigint);
			END LOOP;
end if;

create_entityinstanceentityuuid = tempentityinstanceuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityinstance_create(uuid,uuid,text,uuid,uuid,integer,uuid,text,text,text,uuid,text,uuid,boolean,boolean,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_create(uuid,uuid,text,uuid,uuid,integer,uuid,text,text,text,uuid,text,uuid,boolean,boolean,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_create(uuid,uuid,text,uuid,uuid,integer,uuid,text,text,text,uuid,text,uuid,boolean,boolean,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_create(uuid,uuid,text,uuid,uuid,integer,uuid,text,text,text,uuid,text,uuid,boolean,boolean,uuid,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityinstance_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityinstance_delete(IN create_entityinstanceownerentityuuid uuid, IN create_entityinstanceentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

-- tests needed
	-- create a template/instnace to work with
		call entity.crud_entityinstance_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			'newtemplate'||now()::text, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||now()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			null, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			337)

	-- no owner isNull
		call entity.crud_entityinstance_delete(
			null, -- IN create_entityinstanceownerentityuuid uuid,
			'7a1c4a83-1364-4b3b-b78a-4d719ca4bebe', -- IN create_entityinstanceentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_entityinstance_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_entityinstance_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityinstanceownerentityuuid uuid,
			'7a1c4a83-1364-4b3b-b78a-4d719ca4bebe', -- IN create_entityinstanceentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_entityinstance_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entityinstanceownerentityuuid uuid,
			'7a1c4a83-1364-4b3b-b78a-4d719ca4bebe', -- IN create_entityinstanceentityuuid uuid,	
			337)

	-- reset the data
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = '7a1c4a83-1364-4b3b-b78a-4d719ca4bebe'

-- use this to find fields to work with
select  * from  entity.entityinstance order by entityinstancecreateddate desc limit 100

-- how to check if the update was successful
select * from entity.entityinstance where entityinstancedeleted = true

*/

-- check for owner 

if create_entityinstanceownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for field

if create_entityinstanceentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the field record to deleted

update entity.entityinstance
set entityinstancedeleted = true,
	entityinstancemodifieddate = now(),
	entityinstanceenddate = now(),
	entityinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entityinstanceownerentityuuid = create_entityinstanceownerentityuuid
	and entityinstanceuuid = create_entityinstanceentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityinstance_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityinstance_read_full(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityinstance_read_full(read_entityinstanceownerentityuuid uuid, read_entityinstanceentityuuid uuid, read_entityinstanceparententityuuid uuid, read_entityinstancecornerstoneentityuuid uuid, read_entityinstanceentitytemplateentityuuid uuid, read_entityinstancetypeentityuuid uuid, read_allentityinstances boolean, read_entityinstancetag uuid, read_entityinstancesenddeleted boolean, read_entityinstancesenddrafts boolean, read_entityinstancesendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entityinstanceoriginalid bigint, entityinstanceoriginaluuid text, entityinstanceuuid uuid, entityinstanceownerentityuuid uuid, entityinstanceownerentityname text, entityinstanceparententityuuid uuid, entityinstanceparententityname text, entityinstancecornerstoneentityuuid uuid, entityinstancecornerstoneentitname text, entityinstancecornerstoneorder integer, entityinstanceentitytemplateentityuuid uuid, entityinstanceentitytemplatename text, entityinstanceentitytemplatetranslatedname text, entityinstancetypeentityuuid uuid, entityinstancetype text, entityinstancenameuuid text, entityinstancename text, entityinstancescanid text, entityinstancesiteentityuuid uuid, entityinstancecreateddate timestamp with time zone, entityinstancemodifieddate timestamp with time zone, entityinstancemodifiedbyuuid text, entityinstancestartdate timestamp with time zone, entityinstanceenddate timestamp with time zone, entityinstanceexternalid text, entityinstanceexternalsystementityuuid uuid, entityinstanceexternalsystementityname text, entityinstancerefid bigint, entityinstancerefuuid text, entityinstancedeleted boolean, entityinstancedraft boolean, entityinstanceactive boolean, entityinstancetagentityuuid uuid)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allcustomers boolean; 
	tempentityinstancesenddeleted boolean[];
	tempentityinstancesenddrafts boolean[];
	tempentityinstancesendinactive boolean[];
	tempentityinstanceparententityuuid uuid[];
	tempentityinstancecornerstoneentityuuid uuid[];
	tempentityinstanceentitytemplateentityuuid uuid[];
	tempentityinstancetypeentityuuid uuid[];
	tempentityinstancetag uuid[];
	templanguagetranslationtypeid bigint;
BEGIN

-- Curently ignores language translation.  We should change this in the future for location. 
-- Might want to add a parameter to send in active as a boolean
-- probably should move this to use arrays for in parameters

/*  examples

-- call entity.test_entity()

-- all customers all entities all tags
select * from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific customer all entities all tags
select * from entity.crud_entityinstance_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific instance

select * from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	'0ce5be8d-2bec-4219-be97-07dc154b2e3b', --read_entityinstanceentityuuid uuid,
	'24855715-9228-4f41-bfe6-493f4c374a6e', --read_entityinstanceparententityuuid uuid,
	'2ab5461d-ad96-4560-a36d-d0fa53bce0f0', --read_entityinstancecornerstoneentityuuid uuid,
	'0b9f3142-e7ed-4f78-8504-ccd2eb505075', --read_entityinstanceentitytemplateentityuuid uuid,
	'67af22cb-3183-4e6e-8542-7968f744965a', --read_entityinstancetypeentityuuid uuid,
	false,
	'f3fe9cae-c21e-4dba-9a10-008cfa6dca39', --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific parent
select entityinstanceparententityuuid,* from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	'24855715-9228-4f41-bfe6-493f4c374a6e', --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific cornerstone 
select * from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	'2ab5461d-ad96-4560-a36d-d0fa53bce0f0', --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific template 
select * from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	'0b9f3142-e7ed-4f78-8504-ccd2eb505075', --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific tag 
select * from entity.crud_entityinstance_read_full(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	'f3fe9cae-c21e-4dba-9a10-008cfa6dca39', --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

select * from entity.entitytag where entitytagentityinstanceentityuuid = '0ce5be8d-2bec-4219-be97-07dc154b2e3b'

select * from entity.entityinstance where entityinstanceuuid = ??

select * from entity.entityinstance limit 100

*/

if read_entityinstanceownerentityuuid isNull
	then allcustomers = true;
	else allcustomers = false;
end if;

if read_languagetranslationtypeentityuuid isNull
	then read_languagetranslationtypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'; 
end if;

if read_entityinstancesenddeleted isNull and read_entityinstancesenddeleted = false
	then tempentityinstancesenddeleted = Array[false];
	else tempentityinstancesenddeleted = Array[true,false];
end if;

if read_entityinstancesenddrafts isNull and read_entityinstancesenddrafts = false
	then tempentityinstancesenddrafts = Array[false];
	else tempentityinstancesenddrafts = Array[true,false];
end if;

if read_entityinstancesendinactive isNull and read_entityinstancesendinactive = false
	then tempentityinstancesendinactive = Array[true];
	else tempentityinstancesendinactive = Array[true,false];
end if;

templanguagetranslationtypeid =  (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, read_languagetranslationtypeentityuuid, null, false,read_entityinstancesenddeleted, read_entityinstancesenddrafts, read_entityinstancesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'));

-- all entities

if allcustomers = true and read_allentityinstances = true 
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid,
			ei.entityinstanceoriginaluuid,
			ei.entityinstanceuuid,
			ei.entityinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstanceparententityuuid,	
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstancecornerstoneentityuuid,
			COALESCE(ltcorner.languagetranslationvalue,lmcorner.languagemastersource),
			ei.entityinstancecornerstoneorder, 
			ei.entityinstanceentitytemplateentityuuid,			
			ei.entityinstanceentitytemplatename, 
			COALESCE(lttemplate.languagetranslationvalue,lmtemplate.languagemastersource),
			ei.entityinstancetypeentityuuid,
			ei.entityinstancetype, 
			ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
			COALESCE(ltname.languagetranslationvalue,lmname.languagemastersource),
			ei.entityinstancescanid, 
			ei.entityinstancesiteentityuuid,  -- deprecate this
			ei.entityinstancecreateddate,
			ei.entityinstancemodifieddate,
			ei.entityinstancemodifiedbyuuid,
			ei.entityinstancestartdate ,	
			ei.entityinstanceenddate,
			ei.entityinstanceexternalid, 
			ei.entityinstanceexternalsystementityuuid, 
			COALESCE(ltsystem.languagetranslationvalue,lmsystem.languagemastersource),
			ei.entityinstancerefid, 
			ei.entityinstancerefuuid, 
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
			end as entityinstanceactive,
			enttag.entitytagcustagentityuuid as entityinstancetagentityuuid			
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityinstanceownerentityuuid,null,null,allcustomers,read_entityinstancesenddeleted,read_entityinstancesenddrafts,read_entityinstancesendinactive, null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstancedeleted = ANY (tempentityinstancesenddeleted)
				 	and ei.entityinstancedraft = ANY (tempentityinstancesenddrafts)
			join  entity.entityinstance eiowner
				on ei.entityinstanceownerentityuuid = eiowner.entityinstanceuuid
			join languagemaster lmowner
				on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
			left join public.languagetranslations ltowner
				on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
					and ltowner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eiparent
				on ei.entityinstanceparententityuuid = eiparent.entityinstanceuuid
			join languagemaster lmparent
				on eiparent.entityinstancenameuuid = lmparent.languagemasteruuid
			left join public.languagetranslations ltparent
				on ltparent.languagetranslationmasterid  = lmparent.languagemasterid
					and ltparent.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eicorner
				on ei.entityinstancecornerstoneentityuuid = eicorner.entityinstanceuuid
			join languagemaster lmcorner
				on eicorner.entityinstancenameuuid = lmcorner.languagemasteruuid
			left join public.languagetranslations ltcorner
				on ltcorner.languagetranslationmasterid  = lmcorner.languagemasterid
					and ltcorner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entitytemplate eitemplate
				on eitemplate.entitytemplateuuid = ei.entityinstanceentitytemplateentityuuid
			join languagemaster lmtemplate
				on eitemplate.entitytemplatenameuuid = lmtemplate.languagemasteruuid
			left join public.languagetranslations lttemplate
				on lttemplate.languagetranslationmasterid  = lmtemplate.languagemasterid
					and lttemplate.languagetranslationtypeid = templanguagetranslationtypeid 
			join languagemaster lmname
				on ei.entityinstancenameuuid = lmname.languagemasteruuid
			left join public.languagetranslations ltname
				on ltname.languagetranslationmasterid  = lmname.languagemasterid
					and ltname.languagetranslationtypeid = templanguagetranslationtypeid
			left join  entity.entityinstance eisystem
				on ei.entityinstanceexternalsystementityuuid = eisystem.entityinstanceuuid
			left join languagemaster lmsystem
				on eisystem.entityinstancenameuuid = lmsystem.languagemasteruuid
			left join public.languagetranslations ltsystem
				on ltsystem.languagetranslationmasterid  = lmsystem.languagemasterid
					and ltsystem.languagetranslationtypeid = templanguagetranslationtypeid 		
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid ) as foo
		where foo.entityinstanceactive = Any (tempentityinstancesendinactive) ;
		return;
				
end if;

-- all entitis for a customer

if allcustomers = false and read_allentityinstances = true 
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid,
			ei.entityinstanceoriginaluuid,
			ei.entityinstanceuuid,
			ei.entityinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstanceparententityuuid,	
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstancecornerstoneentityuuid,
			COALESCE(ltcorner.languagetranslationvalue,lmcorner.languagemastersource),
			ei.entityinstancecornerstoneorder, 
			ei.entityinstanceentitytemplateentityuuid,			
			ei.entityinstanceentitytemplatename, 
			COALESCE(lttemplate.languagetranslationvalue,lmtemplate.languagemastersource),
			ei.entityinstancetypeentityuuid,
			ei.entityinstancetype, 
			ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
			COALESCE(ltname.languagetranslationvalue,lmname.languagemastersource),
			ei.entityinstancescanid, 
			ei.entityinstancesiteentityuuid,  -- deprecate this
			ei.entityinstancecreateddate,
			ei.entityinstancemodifieddate,
			ei.entityinstancemodifiedbyuuid,
			ei.entityinstancestartdate ,	
			ei.entityinstanceenddate,
			ei.entityinstanceexternalid, 
			ei.entityinstanceexternalsystementityuuid, 
			COALESCE(ltsystem.languagetranslationvalue,lmsystem.languagemastersource),
			ei.entityinstancerefid, 
			ei.entityinstancerefuuid, 
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
			end as entityinstanceactive,
			enttag.entitytagcustagentityuuid as entityinstancetagentityuuid				
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityinstanceownerentityuuid,null,null,allcustomers, read_entityinstancesenddeleted,read_entityinstancesenddrafts,read_entityinstancesendinactive,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
					and ei.entityinstancedeleted = ANY (tempentityinstancesenddeleted)
				 	and ei.entityinstancedraft = ANY (tempentityinstancesenddrafts)
			join  entity.entityinstance eiowner
				on ei.entityinstanceownerentityuuid = eiowner.entityinstanceuuid
			join languagemaster lmowner
				on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
			left join public.languagetranslations ltowner
				on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
					and ltowner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eiparent
				on ei.entityinstanceparententityuuid = eiparent.entityinstanceuuid
			join languagemaster lmparent
				on eiparent.entityinstancenameuuid = lmparent.languagemasteruuid
			left join public.languagetranslations ltparent
				on ltparent.languagetranslationmasterid  = lmparent.languagemasterid
					and ltparent.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eicorner
				on ei.entityinstancecornerstoneentityuuid = eicorner.entityinstanceuuid
			join languagemaster lmcorner
				on eicorner.entityinstancenameuuid = lmcorner.languagemasteruuid
			left join public.languagetranslations ltcorner
				on ltcorner.languagetranslationmasterid  = lmcorner.languagemasterid
					and ltcorner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entitytemplate eitemplate
				on eitemplate.entitytemplateuuid = ei.entityinstanceentitytemplateentityuuid
			join languagemaster lmtemplate
				on eitemplate.entitytemplatenameuuid = lmtemplate.languagemasteruuid
			left join public.languagetranslations lttemplate
				on lttemplate.languagetranslationmasterid  = lmtemplate.languagemasterid
					and lttemplate.languagetranslationtypeid = templanguagetranslationtypeid 
			join languagemaster lmname
				on ei.entityinstancenameuuid = lmname.languagemasteruuid
			left join public.languagetranslations ltname
				on ltname.languagetranslationmasterid  = lmname.languagemasterid
					and ltname.languagetranslationtypeid = templanguagetranslationtypeid
			left join  entity.entityinstance eisystem
				on ei.entityinstanceexternalsystementityuuid = eisystem.entityinstanceuuid
			left join languagemaster lmsystem
				on eisystem.entityinstancenameuuid = lmsystem.languagemasteruuid
			left join public.languagetranslations ltsystem
				on ltsystem.languagetranslationmasterid  = lmsystem.languagemasterid
					and ltsystem.languagetranslationtypeid = templanguagetranslationtypeid
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid ) as foo
		where foo.entityinstanceactive = Any (tempentityinstancesendinactive) ;
		return;
				
end if;

-- do individual instance first then all the params. 

if read_entityinstanceentityuuid notNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid,
			ei.entityinstanceoriginaluuid,
			ei.entityinstanceuuid,
			ei.entityinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstanceparententityuuid,	
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstancecornerstoneentityuuid,
			COALESCE(ltcorner.languagetranslationvalue,lmcorner.languagemastersource),
			ei.entityinstancecornerstoneorder, 
			ei.entityinstanceentitytemplateentityuuid,			
			ei.entityinstanceentitytemplatename, 
			COALESCE(lttemplate.languagetranslationvalue,lmtemplate.languagemastersource),
			ei.entityinstancetypeentityuuid,
			ei.entityinstancetype, 
			ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
			COALESCE(ltname.languagetranslationvalue,lmname.languagemastersource),
			ei.entityinstancescanid, 
			ei.entityinstancesiteentityuuid,  -- deprecate this
			ei.entityinstancecreateddate,
			ei.entityinstancemodifieddate,
			ei.entityinstancemodifiedbyuuid,
			ei.entityinstancestartdate ,	
			ei.entityinstanceenddate,
			ei.entityinstanceexternalid, 
			ei.entityinstanceexternalsystementityuuid, 
			COALESCE(ltsystem.languagetranslationvalue,lmsystem.languagemastersource),
			ei.entityinstancerefid, 
			ei.entityinstancerefuuid, 
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
			end as entityinstanceactive,
			enttag.entitytagcustagentityuuid as entityinstancetagentityuuid				
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityinstanceownerentityuuid,null,null,allcustomers, read_entityinstancesenddeleted,read_entityinstancesenddrafts,read_entityinstancesendinactive,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
					and ei.entityinstancedeleted = ANY (tempentityinstancesenddeleted)
				 	and ei.entityinstancedraft = ANY (tempentityinstancesenddrafts)
					and ei.entityinstanceuuid = read_entityinstanceentityuuid
			join  entity.entityinstance eiowner
				on ei.entityinstanceownerentityuuid = eiowner.entityinstanceuuid
			join languagemaster lmowner
				on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
			left join public.languagetranslations ltowner
				on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
					and ltowner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eiparent
				on ei.entityinstanceparententityuuid = eiparent.entityinstanceuuid
			join languagemaster lmparent
				on eiparent.entityinstancenameuuid = lmparent.languagemasteruuid
			left join public.languagetranslations ltparent
				on ltparent.languagetranslationmasterid  = lmparent.languagemasterid
					and ltparent.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eicorner
				on ei.entityinstancecornerstoneentityuuid = eicorner.entityinstanceuuid
			join languagemaster lmcorner
				on eicorner.entityinstancenameuuid = lmcorner.languagemasteruuid
			left join public.languagetranslations ltcorner
				on ltcorner.languagetranslationmasterid  = lmcorner.languagemasterid
					and ltcorner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entitytemplate eitemplate
				on eitemplate.entitytemplateuuid = ei.entityinstanceentitytemplateentityuuid
			join languagemaster lmtemplate
				on eitemplate.entitytemplatenameuuid = lmtemplate.languagemasteruuid
			left join public.languagetranslations lttemplate
				on lttemplate.languagetranslationmasterid  = lmtemplate.languagemasterid
					and lttemplate.languagetranslationtypeid = templanguagetranslationtypeid 
			join languagemaster lmname
				on ei.entityinstancenameuuid = lmname.languagemasteruuid
			left join public.languagetranslations ltname
				on ltname.languagetranslationmasterid  = lmname.languagemasterid
					and ltname.languagetranslationtypeid = templanguagetranslationtypeid
			left join  entity.entityinstance eisystem
				on ei.entityinstanceexternalsystementityuuid = eisystem.entityinstanceuuid
			left join languagemaster lmsystem
				on eisystem.entityinstancenameuuid = lmsystem.languagemasteruuid
			left join public.languagetranslations ltsystem
				on ltsystem.languagetranslationmasterid  = lmsystem.languagemasterid
					and ltsystem.languagetranslationtypeid = templanguagetranslationtypeid
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid ) as foo
		where foo.entityinstanceactive = Any (tempentityinstancesendinactive) ;
		return;
end if;

if 	read_entityinstanceparententityuuid isNull
	then tempentityinstanceparententityuuid = ARRAY(select tei.entityinstanceparententityuuid 
															from entity.entityinstance tei
															where tei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
															group by tei.entityinstanceparententityuuid);
	else tempentityinstanceparententityuuid = ARRAY[read_entityinstanceparententityuuid];
end if;

if 	read_entityinstancecornerstoneentityuuid isNull
	then tempentityinstancecornerstoneentityuuid = ARRAY(select tei.entityinstancecornerstoneentityuuid 
															from entity.entityinstance tei
															where tei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
															group by tei.entityinstancecornerstoneentityuuid);
	else tempentityinstancecornerstoneentityuuid = ARRAY[read_entityinstancecornerstoneentityuuid];
end if;

if 	read_entityinstanceentitytemplateentityuuid isNull
	then tempentityinstanceentitytemplateentityuuid = ARRAY(select tei.entityinstanceentitytemplateentityuuid 
															from entity.entityinstance tei
															where tei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
															group by tei.entityinstanceentitytemplateentityuuid);
	else tempentityinstanceentitytemplateentityuuid = ARRAY[read_entityinstanceentitytemplateentityuuid];
end if;

if 	read_entityinstancetypeentityuuid isNull
	then tempentityinstancetypeentityuuid =  ARRAY(select tei.entityinstancetypeentityuuid 
															from entity.entityinstance tei
															where tei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
															group by tei.entityinstancetypeentityuuid);
	else tempentityinstancetypeentityuuid = ARRAY[read_entityinstancetypeentityuuid];
end if;

if 	read_entityinstancetag isNull
	then tempentityinstancetag =  ARRAY(select tei.entitytagcustagentityuuid 
												from entity.entitytag tei
												where tei.entitytagownerentityuuid = read_entityinstanceownerentityuuid
												group by tei.entitytagcustagentityuuid);
	else tempentityinstancetag = ARRAY[read_entityinstancetag];
end if;

return query 
	select *
	from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid,
			ei.entityinstanceoriginaluuid,
			ei.entityinstanceuuid,
			ei.entityinstanceownerentityuuid,
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstanceparententityuuid,	
			COALESCE(ltowner.languagetranslationvalue,lmowner.languagemastersource),
			ei.entityinstancecornerstoneentityuuid,
			COALESCE(ltcorner.languagetranslationvalue,lmcorner.languagemastersource),
			ei.entityinstancecornerstoneorder, 
			ei.entityinstanceentitytemplateentityuuid,			
			ei.entityinstanceentitytemplatename, 
			COALESCE(lttemplate.languagetranslationvalue,lmtemplate.languagemastersource),
			ei.entityinstancetypeentityuuid,
			ei.entityinstancetype, 
			ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
			COALESCE(ltname.languagetranslationvalue,lmname.languagemastersource),
			ei.entityinstancescanid, 
			ei.entityinstancesiteentityuuid,  -- deprecate this
			ei.entityinstancecreateddate,
			ei.entityinstancemodifieddate,
			ei.entityinstancemodifiedbyuuid,
			ei.entityinstancestartdate ,	
			ei.entityinstanceenddate,
			ei.entityinstanceexternalid, 
			ei.entityinstanceexternalsystementityuuid, 
			COALESCE(ltsystem.languagetranslationvalue,lmsystem.languagemastersource),
			ei.entityinstancerefid, 
			ei.entityinstancerefuuid, 
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
			end as entityinstanceactive,
			enttag.entitytagcustagentityuuid as entityinstancetagentityuuid			
	from entity.entityinstance ei
		Join (select customerid,customeruuid, customerentityuuid  
				from entity.crud_customer_read_min(read_entityinstanceownerentityuuid,null,null,allcustomers, read_entityinstancesenddeleted,read_entityinstancesenddrafts,read_entityinstancesendinactive,null)) as cust
			on cust.customerentityuuid = ei.entityinstanceownerentityuuid
				and ei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
				and ei.entityinstancedeleted = ANY (tempentityinstancesenddeleted)
				and ei.entityinstancedraft = ANY (tempentityinstancesenddrafts)
				and ei.entityinstanceparententityuuid  = ANY (tempentityinstanceparententityuuid) 
				and ei.entityinstancecornerstoneentityuuid  = ANY (tempentityinstancecornerstoneentityuuid)
				and ei.entityinstanceentitytemplateentityuuid  = ANY (tempentityinstanceentitytemplateentityuuid )
				and ei.entityinstancetypeentityuuid  = ANY (tempentityinstancetypeentityuuid )
			join  entity.entityinstance eiowner
				on ei.entityinstanceownerentityuuid = eiowner.entityinstanceuuid
			join languagemaster lmowner
				on eiowner.entityinstancenameuuid = lmowner.languagemasteruuid
			left join public.languagetranslations ltowner
				on ltowner.languagetranslationmasterid  = lmowner.languagemasterid
					and ltowner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eiparent
				on ei.entityinstanceparententityuuid = eiparent.entityinstanceuuid
			join languagemaster lmparent
				on eiparent.entityinstancenameuuid = lmparent.languagemasteruuid
			left join public.languagetranslations ltparent
				on ltparent.languagetranslationmasterid  = lmparent.languagemasterid
					and ltparent.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entityinstance eicorner
				on ei.entityinstancecornerstoneentityuuid = eicorner.entityinstanceuuid
			join languagemaster lmcorner
				on eicorner.entityinstancenameuuid = lmcorner.languagemasteruuid
			left join public.languagetranslations ltcorner
				on ltcorner.languagetranslationmasterid  = lmcorner.languagemasterid
					and ltcorner.languagetranslationtypeid = templanguagetranslationtypeid 
			join  entity.entitytemplate eitemplate
				on eitemplate.entitytemplateuuid = ei.entityinstanceentitytemplateentityuuid
			join languagemaster lmtemplate
				on eitemplate.entitytemplatenameuuid = lmtemplate.languagemasteruuid
			left join public.languagetranslations lttemplate
				on lttemplate.languagetranslationmasterid  = lmtemplate.languagemasterid
					and lttemplate.languagetranslationtypeid = templanguagetranslationtypeid 
			join languagemaster lmname
				on ei.entityinstancenameuuid = lmname.languagemasteruuid
			left join public.languagetranslations ltname
				on ltname.languagetranslationmasterid  = lmname.languagemasterid
					and ltname.languagetranslationtypeid = templanguagetranslationtypeid
			left join  entity.entityinstance eisystem
				on ei.entityinstanceexternalsystementityuuid = eisystem.entityinstanceuuid
			left join languagemaster lmsystem
				on eisystem.entityinstancenameuuid = lmsystem.languagemasteruuid
			left join public.languagetranslations ltsystem
				on ltsystem.languagetranslationmasterid  = lmsystem.languagemasterid
					and ltsystem.languagetranslationtypeid = templanguagetranslationtypeid
		left join entity.entitytag enttag
			on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid
				and enttag.entitytagcustagentityuuid  = ANY (tempentityinstancetag)) as foo
	where foo.entityinstanceactive = Any (tempentityinstancesendinactive) ;
	return;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityinstance_read_full(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_full(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_full(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_full(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entityinstance_read_min(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entityinstance_read_min(read_entityinstanceownerentityuuid uuid, read_entityinstanceentityuuid uuid, read_entityinstanceparententityuuid uuid, read_entityinstancecornerstoneentityuuid uuid, read_entityinstanceentitytemplateentityuuid uuid, read_entityinstancetypeentityuuid uuid, read_allentityinstances boolean, read_entityinstancetag uuid, read_entityinstancesenddeleted boolean, read_entityinstancesenddrafts boolean, read_entityinstancesendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entityinstanceoriginalid bigint, entityinstanceoriginaluuid text, entityinstanceuuid uuid, entityinstanceownerentityuuid uuid, entityinstanceparententityuuid uuid, entityinstancecornerstoneentityuuid uuid, entityinstancecornerstoneorder integer, entityinstanceentitytemplateentityuuid uuid, entityinstanceentitytemplatename text, entityinstancetypeentityuuid uuid, entityinstancetype text, entityinstancenameuuid text, entityinstancescanid text, entityinstancesiteentityuuid uuid, entityinstancecreateddate timestamp with time zone, entityinstancemodifieddate timestamp with time zone, entityinstancemodifiedbyuuid text, entityinstancestartdate timestamp with time zone, entityinstanceenddate timestamp with time zone, entityinstanceexternalid text, entityinstanceexternalsystementityuuid uuid, entityinstancerefid bigint, entityinstancerefuuid text, entityinstancedeleted boolean, entityinstancedraft boolean, entityinstanceactive boolean, entityinstancetagentityuuid uuid)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allcustomers boolean; 
	tempentityinstancesenddeleted boolean[];
	tempentityinstancesenddrafts boolean[];
	tempentityinstancesendinactive boolean[];
	tempentityinstanceparententityuuid uuid[];
	tempentityinstancecornerstoneentityuuid uuid[];
	tempentityinstanceentitytemplateentityuuid uuid[];
	tempentityinstancetypeentityuuid uuid[];
	tempentityinstancetag uuid[];
BEGIN

-- Curently ignores language translation.  We should change this in the future for location. 
-- Might want to add a parameter to send in active as a boolean
-- probably should move this to use arrays for in parameters

/*  examples

-- call entity.test_entity()

-- all customers all entities all tags
select * from entity.crud_entityinstance_read_min(null,null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific customer all entities all tags
select * from entity.crud_entityinstance_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific instance

select * from entity.crud_entityinstance_read_min(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	'0ce5be8d-2bec-4219-be97-07dc154b2e3b', --read_entityinstanceentityuuid uuid,
	'24855715-9228-4f41-bfe6-493f4c374a6e', --read_entityinstanceparententityuuid uuid,
	'2ab5461d-ad96-4560-a36d-d0fa53bce0f0', --read_entityinstancecornerstoneentityuuid uuid,
	'0b9f3142-e7ed-4f78-8504-ccd2eb505075', --read_entityinstanceentitytemplateentityuuid uuid,
	'67af22cb-3183-4e6e-8542-7968f744965a', --read_entityinstancetypeentityuuid uuid,
	false,
	'f3fe9cae-c21e-4dba-9a10-008cfa6dca39', --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific parent
select entityinstanceparententityuuid,* from entity.crud_entityinstance_read_min(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	'24855715-9228-4f41-bfe6-493f4c374a6e', --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific cornerstone 
select * from entity.crud_entityinstance_read_min(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	'2ab5461d-ad96-4560-a36d-d0fa53bce0f0', --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific template 
select * from entity.crud_entityinstance_read_min(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	'0b9f3142-e7ed-4f78-8504-ccd2eb505075', --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

-- specific tag 
select * from entity.crud_entityinstance_read_min(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	null, --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	'f3fe9cae-c21e-4dba-9a10-008cfa6dca39', --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

select * from entity.entitytag where entitytagentityinstanceentityuuid = '0ce5be8d-2bec-4219-be97-07dc154b2e3b'

select * from entity.entityinstance where entityinstanceuuid = ??

select * from entity.crud_entityinstance_read_min(
	'd7995576-8354-4aea-b052-1ce61052bd2e', --read_entityinstanceownerentityuuid uuid,
	'0ce5be8d-2bec-4219-be97-07dc154b2e3b', --read_entityinstanceentityuuid uuid,
	null, --read_entityinstanceparententityuuid uuid,
	null, --read_entityinstancecornerstoneentityuuid uuid,
	null, --read_entityinstanceentitytemplateentityuuid uuid,
	null, --read_entityinstancetypeentityuuid uuid,
	false,
	null, --read_entityinstancetag uuid,
	null, --read_entityinstancesenddeleted boolean,
	null, --read_entityinstancesenddrafts boolean,
	null, --read_entityinstancesendinactive boolean,
	null)

*/

if read_entityinstanceownerentityuuid isNull
	then allcustomers = true;
	else allcustomers = false;
end if;

if read_languagetranslationtypeentityuuid isNull
	then read_languagetranslationtypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'; 
end if;

if read_entityinstancesenddeleted isNull and read_entityinstancesenddeleted = false
	then tempentityinstancesenddeleted = Array[false];
	else tempentityinstancesenddeleted = Array[true,false];
end if;

if read_entityinstancesenddrafts isNull and read_entityinstancesenddrafts = false
	then tempentityinstancesenddrafts = Array[false];
	else tempentityinstancesenddrafts = Array[true,false];
end if;

if read_entityinstancesendinactive isNull and read_entityinstancesendinactive = false
	then tempentityinstancesendinactive = Array[true];
	else tempentityinstancesendinactive = Array[true,false];
end if;

-- all entities

if allcustomers = true and read_allentityinstances = true 
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid,
			ei.entityinstanceoriginaluuid,
			ei.entityinstanceuuid,
			ei.entityinstanceownerentityuuid,
			ei.entityinstanceparententityuuid,	
			ei.entityinstancecornerstoneentityuuid,
			ei.entityinstancecornerstoneorder, 
			ei.entityinstanceentitytemplateentityuuid,
			ei.entityinstanceentitytemplatename, 
			ei.entityinstancetypeentityuuid,
			ei.entityinstancetype, 
			ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
			ei.entityinstancescanid, 
			ei.entityinstancesiteentityuuid,  -- deprecate this
			ei.entityinstancecreateddate,
			ei.entityinstancemodifieddate,
			ei.entityinstancemodifiedbyuuid,
			ei.entityinstancestartdate ,	
			ei.entityinstanceenddate,
			ei.entityinstanceexternalid, 
			ei.entityinstanceexternalsystementityuuid, 
			ei.entityinstancerefid, 
			ei.entityinstancerefuuid, 
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
			end as entityinstanceactive,
			enttag.entitytagcustagentityuuid as entityinstancetagentityuuid			
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityinstanceownerentityuuid,null,null,allcustomers, read_entityinstancesenddeleted,read_entityinstancesenddrafts,read_entityinstancesendinactive,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstancedeleted = ANY (tempentityinstancesenddeleted)
				 	and ei.entityinstancedraft = ANY (tempentityinstancesenddrafts)
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid ) as foo
		where foo.entityinstanceactive = Any (tempentityinstancesendinactive) ;
		return;
				
end if;

-- all entities for a customer

if allcustomers = false and read_allentityinstances = true 
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid,
			ei.entityinstanceoriginaluuid,
			ei.entityinstanceuuid,
			ei.entityinstanceownerentityuuid,
			ei.entityinstanceparententityuuid,	
			ei.entityinstancecornerstoneentityuuid,
			ei.entityinstancecornerstoneorder, 
			ei.entityinstanceentitytemplateentityuuid,
			ei.entityinstanceentitytemplatename, 
			ei.entityinstancetypeentityuuid,
			ei.entityinstancetype, 
			ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
			ei.entityinstancescanid, 
			ei.entityinstancesiteentityuuid,  -- deprecate this
			ei.entityinstancecreateddate,
			ei.entityinstancemodifieddate,
			ei.entityinstancemodifiedbyuuid,
			ei.entityinstancestartdate ,	
			ei.entityinstanceenddate,
			ei.entityinstanceexternalid, 
			ei.entityinstanceexternalsystementityuuid, 
			ei.entityinstancerefid, 
			ei.entityinstancerefuuid, 
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
			end as entityinstanceactive,
			enttag.entitytagcustagentityuuid as entityinstancetagentityuuid			
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityinstanceownerentityuuid,null,null,allcustomers, read_entityinstancesenddeleted,read_entityinstancesenddrafts,read_entityinstancesendinactive,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
					and ei.entityinstancedeleted = ANY (tempentityinstancesenddeleted)
				 	and ei.entityinstancedraft = ANY (tempentityinstancesenddrafts)
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid ) as foo
		where foo.entityinstanceactive = Any (tempentityinstancesendinactive) ;
		return;			
end if;

-- do individual instance first then all the params. 

if read_entityinstanceentityuuid notNull
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeentityuuid,
			ei.entityinstanceoriginalid,
			ei.entityinstanceoriginaluuid,
			ei.entityinstanceuuid,
			ei.entityinstanceownerentityuuid,
			ei.entityinstanceparententityuuid,	
			ei.entityinstancecornerstoneentityuuid,
			ei.entityinstancecornerstoneorder, 
			ei.entityinstanceentitytemplateentityuuid,
			ei.entityinstanceentitytemplatename, 
			ei.entityinstancetypeentityuuid,
			ei.entityinstancetype, 
			ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
			ei.entityinstancescanid, 
			ei.entityinstancesiteentityuuid,  -- deprecate this
			ei.entityinstancecreateddate,
			ei.entityinstancemodifieddate,
			ei.entityinstancemodifiedbyuuid,
			ei.entityinstancestartdate ,	
			ei.entityinstanceenddate,
			ei.entityinstanceexternalid, 
			ei.entityinstanceexternalsystementityuuid, 
			ei.entityinstancerefid, 
			ei.entityinstancerefuuid, 
			ei.entityinstancedeleted, 
			ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
			end as entityinstanceactive,
			enttag.entitytagcustagentityuuid as entityinstancetagentityuuid			
		from entity.entityinstance ei
			Join (select customerid,customeruuid, customerentityuuid  
					from entity.crud_customer_read_min(read_entityinstanceownerentityuuid,null,null,allcustomers, read_entityinstancesenddeleted,read_entityinstancesenddrafts,read_entityinstancesendinactive,null)) as cust
				on cust.customerentityuuid = ei.entityinstanceownerentityuuid
					and ei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
					and ei.entityinstancedeleted = ANY (tempentityinstancesenddeleted)
				 	and ei.entityinstancedraft = ANY (tempentityinstancesenddrafts)
					and ei.entityinstanceuuid = read_entityinstanceentityuuid
			left join entity.entitytag enttag
				on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid ) as foo
		where foo.entityinstanceactive = Any (tempentityinstancesendinactive) ;
		return;		
end if;

if 	read_entityinstanceparententityuuid isNull
	then tempentityinstanceparententityuuid = ARRAY(select tei.entityinstanceparententityuuid 
															from entity.entityinstance tei
															where tei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
															group by tei.entityinstanceparententityuuid);
	else tempentityinstanceparententityuuid = ARRAY[read_entityinstanceparententityuuid];
end if;

if 	read_entityinstancecornerstoneentityuuid isNull
	then tempentityinstancecornerstoneentityuuid = ARRAY(select tei.entityinstancecornerstoneentityuuid 
															from entity.entityinstance tei
															where tei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
															group by tei.entityinstancecornerstoneentityuuid);
	else tempentityinstancecornerstoneentityuuid = ARRAY[read_entityinstancecornerstoneentityuuid];
end if;

if 	read_entityinstanceentitytemplateentityuuid isNull
	then tempentityinstanceentitytemplateentityuuid = ARRAY(select tei.entityinstanceentitytemplateentityuuid 
															from entity.entityinstance tei
															where tei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
															group by tei.entityinstanceentitytemplateentityuuid);
	else tempentityinstanceentitytemplateentityuuid = ARRAY[read_entityinstanceentitytemplateentityuuid];
end if;

if 	read_entityinstancetypeentityuuid isNull
	then tempentityinstancetypeentityuuid =  ARRAY(select tei.entityinstancetypeentityuuid 
															from entity.entityinstance tei
															where tei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
															group by tei.entityinstancetypeentityuuid);
	else tempentityinstancetypeentityuuid = ARRAY[read_entityinstancetypeentityuuid];
end if;

if 	read_entityinstancetag isNull
	then tempentityinstancetag =  ARRAY(select tei.entitytagcustagentityuuid 
												from entity.entitytag tei
												where tei.entitytagownerentityuuid = read_entityinstanceownerentityuuid
												group by tei.entitytagcustagentityuuid);
	else tempentityinstancetag = ARRAY[read_entityinstancetag];
end if;

return query 
	select *
	from (SELECT 
		read_languagetranslationtypeentityuuid,
		ei.entityinstanceoriginalid,
		ei.entityinstanceoriginaluuid,
		ei.entityinstanceuuid,
		ei.entityinstanceownerentityuuid,
		ei.entityinstanceparententityuuid,	
		ei.entityinstancecornerstoneentityuuid,
		ei.entityinstancecornerstoneorder, 
		ei.entityinstanceentitytemplateentityuuid,
		ei.entityinstanceentitytemplatename, 
		ei.entityinstancetypeentityuuid,
		ei.entityinstancetype, 
		ei.entityinstancenameuuid,  -- eliminate the field once things ae fixed.  
		ei.entityinstancescanid, 
		ei.entityinstancesiteentityuuid,  -- deprecate this
		ei.entityinstancecreateddate,
		ei.entityinstancemodifieddate,
		ei.entityinstancemodifiedbyuuid,
		ei.entityinstancestartdate ,	
		ei.entityinstanceenddate,
		ei.entityinstanceexternalid, 
		ei.entityinstanceexternalsystementityuuid, 
		ei.entityinstancerefid, 
		ei.entityinstancerefuuid, 
		ei.entityinstancedeleted, 
		ei.entityinstancedraft,
	case when ei.entityinstancedeleted then false
			when ei.entityinstancedraft then false
			when ei.entityinstanceenddate::Date > now()::date 
				and ei.entityinstancestartdate < now() then false
			else true
			end as entityinstanceactive,
		enttag.entitytagcustagentityuuid as entityinstancetagentityuuid			
	from entity.entityinstance ei
		Join (select customerid,customeruuid, customerentityuuid  
				from entity.crud_customer_read_min(read_entityinstanceownerentityuuid,null,null,allcustomers,read_entityinstancesenddeleted,read_entityinstancesenddrafts,read_entityinstancesendinactive, null)) as cust
			on cust.customerentityuuid = ei.entityinstanceownerentityuuid
				and ei.entityinstanceownerentityuuid = read_entityinstanceownerentityuuid
				and ei.entityinstancedeleted = ANY (tempentityinstancesenddeleted)
				and ei.entityinstancedraft = ANY (tempentityinstancesenddrafts)
				and ei.entityinstanceparententityuuid  = ANY (tempentityinstanceparententityuuid) 
				and ei.entityinstancecornerstoneentityuuid  = ANY (tempentityinstancecornerstoneentityuuid)
				and ei.entityinstanceentitytemplateentityuuid  = ANY (tempentityinstanceentitytemplateentityuuid )
				and ei.entityinstancetypeentityuuid  = ANY (tempentityinstancetypeentityuuid )
		left join entity.entitytag enttag
			on enttag.entitytagentityinstanceentityuuid = ei.entityinstanceuuid
				and enttag.entitytagcustagentityuuid  = ANY (tempentityinstancetag)) as foo
	where foo.entityinstanceactive = Any (tempentityinstancesendinactive) ;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entityinstance_read_min(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_min(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_min(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entityinstance_read_min(uuid,uuid,uuid,uuid,uuid,uuid,boolean,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entityinstance_update(uuid,uuid,uuid,text,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entityinstance_update(IN update_entityinstanceentityuuid uuid, IN update_entityinstanceownerentityuuid uuid, IN update_entityinstanceentitytemplateentityuuid uuid, IN update_entityinstanceentitytemplateentityname text, IN update_entityinstanceparententityuuid uuid, IN update_entityinstanceecornerstoneentityuuid uuid, IN update_entityinstancecornerstoneorder integer, IN update_entityinstancename text, IN update_entityinstancenameuuid text, IN update_entityinstancescanid text, IN update_entityinstancetypeuuid uuid, IN update_entityinstanceexternalid text, IN update_entityinstanceexternalsystemuuid uuid, IN update_entityinstancedeleted boolean, IN update_entityinstancedraft boolean, IN update_entityinstancestartdate timestamp with time zone, IN update_entityinstanceenddate timestamp with time zone, IN update_entityinstancemodifiedbyuuid text, IN update_languagetypeuuid uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare

Begin

-- Once created, the only things that can change after something is publsihed are ???

/*
-- Add testing here

*/

-- remove this once language issues are passed through

if update_languagetypeuuid isNull
	then update_languagetypeuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
End if;

 if update_entityinstancedraft = true or ((select entityinstancedraft 
										from entity.entityinstance
										WHERE entityinstanceuuid = update_entityinstanceentityuuid ) = true)
	then -- let everything change
		UPDATE entity.entityinstance
			SET entityinstanceownerentityuuid = case when update_entityinstanceownerentityuuid notnull 
												then update_entityinstanceownerentityuuid
												else entityinstanceownerentityuuid end,	
				entityinstanceparententityuuid = case when update_entityinstanceparententityuuid notnull 
												then update_entityinstanceparententityuuid
												else entityinstanceparententityuuid end,
				entityinstanceentitytemplateentityuuid = case when update_entityinstanceentitytemplateentityuuid notnull 
												then update_entityinstanceentitytemplateentityuuid
												else entityinstanceentitytemplateentityuuid end,
				entityinstancetype = case when update_entityinstancename notnull and (coalesce(update_entityinstancename,'') <> '')
												then update_entityinstancename
												else entityinstancetype end,
				entityinstanceexternalid = case when update_entityinstanceexternalid notnull 
												then update_entityinstanceexternalid
												else entityinstanceexternalid end,
				entityinstanceexternalsystementityuuid = case when update_entityinstanceexternalsystemuuid notnull 
														then update_entityinstanceexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancecornerstoneentityuuid = case when update_entityinstanceecornerstoneentityuuid notnull 
														then update_entityinstanceecornerstoneentityuuid
														else entityinstancecornerstoneentityuuid end,
				entityinstancecornerstoneorder = case when update_entityinstancecornerstoneorder notnull 
												then update_entityinstancecornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancescanid = case when update_entityinstancescanid notnull 
												then update_entityinstancescanid
												else entityinstancescanid end, 
				entityinstancetypeentityuuid  = case when update_entityinstancetypeuuid notnull 
												then update_entityinstancetypeuuid
												else entityinstancetypeentityuuid end, 
				entityinstancedeleted = case when update_entityinstancedeleted notnull 
										then update_entityinstancedeleted
										else entityinstancedeleted end, 
				entityinstancedraft = case when update_entityinstancedraft notnull 
										then update_entityinstancedraft
										else entityinstancedraft end,
				entityinstancestartdate = case when update_entityinstancestartdate notnull 
										then update_entityinstancestartdate
										else entityinstancestartdate end,
				entityinstanceenddate = case 	when entityinstancedeleted = true 
											and entityinstanceenddate isNull
											and update_entityinstanceenddate isNull then now()
										when entityinstancedeleted = true 
											and entityinstanceenddate isNull
											and update_entityinstanceenddate notNull then update_entityinstanceenddate 
										when entityinstancedeleted = true 
											and entityinstanceenddate notNull
											and update_entityinstanceenddate isNull then entityinstanceenddate
										when entityinstancedeleted = true and entityinstanceenddate notNull
											and update_entityinstanceenddate notNull and update_entityinstanceenddate <> entityinstanceenddate
											then update_entityinstanceenddate	
										else null
									end,
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_entityinstancemodifiedbyuuid
		WHERE entityinstanceuuid = update_entityinstanceentityuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entityinstance
			SET entityinstanceparententityuuid = case when update_entityinstanceparententityuuid notnull 
												then update_entityinstanceparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancetype = case when update_entityinstancename notnull and (coalesce(update_entityinstancename,'') <> '')
												then update_entityinstancename
												else entityinstancetype end,
				entityinstanceexternalid = case when update_entityinstanceexternalid notnull 
												then update_entityinstanceexternalid
												else entityinstanceexternalid end,
				entityinstanceexternalsystementityuuid = case when update_entityinstanceexternalsystemuuid notnull 
														then update_entityinstanceexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancecornerstoneentityuuid = case when update_entityinstanceecornerstoneentityuuid notnull 
														then update_entityinstanceecornerstoneentityuuid
														else entityinstancecornerstoneentityuuid end,
				entityinstancecornerstoneorder = case when update_entityinstancecornerstoneorder notnull 
												then update_entityinstancecornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancescanid = case when update_entityinstancescanid notnull 
												then update_entityinstancescanid
												else entityinstancescanid end, 
				entityinstancestartdate = case when update_entityinstancestartdate notnull 
										then update_entityinstancestartdate
										else entityinstancestartdate end,
				entityinstancedeleted = case when update_entityinstancedeleted notnull 
										then update_entityinstancedeleted
										else entityinstancedeleted end, 
				entityinstanceenddate = case 	when entityinstancedeleted = true 
											and entityinstanceenddate isNull
											and update_entityinstanceenddate isNull then now()
										when entityinstancedeleted = true 
											and entityinstanceenddate isNull
											and update_entityinstanceenddate notNull then update_entityinstanceenddate 
										when entityinstancedeleted = true 
											and entityinstanceenddate notNull
											and update_entityinstanceenddate isNull then entityinstanceenddate
										when entityinstancedeleted = true and entityinstanceenddate notNull
											and update_entityinstanceenddate notNull and update_entityinstanceenddate <> entityinstanceenddate
											then update_entityinstanceenddate	
										else null
									end,
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_entityinstancemodifiedbyuuid
		WHERE entityinstanceuuid = update_entityinstanceentityuuid;
end if;

if  update_entityinstancename notNull and (coalesce(update_entityinstancename,'') <> '')
	then
		-- update the languagemaster if the name changed
	
		update languagemaster
		set languagemastersource = update_entityinstancename,
			languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid =update_entityinstancemodifiedbyuuid),
			languagemastersourcelanguagetypeid = (select entityinstanceoriginalid from entity.entityinstance where entityinstanceuuid = update_languagetypeuuid),
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'		
		from entity.entityinstance
		where entityinstanceuuid = update_entityinstanceentityuuid
			and languagemasteruuid = entityinstancenameuuid
			and languagemastersource <> update_entityinstancename;

----------------------
-- need to update tempaltename if templateuuid changes.  

END IF;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entityinstance_update(uuid,uuid,uuid,text,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_update(uuid,uuid,uuid,text,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_update(uuid,uuid,uuid,text,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entityinstance_update(uuid,uuid,uuid,text,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitytag_create(uuid,uuid,uuid,uuid,uuid,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitytag_create(IN create_entitytagownerentityuuid uuid, IN create_entitytagentityinstanceuuid uuid, IN create_entitytagentitytemplateuuid uuid, IN create_entitytagcustaguuid uuid, IN create_languagetypeuuid uuid, IN create_entitytagdeleted boolean, IN create_entitytagdraft boolean, OUT create_entitytaguuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempentitytagentitytemplateuuid uuid;
	tempentitytaguuid uuid;
	tempentitytagdeleted boolean;
	tempentitytagdraft boolean; 
Begin

/*
-- Customer for testing -- '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'
select * 
from  entity.entitytag 
where entitytagownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- tests 
	-- create a tag to work with.  - Parent
		call entity.crud_custag_create(
				'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_custagownerentityuuid
				null,	--create_custagparententityuuid
				null,   --create_custagcornerstoneentityuuid
				null, --create_custagcornerstoneorder 
				'parentcustag'||now(),  -- create_custag
				'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
				null,  -- 	create_custagexternalid text,
				null, -- create_custagexternalsystemuuid
				null, 
				null, 
				null, -- OUT create_custagid
				null, -- OUT create_custaguuid text,
				null, -- OUT create_custagentityuuid uuid
				337::bigint)
		
	-- child we will use
	
		call entity.crud_custag_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_custagownerentityuuid
			???,	--create_custagparententityuuid  -- use the rertun from the previous test.  
			null,   --create_custagcornerstoneentityuuid
			null, --create_custagcornerstoneorder 
			'subcustag'||now(),  -- create_custag
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
			null,  -- 	create_custagexternalid text,
			null, -- create_custagexternalsystemuuid
			null, 
			null, 
			null, -- OUT create_custagid
			null, -- OUT create_custaguuid text,
			null, -- OUT create_custagentityuuid uuid
			337::bigint)	

-- create entity tag for template and instance - correct template
	call entity.crud_entitytag_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entitytagownerentityuuid uuid,
		'f7dbd1a0-bf4b-434d-9c13-73e0038230b7', -- IN create_entitytagentityinstanceuuid uuid,
		'0b9f3142-e7ed-4f78-8504-ccd2eb505075', -- IN create_entitytagentitytemplateuuid uuid,	
		'ffb11912-cde2-46a1-ad07-bd03c4805097', -- IN create_entitytagcustaguuid uuid,
		null,
		null,
		null, -- IN create_languagetypeuuid uuid,
		null, -- OUT create_entitytaguuid uuid,
		337::bigint)

	-- create entity tag for template and instance - incorrect template overridden
	call entity.crud_entitytag_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entitytagownerentityuuid uuid,
		'f7dbd1a0-bf4b-434d-9c13-73e0038230b7', -- IN create_entitytagentityinstanceuuid uuid,
		'b124da10-be8a-4d32-9f68-7f4e6e8b24e9', -- IN create_entitytagentitytemplateuuid uuid,	
		'461ca421-8651-4c9d-9591-af3bd859459c', -- IN create_entitytagcustaguuid uuid,
		null,
		null,
		null, -- IN create_languagetypeuuid uuid,
		null, -- OUT create_entitytaguuid uuid,
		337::bigint)
		
	-- create entit tag for template
	call entity.crud_entitytag_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entitytagownerentityuuid uuid,
		null, -- IN create_entitytagentityinstanceuuid uuid,
		'b124da10-be8a-4d32-9f68-7f4e6e8b24e9', -- IN create_entitytagentitytemplateuuid uuid,	
		'461ca421-8651-4c9d-9591-af3bd859459c', -- IN create_entitytagcustaguuid uuid,
		null,
		null,
		null, -- IN create_languagetypeuuid uuid,
		null, -- OUT create_entitytaguuid uuid,
		337::bigint)
	
*/

-- FUTURE:
	-- Check Instance and Template are of the same entity type.
	-- Use generic Entity Instance Read
	-- block duplicates or allow?  
	-- check for nulls in template

-- override the template with the template type from the instance

if create_entitytagentityinstanceuuid notNull
	then tempentitytagentitytemplateuuid = (select entityinstanceentitytemplateentityuuid 
											from entity.entityinstance 
											where entityinstanceuuid = create_entitytagentityinstanceuuid);
		tempentitytaguuid = (select entitytaguuid 
							from entity.crud_entitytag_read_min(create_entitytagownerentityuuid,null,create_entitytagentityinstanceuuid,null, create_entitytagcustaguuid, false, null,null,null, create_languagetypeuuid));									
	else tempentitytaguuid = (select entitytaguuid 
							from entity.crud_entitytag_read_min(create_entitytagownerentityuuid, null, null, create_entitytagentitytemplateuuid, create_entitytagcustaguuid, false, null,null,null,create_languagetypeuuid));				
		tempentitytagentitytemplateuuid = create_entitytagentitytemplateuuid;
end if;

If create_entitytagdeleted isNull
	then tempentitytagdeleted = false;
	else tempentitytagdeleted = create_entitytagdeleted;
end if;

If create_entitytagdraft isNull
	then tempentitytagdraft = false;
	else tempentitytagdraft = create_entitytagdraft;
end if;

if  tempentitytaguuid isNull
	then 
		INSERT INTO entity.entitytag(
			entitytagownerentityuuid, 
			entitytagentityinstanceentityuuid,
			entitytagentitytemplateentityuuid,
			entitytagcreateddate, 
			entitytagmodifieddate, 
			entitytagstartdate, 
			entitytagenddate, 
			entitytagmodifiedbyuuid,
			entitytagcustagentityuuid,
			entitytagdeleted,
			entitytagdraft
			)
		values (
			create_entitytagownerentityuuid,
			create_entitytagentityinstanceuuid ,
			tempentitytagentitytemplateuuid ,
			now(),
			now(),
			now(),
			null,
			(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
			create_entitytagcustaguuid,
			create_entitytagdeleted,
			create_entitytagdraft
		)
		Returning entitytaguuid into create_entitytaguuid;
	else create_entitytaguuid = tempentitytaguuid;
End if;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitytag_create(uuid,uuid,uuid,uuid,uuid,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_create(uuid,uuid,uuid,uuid,uuid,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_create(uuid,uuid,uuid,uuid,uuid,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_create(uuid,uuid,uuid,uuid,uuid,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitytag_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitytag_delete(IN create_entitytagownerentityuuid uuid, IN create_entitytagentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempentitytagentitytemplateuuid uuid;
	tempentitytaguuid uuid;
Begin

/*

-- tests needed
	-- no owner isNull
		call entity.crud_entitytag_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entitytagownerentityuuid uuid,
			null, -- IN create_entitytagentityuuid uuid,
			337)

	-- no field entity isNull
		call entity.crud_entitytag_delete(
			null, -- IN create_entitytagownerentityuuid uuid,
			'ff36e534-fbc3-44ea-80a4-1a149cf86753', -- IN create_entitytagentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_entitytag_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entitytagownerentityuuid uuid,
			'ff36e534-fbc3-44ea-80a4-1a149cf86753', -- IN create_entitytagentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_entitytag_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entitytagownerentityuuid uuid,
			'ff36e534-fbc3-44ea-80a4-1a149cf86753', -- IN create_entitytagentityuuid uuid,	
			337)

	-- 	update entity.entitytag
		set entitytagdeleted = false
		where entitytaguuid = 'ff36e534-fbc3-44ea-80a4-1a149cf86753'	

-- use this to find fields to work with
select * from  entity.entitytag where entitytagownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- how to check if the update was successful
select * from entity.entitytag where entitytagdeleted = true

*/

-- check for owner 

if create_entitytagownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for field

if create_entitytagentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the field record to deleted

update entity.entitytag
set entitytagdeleted = true,
	entitytagmodifieddate = now(),
	entitytagenddate = now(),
	entitytagmodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entitytagownerentityuuid = create_entitytagownerentityuuid
	and entitytaguuid = create_entitytagentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitytag_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entitytag_read_full(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entitytag_read_full(read_ownerentityuuid uuid, read_entitytagentityuuid uuid, read_entitytagentityinstanceuuid uuid, read_entitytagtemplateentityuuid uuid, read_entitytagcustagentityuuid uuid, read_allentitytags boolean, read_entitytagsenddeleted boolean, read_entitytagsenddrafts boolean, read_entitytagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entitytaguuid uuid, entitytagownerentityuuid uuid, entitytagownername text, entitytagentityinstanceentityuuid uuid, entitytagentityinstanceentityname text, entitytagentitytemplateentityuuid uuid, entitytagentitytemplatename text, entitytagcreateddate timestamp with time zone, entitytagmodifieddate timestamp with time zone, entitytagstartdate timestamp with time zone, entitytagenddate timestamp with time zone, entitytagrefid bigint, entitytagrefuuid text, entitytagmodifiedbyuuid text, entitytagcustagparententityuuid uuid, entitytagparentcustagtype text, entitytagcustagentityuuid uuid, entitytagcustagtype text, entitytagsenddeleted boolean, entitytagsenddrafts boolean, entitytagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	tempentitytagsenddeleted boolean[]; 
	tempentitytagsenddrafts  boolean[];  
	tempentitytagsendinactive boolean[];
BEGIN

/*  examples

-- all customers all entitytags

select * from entity.crud_entitytag_read_full(null, null,null,null, null, true, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific tag
select * from entity.crud_entitytag_read_full('ccda3933-c740-40ec-9a2b-a9f1a7d4db28','8cd49ef4-2b70-410b-85aa-4b67f617066a',null,null, null, false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all tags for a specific instance
select * from entity.crud_entitytag_read_full('ccda3933-c740-40ec-9a2b-a9f1a7d4db28',null,'d57f7b9c-fe72-463a-9cc9-1cb03ad4a812',null, null, false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a template
select * from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all tags for a template no instances
select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a tag
select * from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, null, 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a template and a tag
select * from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, '0b9f3142-e7ed-4f78-8504-ccd2eb505075', 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

*/

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_entitytagsenddeleted isNull and read_entitytagsenddeleted = false
	then tempentitytagsenddeleted = Array[false];
	else tempentitytagsenddeleted = Array[true,false];
end if;

if read_entitytagsenddrafts isNull and read_entitytagsenddrafts = false
	then tempentitytagsenddrafts = Array[false];
	else tempentitytagsenddrafts = Array[true,false];
end if;

if read_entitytagsendinactive isNull and read_entitytagsendinactive = false
	then tempentitytagsendinactive = Array[true];
	else tempentitytagsendinactive = Array[true,false];
end if;

if read_allentitytags = true
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
		customer.customername,
	    et.entitytagentityinstanceentityuuid,
		einstance.entityinstancename,
	    et.entitytagentitytemplateentityuuid,
		etemplate.entitytemplatename,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
		custag.custagparententityuuid,  
		custag.custagparentname,
	    et.entitytagcustagentityuuid,
		custag.custagname,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
		inner join (select * 
						from entity.crud_customer_read_full(null,null, null, true, read_entitytagsenddeleted,read_entitytagsenddrafts,read_entitytagsendinactive,read_languagetranslationtypeentityuuid)) customer
			on et.entitytagownerentityuuid = customerentityuuid
				and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
				and et.entitytagdraft = ANY (tempentitytagsenddrafts)
		left join (select * 
						from entity.crud_entitytemplate_read_full(null, null, null,null, null,read_languagetranslationtypeentityuuid)) etemplate
			on et.entitytagentitytemplateentityuuid = etemplate.entitytemplateuuid
		left join (select * from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeentityuuid)) einstance
			on et.entitytagentityinstanceentityuuid = einstance.entityinstanceuuid		
		inner join (select * from entity.crud_custag_read_full(null,null,null, null, true,read_entitytagsenddeleted ,read_entitytagsenddrafts ,read_entitytagsendinactive ,read_languagetranslationtypeentityuuid)) custag
			on et.entitytagcustagentityuuid = custag.custagentityuuid) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive);
	return;
end if;

if read_entitytagentityuuid notNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
		customer.customername,
	    et.entitytagentityinstanceentityuuid,
		einstance.entityinstancename,
	    et.entitytagentitytemplateentityuuid,
		etemplate.entitytemplatename,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
		custag.custagparententityuuid,  
		custag.custagparentname,
	    et.entitytagcustagentityuuid,
		custag.custagtype,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
		inner join (select * 
						from entity.crud_customer_read_full(null,null, null, true,read_entitytagsenddeleted,read_entitytagsenddrafts,read_entitytagsendinactive, read_languagetranslationtypeentityuuid)) customer
			on et.entitytagownerentityuuid = customerentityuuid
				and et.entitytaguuid = read_entitytagentityuuid
				and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
				and et.entitytagdraft = ANY (tempentitytagsenddrafts)
		left join (select * 
						from entity.crud_entitytemplate_read_full(null, null, null,null, null,read_languagetranslationtypeentityuuid)) etemplate
			on et.entitytagentitytemplateentityuuid = etemplate.entitytemplateuuid
		left join (select * from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeentityuuid)) einstance
			on et.entitytagentityinstanceentityuuid = einstance.entityinstanceuuid	
		inner join (select * from entity.crud_custag_read_full(null,null,null, null, true,read_entitytagsenddeleted ,read_entitytagsenddrafts ,read_entitytagsendinactive ,read_languagetranslationtypeentityuuid)) custag
			on et.entitytagcustagentityuuid = custag.custagentityuuid) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive);
	return;
end if;

if read_entitytagentityinstanceuuid notNull
	and read_ownerentityuuid notNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
		customer.customername,
	    et.entitytagentityinstanceentityuuid,
		einstance.entityinstancename,
	    et.entitytagentitytemplateentityuuid,
		etemplate.entitytemplatename,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
		custag.custagparententityuuid,  
		custag.custagparentname,
	    et.entitytagcustagentityuuid,
		custag.custagtype,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
		inner join (select * 
						from entity.crud_customer_read_full(null,null, null, true,read_entitytagsenddeleted,read_entitytagsenddrafts,read_entitytagsendinactive, read_languagetranslationtypeentityuuid)) customer
			on et.entitytagownerentityuuid = customerentityuuid
				and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
				and et.entitytagdraft = ANY (tempentitytagsenddrafts)
		left join (select * 
						from entity.crud_entitytemplate_read_full(null, null, null,null, null,read_languagetranslationtypeentityuuid)) etemplate
			on et.entitytagentitytemplateentityuuid = etemplate.entitytemplateuuid
		inner join (select * from entity.crud_custag_read_full(null,null,null, null, true,read_entitytagsenddeleted ,read_entitytagsenddrafts ,read_entitytagsendinactive ,read_languagetranslationtypeentityuuid)) custag
			on et.entitytagcustagentityuuid = custag.custagentityuuid
		left join (select * from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeentityuuid)) einstance
			on et.entitytagentityinstanceentityuuid = einstance.entityinstanceuuid	
	where et.entitytagentityinstanceentityuuid = read_entitytagentityinstanceuuid 
		and et.entitytagownerentityuuid = read_ownerentityuuid) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive);
	return;
end if;	

if read_entitytagtemplateentityuuid  notNull
	and read_ownerentityuuid notNull
	and read_entitytagcustagentityuuid isNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
		customer.customername,
	    et.entitytagentityinstanceentityuuid,
		einstance.entityinstancename,
	    et.entitytagentitytemplateentityuuid,
		etemplate.entitytemplatename,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
		custag.custagparententityuuid,  
		custag.custagparentname,
	    et.entitytagcustagentityuuid,
		custag.custagtype,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
		inner join (select * 
						from entity.crud_customer_read_full(null,null, null, true,read_entitytagsenddeleted,read_entitytagsenddrafts,read_entitytagsendinactive, read_languagetranslationtypeentityuuid)) customer
			on et.entitytagownerentityuuid = customerentityuuid
				and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
				and et.entitytagdraft = ANY (tempentitytagsenddrafts)
		left join (select * 
						from entity.crud_entitytemplate_read_full(null, null, null,null, null,read_languagetranslationtypeentityuuid)) etemplate
			on et.entitytagentitytemplateentityuuid = etemplate.entitytemplateuuid
		left join (select * from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeentityuuid)) einstance
			on et.entitytagentityinstanceentityuuid = einstance.entityinstanceuuid	
		inner join (select * from entity.crud_custag_read_full(null,null,null, null, true,read_entitytagsenddeleted ,read_entitytagsenddrafts ,read_entitytagsendinactive ,read_languagetranslationtypeentityuuid)) custag
			on et.entitytagcustagentityuuid = custag.custagentityuuid
	where et.entitytagentitytemplateentityuuid = read_entitytagtemplateentityuuid  
		and et.entitytagownerentityuuid = read_ownerentityuuid) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive);
	return;
end if;	

if read_entitytagcustagentityuuid  notNull
	and read_entitytagtemplateentityuuid  isNull
	and read_ownerentityuuid notNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
		customer.customername,
	    et.entitytagentityinstanceentityuuid,
		einstance.entityinstancename,
	    et.entitytagentitytemplateentityuuid,
		etemplate.entitytemplatename,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
		custag.custagparententityuuid,  
		custag.custagparentname,
	    et.entitytagcustagentityuuid,
		custag.custagtype,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
		inner join (select * 
						from entity.crud_customer_read_full(null,null, null, true, read_entitytagsenddeleted,read_entitytagsenddrafts,read_entitytagsendinactive,read_languagetranslationtypeentityuuid)) customer
			on et.entitytagownerentityuuid = customerentityuuid
				and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
				and et.entitytagdraft = ANY (tempentitytagsenddrafts)
		left join (select * 
						from entity.crud_entitytemplate_read_full(null, null, null,null, null,read_languagetranslationtypeentityuuid)) etemplate
			on et.entitytagentitytemplateentityuuid = etemplate.entitytemplateuuid
		left join (select * from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeentityuuid)) einstance
			on et.entitytagentityinstanceentityuuid = einstance.entityinstanceuuid	
		inner join (select * from entity.crud_custag_read_full(null,null,null, null, true,read_entitytagsenddeleted ,read_entitytagsenddrafts ,read_entitytagsendinactive ,read_languagetranslationtypeentityuuid)) custag
			on et.entitytagcustagentityuuid = custag.custagentityuuid
	where et.entitytagcustagentityuuid = read_entitytagcustagentityuuid
		and et.entitytagownerentityuuid = read_ownerentityuuid) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive);
	return;
end if;	

if read_entitytagtemplateentityuuid  notNull
	and read_entitytagcustagentityuuid  notNull
	and read_ownerentityuuid notNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
		customer.customername,
	    et.entitytagentityinstanceentityuuid,
		einstance.entityinstancename,
	    et.entitytagentitytemplateentityuuid,
		etemplate.entitytemplatename,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
		custag.custagparententityuuid,  
		custag.custagparentname,
	    et.entitytagcustagentityuuid,
		custag.custagtype,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
		inner join (select * 
						from entity.crud_customer_read_full(null,null, null, true, read_entitytagsenddeleted,read_entitytagsenddrafts,read_entitytagsendinactive,read_languagetranslationtypeentityuuid)) customer
			on et.entitytagownerentityuuid = customerentityuuid
				and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
				and et.entitytagdraft = ANY (tempentitytagsenddrafts)
		left join (select * 
						from entity.crud_entitytemplate_read_full(null, null, null,null, null,read_languagetranslationtypeentityuuid)) etemplate
			on et.entitytagentitytemplateentityuuid = etemplate.entitytemplateuuid
		left join (select * from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,read_languagetranslationtypeentityuuid)) einstance
			on et.entitytagentityinstanceentityuuid = einstance.entityinstanceuuid	
		inner join (select * from entity.crud_custag_read_full(null,null,null, null, true,read_entitytagsenddeleted ,read_entitytagsenddrafts ,read_entitytagsendinactive ,read_languagetranslationtypeentityuuid)) custag
			on et.entitytagcustagentityuuid = custag.custagentityuuid
	where et.entitytagentitytemplateentityuuid = read_entitytagtemplateentityuuid  
		and et.entitytagcustagentityuuid = read_entitytagcustagentityuuid
		and et.entitytagownerentityuuid = read_ownerentityuuid) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive);
	return;
end if;	

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entitytag_read_full(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_full(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_full(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_full(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entitytag_read_min(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entitytag_read_min(read_ownerentityuuid uuid, read_entitytagentityuuid uuid, read_entitytagentityinstanceuuid uuid, read_entitytagtemplateentityuuid uuid, read_entitytagcustagentityuuid uuid, read_allentitytags boolean, read_entitytagsenddeleted boolean, read_entitytagsenddrafts boolean, read_entitytagsendinactive boolean, read_languagetranslationtypeentityuuid uuid)
 RETURNS TABLE(languagetranslationtypeentityuuid uuid, entitytaguuid uuid, entitytagownerentityuuid uuid, entitytagentityinstanceentityuuid uuid, entitytagentitytemplateentityuuid uuid, entitytagcreateddate timestamp with time zone, entitytagmodifieddate timestamp with time zone, entitytagstartdate timestamp with time zone, entitytagenddate timestamp with time zone, entitytagrefid bigint, entitytagrefuuid text, entitytagmodifiedbyuuid text, entitytagcustagentityuuid uuid, entitytagsenddeleted boolean, entitytagsenddrafts boolean, entitytagsendinactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	tempentitytagsenddeleted boolean[]; 
	tempentitytagsenddrafts  boolean[];  
	tempentitytagsendinactive boolean[];
BEGIN

/*  examples

-- all customers all entitytags

select * from entity.crud_entitytag_read_min(null, null,null,null, null, true, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
limit 100

-- specific tag
select * from entity.crud_entitytag_read_min('ccda3933-c740-40ec-9a2b-a9f1a7d4db28','8cd49ef4-2b70-410b-85aa-4b67f617066a',null,null, null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all tags for a specific instance
select * from entity.crud_entitytag_read_min('ccda3933-c740-40ec-9a2b-a9f1a7d4db28',null,'d57f7b9c-fe72-463a-9cc9-1cb03ad4a812',null, null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a template
select * from entity.crud_entitytag_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all tags for a template no instances
select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a tag
select * from entity.crud_entitytag_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, null, 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- all instances for a template and a tag
select * from entity.crud_entitytag_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, '0b9f3142-e7ed-4f78-8504-ccd2eb505075', 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

*/

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if read_entitytagsenddeleted isNull and read_entitytagsenddeleted = false
	then tempentitytagsenddeleted = Array[false];
	else tempentitytagsenddeleted = Array[true,false];
end if;

if read_entitytagsenddrafts isNull and read_entitytagsenddrafts = false
	then tempentitytagsenddrafts = Array[false];
	else tempentitytagsenddrafts = Array[true,false];
end if;

if read_entitytagsendinactive isNull and read_entitytagsendinactive = false
	then tempentitytagsendinactive = Array[true];
	else tempentitytagsendinactive = Array[true,false];
end if;

if read_allentitytags = true
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
	    et.entitytagentityinstanceentityuuid,
	    et.entitytagentitytemplateentityuuid,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
	    et.entitytagcustagentityuuid,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
	where et.entitytagdeleted = ANY (tempentitytagsenddeleted)
				 and et.entitytagdraft = ANY (tempentitytagsenddrafts)) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive
		) ;
	return;
end if;

if read_entitytagentityuuid notNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
	    et.entitytagentityinstanceentityuuid,
	    et.entitytagentitytemplateentityuuid,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
	    et.entitytagcustagentityuuid,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
	where et.entitytaguuid = read_entitytagentityuuid
			and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
			and et.entitytagdraft = ANY (tempentitytagsenddrafts)) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive
		) ;
	return;
end if;

if read_entitytagentityinstanceuuid notNull
	and read_ownerentityuuid notNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
	    et.entitytagentityinstanceentityuuid,
	    et.entitytagentitytemplateentityuuid,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
	    et.entitytagcustagentityuuid,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
	where et.entitytagentityinstanceentityuuid = read_entitytagentityinstanceuuid 
		and et.entitytagownerentityuuid = read_ownerentityuuid
			and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
			and et.entitytagdraft = ANY (tempentitytagsenddrafts)) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive
		) ;
	return;
end if;	

if read_entitytagtemplateentityuuid  notNull
	and read_ownerentityuuid notNull
	and read_entitytagcustagentityuuid isNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
	    et.entitytagentityinstanceentityuuid,
	    et.entitytagentitytemplateentityuuid,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
	    et.entitytagcustagentityuuid,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
	where et.entitytagentitytemplateentityuuid = read_entitytagtemplateentityuuid  
		and et.entitytagownerentityuuid = read_ownerentityuuid
			and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
			and et.entitytagdraft = ANY (tempentitytagsenddrafts)) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive
		) ;
	return;
end if;	

if read_entitytagcustagentityuuid  notNull
	and read_entitytagtemplateentityuuid  isNull
	and read_ownerentityuuid notNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
	    et.entitytagentityinstanceentityuuid,
	    et.entitytagentitytemplateentityuuid,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
	    et.entitytagcustagentityuuid,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
	where et.entitytagcustagentityuuid = read_entitytagcustagentityuuid
		and et.entitytagownerentityuuid = read_ownerentityuuid
			and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
			and et.entitytagdraft = ANY (tempentitytagsenddrafts)) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive
		) ;
	return;
end if;	

if read_entitytagtemplateentityuuid  notNull
	and read_entitytagcustagentityuuid  notNull
	and read_ownerentityuuid notNull
	then return query 
		select *
		from (SELECT 
		read_languagetranslationtypeentityuuid, 
	    et.entitytaguuid,
	    et.entitytagownerentityuuid,
	    et.entitytagentityinstanceentityuuid,
	    et.entitytagentitytemplateentityuuid,
	    et.entitytagcreateddate,
	    et.entitytagmodifieddate,
	    et.entitytagstartdate,
	    et.entitytagenddate,
	    et.entitytagrefid,
	    et.entitytagrefuuid,
	    et.entitytagmodifiedbyuuid,
	    et.entitytagcustagentityuuid,
		et.entitytagdeleted boolean,
		et.entitytagdraft boolean,
		case when et.entitytagdeleted then false
			when et.entitytagdraft then false
			when et.entitytagenddate::Date > now()::date 
				and et.entitytagstartdate < now() then false
		else true
	end as entitytagactive
	from entity.entitytag et
	where et.entitytagentitytemplateentityuuid = read_entitytagtemplateentityuuid  
		and et.entitytagcustagentityuuid = read_entitytagcustagentityuuid
		and et.entitytagownerentityuuid = read_ownerentityuuid
			and et.entitytagdeleted = ANY (tempentitytagsenddeleted)
			and et.entitytagdraft = ANY (tempentitytagsenddrafts)) as foo
		where foo.entitytagactive = Any (tempentitytagsendinactive
		) ;
	return;
end if;	

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entitytag_read_min(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_min(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_min(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entitytag_read_min(uuid,uuid,uuid,uuid,uuid,boolean,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitytag_update(uuid,uuid,uuid,uuid,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitytag_update(IN update_entitytaguuid uuid, IN update_entitytagownerentityuuid uuid, IN update_entitytagentityinstanceuuid uuid, IN update_entitytagentitytemplateuuid uuid, IN update_entitytagcustaguuid uuid, IN update_languagetypeuuid uuid, IN update_entitytagdeleted boolean, IN update_entitytagdraft boolean, IN update_entitytagstartdate timestamp with time zone, IN update_entitytagenddate timestamp with time zone, IN update_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare

Begin

-- Once created, the only things that can change after something is publsihed are entitytagstartdate and entitytagenddate

/*
-- Add testing here

*/

if update_entitytagdraft = true or ((select entitytagdraft 
										from entity.entitytag
										WHERE entitytaguuid = update_entitytaguuid ) = true)
	then -- let everything change
		UPDATE entity.entitytag
			SET entitytagentityinstanceentityuuid = case when update_entitytagentityinstanceuuid notnull 
														then update_entitytagentityinstanceuuid
														else entitytagentityinstanceentityuuid end,   
				entitytagentitytemplateentityuuid = case when update_entitytagentitytemplateuuid notnull 
														then update_entitytagentitytemplateuuid
														else entitytagentitytemplateentityuuid end,  
				entitytagcustagentityuuid = case when update_entitytagcustaguuid notnull 
												then update_entitytagcustaguuid
												else entitytagcustagentityuuid end,  
				entitytagdeleted = case when update_entitytagdeleted notnull 
										then update_entitytagdeleted
										else entitytagdeleted end, 
				entitytagdraft = case when update_entitytagdraft notnull 
										then update_entitytagdraft
										else entitytagdraft end,
				entitytagstartdate = case when update_entitytagstartdate notnull 
										then update_entitytagstartdate
										else entitytagstartdate end,
	 			entitytagenddate = case 	when entitytagdeleted = true 
											and entitytagenddate isNull
											and update_entitytagenddate isNull then now()
										when entitytagdeleted = true 
											and entitytagenddate isNull
											and update_entitytagenddate notNull then update_entitytagenddate 
										when entitytagdeleted = true 
											and entitytagenddate notNull
											and update_entitytagenddate isNull then entitytagenddate
										when entitytagdeleted = true and entitytagenddate notNull
											and update_entitytagenddate notNull and update_entitytagenddate <> entitytagenddate
											then update_entitytagenddate	
										else null
									end,		
				entitytagmodifieddate=now(),
				entitytagmodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = update_modifiedbyid)
		WHERE entitytaguuid = update_entitytaguuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entitytag
			SET entitytagstartdate = case when update_entitytagstartdate notnull 
											then update_entitytagstartdate
											else entitytagstartdate end,
				entitytagdeleted = case when update_entitytagdeleted notnull 
										then update_entitytagdeleted
										else entitytagdeleted end,							
	 			entitytagenddate = case 	when entitytagdeleted = true 
											and entitytagenddate isNull
											and update_entitytagenddate isNull then now()
										when entitytagdeleted = true 
											and entitytagenddate isNull
											and update_entitytagenddate notNull then update_entitytagenddate 
										when entitytagdeleted = true 
											and entitytagenddate notNull
											and update_entitytagenddate isNull then entitytagenddate
										when entitytagdeleted = true and entitytagenddate notNull
											and update_entitytagenddate notNull and update_entitytagenddate <> entitytagenddate
											then update_entitytagenddate	
										else null
									end,	
				entitytagmodifieddate=now(),
				entitytagmodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = update_modifiedbyid)
		WHERE entitytaguuid = update_entitytaguuid;
end if;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitytag_update(uuid,uuid,uuid,uuid,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_update(uuid,uuid,uuid,uuid,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_update(uuid,uuid,uuid,uuid,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytag_update(uuid,uuid,uuid,uuid,uuid,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitytemplate_create(uuid,uuid,integer,uuid,text,text,boolean,text,uuid,text,uuid,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitytemplate_create(IN create_entitytemplateownerentityuuid uuid, IN create_entitytemplateparententityuuid uuid, IN create_entitytemplatecornerstoneorder integer, IN create_entitytemplatetaguuid uuid, IN create_entitytemplatetag text, IN create_entitytemplatename text, IN create_entitytemplateisprimary boolean, IN create_entitytemplatescanid text, IN create_languagetypeuuid uuid, IN create_entitytemplateexternalid text, IN create_entitytemplateexternalsystemuuid uuid, IN create_entitytemplatedeleted boolean, IN create_entitytemplatedraft boolean, OUT create_entitytemplateentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	templanguagetypeentityuuid uuid;	
	tempcustomeruuid text;
	tempcustomerid bigint;
	tempcustagentityuuid uuid;
	tempcustagid bigint;
	tempcustaguuid text;
	tempsystagid bigint;
	tempsystaguuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
 	templanguagemasterid bigint;
	tempdisplaylanguagemasterid bigint;
	tempentitytemplatetype	text;
	tempentitytemplatetypeuuid uuid;
	tempcornerstoneorder integer; 
	templanguagemasteruuid text;
	tempentitytemplateownerentityuuid uuid;
	tempentitytaguuid uuid;
	tempentitytemplatedeleted boolean;
	tempentitytemplatedraft boolean;
	
Begin

/*
---------------------------------------------
HOW TO HANDLE ENTIY TYPE
Currently we control this and it is used for drop downs
-- Do we allow for systags that are not system controlled?  Going to start with allowing customers to create system tags for entities. 
-- Do we have a joined custag/systag version?  Not yet, so using systags.
-- Currently allowing duplicate types (Might want to stop this via a constraint on owner and type)
-- Will create a Type for that customer in systag with Systag Entity Types as the parent.

OTHER THINGS
-- This does not handle duplicate template names.  Maybe via a constraint. No duplicates for owner/template 
-- We could do inheritance from a parent template.  Right now parent does nothing.  

 select entitytemplatename,* from entity.crud_entitytemplate_read_full(null, null, null)

-- tests needed
	-- no name
	
	call entity.crud_entitytemplate_create(
		null,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
		null,  -- merged site and parent.  Set to self if no parent sent in.
		null,  -- default is 1.
		null, -- Used to be only locations had a location category. 
		null,  -- If a tag is sent in that does not exist then we create one at the template level.
		null,  -- Name of the template 
		false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
		null, -- create_entitytemplatescanid text,  
		null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
		null, -- create_entitytemplateexternalid text,
		null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
		null,-- create_entitytemplatedeleted boolean,
		null,-- create_entitytemplatedraft boolean,
		null, -- create_entitytemplateentityuuid uuid,
		337::bigint) -- IN create_modifiedbyid bigint
	
	-- no owner no parent no templatetaguuid no tag no languagetype = defaulted to tendrel and primary
	
	call entity.crud_entitytemplate_create(
		null,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
		null,  -- merged site and parent.  Set to self if no parent sent in.
		null,  -- default is 1.
		null, -- Used to be only locations had a location category.
		null,  -- If a tag is sent in that does not exist then we create one at the template level.
		'entitytemplate'||now()::text,  -- Name of the template 
		false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
		'scanid'||now()::text, -- create_entitytemplatescanid text,  
		null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
		null, -- create_entitytemplateexternalid text,
		null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
		null,-- create_entitytemplatedeleted boolean,
		null,-- create_entitytemplatedraft boolean,
		null, -- create_entitytemplateentityuuid uuid,
		337::bigint) 

	-- valid owner

	call entity.crud_entitytemplate_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0',  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
		null,  -- merged site and parent.  Set to self if no parent sent in.
		null,  -- default is 1.
		null, -- Used to be only locations had a location category.
		null,  -- If a tag is sent in that does not exist then we create one at the template level.
		'entitytemplate'||now()::text,  -- Name of the template 
		false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
		'scanid'||now()::text, -- create_entitytemplatescanid text,  
		null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
		null, -- create_entitytemplateexternalid text,
		null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
		null,-- create_entitytemplatedeleted boolean,
		null,-- create_entitytemplatedraft boolean,
		null, -- create_entitytemplateentityuuid uuid,
		337::bigint) 
	
	-- invalid owner  -- not a customer (error)

	call entity.crud_entitytemplate_create(
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9',  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
		null,  -- merged site and parent.  Set to self if no parent sent in.
		null,  -- default is 1.
		null, -- Used to be only locations had a location category.
		null,  -- If a tag is sent in that does not exist then we create one at the template level.
		'entitytemplate'||now()::text,  -- Name of the template 
		false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
		'scanid'||now()::text, -- create_entitytemplatescanid text,  
		null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
		null, -- create_entitytemplateexternalid text,
		null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
		null,-- create_entitytemplatedeleted boolean,
		null,-- create_entitytemplatedraft boolean,
		null, -- create_entitytemplateentityuuid uuid,
		337::bigint) 

	-- valid parent  -- parent needs to be an instance.

		Not implemented yet

	-- invalid parent  -- parent needs to be an instance.

		Not implemented yet

	-- valid taguuid  -- need to finish tag code.  :-(
	call entity.crud_entitytemplate_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0',  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
		null,  -- merged site and parent.  Set to self if no parent sent in.
		null,  -- default is 1.
		'bb05d944-f7ba-4e40-b1d7-f2e3c0608c4c', -- Used to be only locations had a location category.
		null,  -- If a tag is sent in that does not exist then we create one at the template level.
		'entitytemplate'||now()::text,  -- Name of the template 
		false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
		'scanid'||now()::text, -- create_entitytemplatescanid text,  
		null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
		null, -- create_entitytemplateexternalid text,
		null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
		null,-- create_entitytemplatedeleted boolean,
		null,-- create_entitytemplatedraft boolean,
		null, -- create_entitytemplateentityuuid uuid,
		337::bigint) 

	-- invalid taguuid (becomes null) with a tag name

	call entity.crud_entitytemplate_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0',  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
		null,  -- merged site and parent.  Set to self if no parent sent in.
		null,  -- default is 1.
		'00014b06-73b8-464b-8881-0ef9dfb7b712', -- Used to be only locations had a location category.
		'Tag'||now()::text,  -- If a tag is sent in that does not exist then we create one at the template level.
		'entitytemplate'||now()::text,  -- Name of the template 
		false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
		'scanid'||now()::text, -- create_entitytemplatescanid text,  
		null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
		null, -- create_entitytemplateexternalid text,
		null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
		null,-- create_entitytemplatedeleted boolean,
		null,-- create_entitytemplatedraft boolean,
		null, -- create_entitytemplateentityuuid uuid,
		337::bigint) 

*/

-- set up customer/owner  
-- Assumes customer until custag is cutover to entity 100%
-- Default to tendrel as custoemr if no customer is sent in
-- This should either come from the Auth token or somehow selected (Fillogic scenario)

if create_entitytemplateownerentityuuid isNull
	then tempentitytemplateownerentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61'::uuid; -- default is customer 0.  Could look this up instead.  
	else tempentitytemplateownerentityuuid = create_entitytemplateownerentityuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
					from entity.crud_customer_read_min(null,tempentitytemplateownerentityuuid,null,false,null,null,null, null);

-- probably return an error if the entity is not set to a customer.  Need to sort this out.  
if tempcustomerid isNull
	then return;
end if;

-- setup the language type

if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9');

-- create entity type -- if null use the name

if create_entitytemplatename isNull
	then return;
end if;

call entity.crud_systag_create(
		tempentitytemplateownerentityuuid, 
		'b07bf96e-0a35-4b01-bcc0-863dc7b3db0c'::uuid, --Entity Tag
		null::uuid,   --create_systagcornerstoneentityuuid
		null::integer, --create_systagcornerstoneorder 
		create_entitytemplatename,  -- create_systag
		templanguagetypeentityuuid, -- create_languagetypeuuid  
		create_entitytemplateexternalid, -- create_systagexternalid text,
		create_entitytemplateexternalsystemuuid, -- create_systagexternalsystemuuid
		null, --create_systagdeleted boolean,
		null, --create_systagdraft boolean,
		tempsystagid, -- OUT create_systagid
		tempsystaguuid, -- OUT create_systaguuid text,
		tempentitytemplatetypeuuid, -- OUT create_systagentityuuid uuid
		337::bigint);

-- setup entity tag and custag
-- Check if create_entitytemplatetaguuid exists.  If yes grab its custag and we can use it to create an new entity tag later.  

tempcustagentityuuid = (select entitytagcustagentityuuid 
				from entity.crud_entitytag_read_full(tempentitytemplateownerentityuuid,create_entitytemplatetaguuid,null,null,null, false, null,null,null, templanguagetypeentityuuid));

-- if the entity tag uuid is null and a tag was sent in we need to create a custag.  
-- If not, it just remains null.  Note, this will be a top most custag that points back to tag systag.
-- For now not checking for duplicates.  

if tempcustagentityuuid isNull and create_entitytemplatetag notNull
	then  --create custag  -- check if custag exists as well.  
		call entity.crud_custag_create(tempentitytemplateownerentityuuid, 
										null, 
										null, 
										null, 
										create_entitytemplatetag, 
										templanguagetypeentityuuid, 
										null, 
										create_entitytemplateexternalsystemuuid, 
										null, --create_custagdeleted boolean,
										null, --create_cusstagdraft boolean,
										tempcustagid, -- not sure I need this
										tempcustaguuid, -- not sure I need this
										tempcustagentityuuid, 
										create_modifiedbyid);
end if;

-- create cornerstone order

if create_entitytemplatecornerstoneorder is Null
	then tempcornerstoneorder = 1::integer;
	else tempcornerstoneorder = create_locationcornerstoneorder::integer;
end if;

If create_entitytemplatedeleted isNull
	then tempentitytemplatedeleted = false;
	else tempentitytemplatedeleted = create_entitytemplatedeleted;
end if;

If create_entitytemplatedraft isNull
	then tempentitytemplatedraft = false;
	else tempentitytemplatedraft = create_entitytemplatedraft;
end if;

-- time to insert the base entity template

-- insert name into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		create_entitytemplatename,    
		create_modifiedbyid)  
	Returning languagemasteruuid into templanguagemasteruuid;

INSERT INTO entity.entitytemplate(
	entitytemplatestartdate, 
	entitytemplateenddate, 
	entitytemplatecreateddate, 
	entitytemplatemodifieddate, 
	entitytemplateexternalid, 
	entitytemplatescanid, 
	entitytemplatenameuuid, 
	entitytemplateorder, 
	entitytemplatemodifiedbyuuid, 
	entitytemplateisprimary, 
	entitytemplateownerentityuuid, 
	entitytemplatetypeentityuuid, 
	entitytemplateparententityuuid, 
	entitytemplateexternalsystementityuuid, 
	entitytemplatename,
	entitytemplatedeleted,
	entitytemplatedraft
	)
VALUES ( 
	now(), -- entitytemplatestartdate 
	null, -- entitytemplateenddate 
	now(), -- entitytemplatecreateddate
	now(), -- entitytemplatemodifieddate
	create_entitytemplateexternalid, 
	create_entitytemplatescanid, 
	templanguagemasteruuid,    
	tempcornerstoneorder, 
	(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid) , 
	create_entitytemplateisprimary,
	tempentitytemplateownerentityuuid, 
	tempentitytemplatetypeuuid, 
	create_entitytemplateparententityuuid, 
	create_entitytemplateexternalsystemuuid, 
	create_entitytemplatename,
	tempentitytemplatedeleted,
	tempentitytemplatedraft)
	Returning entitytemplateuuid into create_entitytemplateentityuuid;

update entity.entitytemplate
set entitytemplateparententityuuid = entitytemplateuuid
where entitytemplateparententityuuid isNull
	and entitytemplateuuid = create_entitytemplateentityuuid;

if tempcustagentityuuid notNull
	then 
		call entity.crud_entitytag_create(
			tempentitytemplateownerentityuuid, -- IN create_entitytagownerentityuuid uuid,
			null::uuid, -- IN create_entitytagentityinstanceuuid uuid,
			create_entitytemplateentityuuid, -- IN create_entitytagentitytemplateuuid uuid,	
			tempcustagentityuuid, -- IN create_entitytagcustaguuid uuid,
			templanguagetypeentityuuid, -- IN create_languagetypeuuid uuid,
			null, -- create_entitytagdeleted
			null, -- create_entitytagdraft
			tempentitytaguuid, -- OUT create_entitytaguuid uuid,
			create_modifiedbyid );	
end if;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitytemplate_create(uuid,uuid,integer,uuid,text,text,boolean,text,uuid,text,uuid,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_create(uuid,uuid,integer,uuid,text,text,boolean,text,uuid,text,uuid,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_create(uuid,uuid,integer,uuid,text,text,boolean,text,uuid,text,uuid,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_create(uuid,uuid,integer,uuid,text,text,boolean,text,uuid,text,uuid,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitytemplate_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitytemplate_delete(IN create_entitytemplateownerentityuuid uuid, IN create_entitytemplateentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

-- tests needed
	-- Need a test template
		call entity.crud_entitytemplate_create(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0',  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
			null,  -- merged site and parent.  Set to self if no parent sent in.
			null,  -- default is 1.
			null, -- Used to be only locations had a location category.
			null,  -- If a tag is sent in that does not exist then we create one at the template level.
			'entitytemplate'||now()::text,  -- Name of the template 
			true, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
			'scanid'||now()::text, -- create_entitytemplatescanid text,  
			null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
			null, -- create_entitytemplateexternalid text,
			null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
			null,-- create_entitytemplatedeleted boolean,
			null,-- create_entitytemplatedraft boolean,
			null, -- create_entitytemplateentityuuid uuid,
			337::bigint) 

	-- no owner isNull
		call entity.crud_entitytemplate_delete(
			null, -- IN create_entitytemplateownerentityuuid uuid,
			'957df2f9-051f-4af5-95ee-ea3760fbb83b', -- IN create_entitytemplateentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_entitytemplate_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entitytemplateownerentityuuid uuid,
			null, -- IN create_entitytemplateentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_entitytemplate_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entitytemplateownerentityuuid uuid,
			'957df2f9-051f-4af5-95ee-ea3760fbb83b', -- IN create_entitytemplateentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_entitytemplate_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_entitytemplateownerentityuuid uuid,
			'6b8e5e73-3791-4c4f-9fe5-20b1327615b6', -- IN create_entitytemplateentityuuid uuid,	
			337)

	-- reset the cutag
		update entity.entitytemplate
		set entitytemplatedeleted = false
		where entitytemplateuuid = '6b8e5e73-3791-4c4f-9fe5-20b1327615b6'

select entitytemplatedeleted, * from entity.entitytemplate

-- use this to find fields to work with
select entitytemplatename, * 
from  entity.entitytemplate 
where entitytemplateownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- how to check if the update was successful
select * from entity.entitytemplate where entitytemplatedeleted = true

*/

-- check for owner 

if (create_entitytemplateownerentityuuid isNull or coalesce(create_entitytemplateownerentityuuid::text, '')='')
	then 
		return;   -- need an error code here
end if;

-- check for template

if (create_entitytemplateentityuuid isNull or coalesce(create_entitytemplateentityuuid::text, '')='')
	then return;   -- need an error code here
end if;

-- update the template record to deleted

update entity.entitytemplate
set entitytemplatedeleted = true,
	entitytemplatemodifieddate = now(),
	entitytemplateenddate = now(),	
	entitytemplatemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entitytemplateownerentityuuid = create_entitytemplateownerentityuuid
	and entitytemplateuuid = create_entitytemplateentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitytemplate_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_delete(uuid,uuid,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entitytemplate_field_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entitytemplate_field_read_full(read_ownerentityuuid uuid, read_entitytemplateentityuuid uuid, read_entityfieldentityuuid uuid, read_entitytemplatesenddeleted boolean, read_entitytemplatesenddrafts boolean, read_entitytemplatesendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entitytemplateuuid uuid, entitytemplateownerentityuuid uuid, entitytemplatecustomername text, entitytemplateparententityuuid uuid, entitytemplatesitename text, entitytemplatetypeentityuuid uuid, entitytemplatetype text, entitytemplateisprimary boolean, entitytemplatescanid text, entitytemplatenameuuid text, entitytemplatename text, entitytemplateorder integer, entitytemplatemodifiedbyuuid text, entitytemplatemodifiedby text, entitytemplatestartdate timestamp with time zone, entitytemplateenddate timestamp with time zone, entitytemplatecreateddate timestamp with time zone, entitytemplatemodifieddate timestamp with time zone, entitytemplateexternalid text, entitytemplaterefid bigint, entitytemplaterefuuid text, entitytemplateexternalsystementityuuid uuid, entitytemplateexternalsystem text, entitytemplatedeleted boolean, entitytemplatedraft boolean, entitytemplateactive boolean, entityfielduuid uuid, entityfieldentitytemplateentityuuid uuid, entityfieldcreateddate timestamp with time zone, entityfieldmodifieddate timestamp with time zone, entityfieldstartdate timestamp with time zone, entityfieldenddate timestamp with time zone, entityfieldlanguagemasteruuid text, entityfieldtranslatedname text, entityfieldorder bigint, entityfielddefaultvalue text, entityfieldiscalculated boolean, entityfieldiseditable boolean, entityfieldisvisible boolean, entityfieldisrequired boolean, entityfieldformatentityuuid uuid, entityfieldformatname text, entityfieldwidgetentityuuid uuid, entityfieldwidgetname text, entityfieldexternalid text, entityfieldexternalsystementityuuid uuid, entityfieldexternalsystemname text, entityfieldmodifiedbyuuid text, entityfieldmodifiedby text, entityfieldrefid bigint, entityfieldrefuuid text, entityfieldisprimary boolean, entityfieldtranslate boolean, entityfieldname text, entityfieldownerentityuuid uuid, entityfieldcustomername text, entityfieldtypeentityuuid uuid, entityfieldtypename text, entityfieldparententityuuid uuid, entityfieldsitename text, entityfieldentitytypeentityuuid uuid, entityfieldentitytypename text, entityfieldentityparenttypeentityuuid uuid, entityfieldparenttypename text, entityfieldeleted boolean, entityfielddraft boolean, entityfieldactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentitytemplatesenddeleted boolean[]; 
	tempentitytemplatesenddrafts  boolean[];  
	tempentitytemplatesendinactive boolean[];
	tendreluuid uuid;
BEGIN

/*  Examples

-- all customers no entity template no field
select * from entity.crud_entitytemplate_field_read_full(null, null, null,null, null, null,null)

-- specific customer no entity template no field
select * from entity.crud_entitytemplate_field_read_full(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null, null, null,null)

-- specific entity template
select * 
from entity.crud_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null, null, null,	null)

-- specific entity field
select * 
from entity.crud_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,	null)

-- negative tests - empty or wrong cutomer returns nothing
select * 
from entity.crud_entitytemplate_field_read_full(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',	null,null, null, null,null)

select * 
from entity.crud_entitytemplate_field_read_full(null,null,	'd15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,read_entitytemplatesenddeleted , read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if  read_entitytemplatesenddeleted = false
	then tempentitytemplatesenddeleted = Array[false];
	else tempentitytemplatesenddeleted = Array[true,false];
end if;

if   read_entitytemplatesenddrafts = false
	then tempentitytemplatesenddrafts = Array[false];
	else tempentitytemplatesenddrafts = Array[true,false];
end if;

if   read_entitytemplatesendinactive = false
	then tempentitytemplatesendinactive = Array[true];
	else tempentitytemplatesendinactive = Array[true,false];
end if;

-- probably can do this cealner with less sql

if allowners = true and (read_entitytemplateentityuuid isNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			et.entitytemplateuuid, 
			et.entitytemplateownerentityuuid, 
			cust.customername,
			et.entitytemplateparententityuuid,
			siten.languagemastersource as sitename,	
			et.entitytemplatetypeentityuuid,
			enttype.systagtype as entitytemplatetype,
			et.entitytemplateisprimary,
			et.entitytemplatescanid,
			et.entitytemplatenameuuid,
			entlt.languagetranslationvalue as entitytemplatename,
			et.entitytemplateorder, 
			et.entitytemplatemodifiedbyuuid,
			templatemodby.workerfullname as templatemodifiedby,
			et.entitytemplatestartdate, 
			et.entitytemplateenddate, 
			et.entitytemplatecreateddate, 
			et.entitytemplatemodifieddate, 
			et.entitytemplateexternalid, 
			et.entitytemplaterefid, 
			et.entitytemplaterefuuid,
			et.entitytemplateexternalsystementityuuid, 
			systemtype.systagtype as externalsystem,
				et.entitytemplatedeleted,
				et.entitytemplatedraft,
	case when et.entitytemplatedeleted then false
			when et.entitytemplatedraft then false
			when et.entitytemplateenddate::Date < now()::date 
				and et.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive,
			ef.entityfielduuid, 
			ef.entityfieldentitytemplateentityuuid, 
			ef.entityfieldcreateddate, 
			ef.entityfieldmodifieddate, 
			ef.entityfieldstartdate, 
			ef.entityfieldenddate, 
			ef.entityfieldlanguagemasteruuid, 
			enflt.languagetranslationvalue as entityfieldtranslatedname,			
			ef.entityfieldorder, 
			ef.entityfielddefaultvalue, 
			ef.entityfieldiscalculated, 
			ef.entityfieldiseditable, 
			ef.entityfieldisvisible, 
			ef.entityfieldisrequired, 
			ef.entityfieldformatentityuuid, 
			format.custagtype as entityfieldformatname,			
			ef.entityfieldwidgetentityuuid, 
			widget.custagtype as entityfieldwidgetname,
			ef.entityfieldexternalid,
			ef.entityfieldexternalsystementityuuid, 
			efexsys.systagtype as entityfieldexternalsystemname,
			ef.entityfieldmodifiedbyuuid, 
			fieldmodby.workerfullname as fieldmodifiedby,			
			ef.entityfieldrefid, 
			ef.entityfieldrefuuid,
			ef.entityfieldisprimary, 
			ef.entityfieldtranslate, 
			ef.entityfieldname, 
			ef.entityfieldownerentityuuid, 
			efcust.customername as entityfieldcustomername,			
			ef.entityfieldtypeentityuuid, 
			eft.systagtype as entityfieldtypename,			
			ef.entityfieldparententityuuid, 
			efsiten.languagemastersource as entityfieldsitename,				
			ef.entityfieldentitytypeentityuuid, 
			efet.systagtype as entityfieldentitytypename,			
			ef.entityfieldentityparenttypeentityuuid,
			efpt.systagtype as entityfieldparenttypename,
				ef.entityfielddeleted,
				ef.entityfielddraft,
	case when ef.entityfielddeleted then false
			when ef.entityfielddraft then false
			when ef.entityfieldenddate::Date < now()::date 
				and ef.entityfieldstartdate < now() then false
			else true
	end as entityfieldactive
		from entity.entitytemplate et
			inner join entity.entityfield ef
				on ef.entityfieldentitytemplateentityuuid = et.entitytemplateuuid
					and et.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				 	and et.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)
					and ef.entityfielddeleted = ANY (tempentitytemplatesenddeleted)
				 	and ef.entityfielddraft = ANY (tempentitytemplatesenddrafts)
			inner join (select * from entity.crud_customer_read_full(null, null, null,true, read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive,null)) as cust
				on cust.customerentityuuid = et.entitytemplateownerentityuuid
			inner join (select * from entity.crud_customer_read_full(null, null, null,true, read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive,null)) as efcust
				on efcust.customerentityuuid = ef.entityfieldownerentityuuid
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entitytemplatesenddeleted ,read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as site
				on site.locationentityuuid = et.entitytemplateparententityuuid
			left join languagemaster siten
				on siten.languagemasteruuid = site.locationnameuuid
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted , read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as enttype
				on et.entitytemplatetypeentityuuid = enttype.systagentityuuid
			inner join languagemaster entlm
				on et.entitytemplatenameuuid = entlm.languagemasteruuid
			inner join public.languagetranslations entlt
				on entlt.languagetranslationmasterid  = entlm.languagemasterid
					and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) 
			left join workerinstance workerint
				on workerint.workerinstanceuuid = et.entitytemplatemodifiedbyuuid 
			left join worker templatemodby
				on templatemodby.workerid = workerint.workerinstanceworkerid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as systemtype
				on et.entitytemplateexternalsystementityuuid = enttype.systagentityuuid
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entitytemplatesenddeleted ,read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efsite
				on efsite.locationentityuuid = ef.entityfieldparententityuuid
			left join languagemaster efsiten
				on efsiten.languagemasteruuid = efsite.locationnameuuid
			inner join languagemaster enflm
				on ef.entityfieldlanguagemasteruuid = enflm.languagemasteruuid
			inner join public.languagetranslations enflt
				on enflt.languagetranslationmasterid  = enflm.languagemasterid
					and enflt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) 
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts, read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as format
				on ef.entityfieldformatentityuuid = format.custagentityuuid	
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts, read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as widget
				on ef.entityfieldwidgetentityuuid = widget.custagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efexsys
				on ef.entityfieldexternalsystementityuuid = efexsys.systagentityuuid	
			left join workerinstance workerintfield
				on workerintfield.workerinstanceuuid = ef.entityfieldmodifiedbyuuid 
			left join worker fieldmodby
				on fieldmodby.workerid = workerintfield.workerinstanceworkerid	
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as eft
				on ef.entityfieldtypeentityuuid = eft.systagentityuuid	 
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efet
				on ef.entityfieldentitytypeentityuuid = efet.systagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efpt
				on ef.entityfieldentityparenttypeentityuuid = efpt.systagentityuuid) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive)	
			and foo.entityfieldactive = Any (tempentitytemplatesendinactive)
				;
		return;
end if;

if allowners = false and (read_entitytemplateentityuuid isNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			et.entitytemplateuuid, 
			et.entitytemplateownerentityuuid, 
			cust.customername,
			et.entitytemplateparententityuuid,
			siten.languagemastersource as sitename,	
			et.entitytemplatetypeentityuuid,
			enttype.systagtype as entitytemplatetype,
			et.entitytemplateisprimary,
			et.entitytemplatescanid,
			et.entitytemplatenameuuid,
			entlt.languagetranslationvalue as entitytemplatename,
			et.entitytemplateorder, 
			et.entitytemplatemodifiedbyuuid,
			templatemodby.workerfullname as templatemodifiedby,
			et.entitytemplatestartdate, 
			et.entitytemplateenddate, 
			et.entitytemplatecreateddate, 
			et.entitytemplatemodifieddate, 
			et.entitytemplateexternalid, 
			et.entitytemplaterefid, 
			et.entitytemplaterefuuid,
			et.entitytemplateexternalsystementityuuid, 
			systemtype.systagtype as externalsystem,
				et.entitytemplatedeleted,
				et.entitytemplatedraft,
	case when et.entitytemplatedeleted then false
			when et.entitytemplatedraft then false
			when et.entitytemplateenddate::Date < now()::date 
				and et.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive,
			ef.entityfielduuid, 
			ef.entityfieldentitytemplateentityuuid, 
			ef.entityfieldcreateddate, 
			ef.entityfieldmodifieddate, 
			ef.entityfieldstartdate, 
			ef.entityfieldenddate, 
			ef.entityfieldlanguagemasteruuid, 
			enflt.languagetranslationvalue as entityfieldtranslatedname,			
			ef.entityfieldorder, 
			ef.entityfielddefaultvalue, 
			ef.entityfieldiscalculated, 
			ef.entityfieldiseditable, 
			ef.entityfieldisvisible, 
			ef.entityfieldisrequired, 
			ef.entityfieldformatentityuuid, 
			format.custagtype as entityfieldformatname,			
			ef.entityfieldwidgetentityuuid, 
			widget.custagtype as entityfieldwidgetname,
			ef.entityfieldexternalid,
			ef.entityfieldexternalsystementityuuid, 
			efexsys.systagtype as entityfieldexternalsystemname,
			ef.entityfieldmodifiedbyuuid, 
			fieldmodby.workerfullname as fieldmodifiedby,			
			ef.entityfieldrefid, 
			ef.entityfieldrefuuid,
			ef.entityfieldisprimary, 
			ef.entityfieldtranslate, 
			ef.entityfieldname, 
			ef.entityfieldownerentityuuid, 
			efcust.customername as entityfieldcustomername,			
			ef.entityfieldtypeentityuuid, 
			eft.systagtype as entityfieldtypename,			
			ef.entityfieldparententityuuid, 
			efsiten.languagemastersource as entityfieldsitename,				
			ef.entityfieldentitytypeentityuuid, 
			efet.systagtype as entityfieldentitytypename,			
			ef.entityfieldentityparenttypeentityuuid,
			efpt.systagtype as entityfieldparenttypename,
				ef.entityfielddeleted,
				ef.entityfielddraft,
	case when ef.entityfielddeleted then false
			when ef.entityfielddraft then false
			when ef.entityfieldenddate::Date < now()::date 
				and ef.entityfieldstartdate < now() then false
			else true
	end as entityfieldactive
		from entity.entitytemplate et
			inner join entity.entityfield ef
				on ef.entityfieldentitytemplateentityuuid = et.entitytemplateuuid
					and (et.entitytemplateownerentityuuid = read_ownerentityuuid
						or et.entitytemplateownerentityuuid = tendreluuid)
					and et.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				 	and et.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)
					and ef.entityfielddeleted = ANY (tempentitytemplatesenddeleted)
				 	and ef.entityfielddraft = ANY (tempentitytemplatesenddrafts)
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as cust
				on cust.customerentityuuid = et.entitytemplateownerentityuuid
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as efcust
				on efcust.customerentityuuid = ef.entityfieldownerentityuuid
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entitytemplatesenddeleted ,read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as site
				on site.locationentityuuid = et.entitytemplateparententityuuid
			left join languagemaster siten
				on siten.languagemasteruuid = site.locationnameuuid
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as enttype
				on et.entitytemplatetypeentityuuid = enttype.systagentityuuid
			inner join languagemaster entlm
				on et.entitytemplatenameuuid = entlm.languagemasteruuid
			inner join public.languagetranslations entlt
				on entlt.languagetranslationmasterid  = entlm.languagemasterid
					and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) 
			left join workerinstance workerint
				on workerint.workerinstanceuuid = et.entitytemplatemodifiedbyuuid 
			left join worker templatemodby
				on templatemodby.workerid = workerint.workerinstanceworkerid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as systemtype
				on et.entitytemplateexternalsystementityuuid = enttype.systagentityuuid
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entitytemplatesenddeleted ,read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efsite
				on efsite.locationentityuuid = ef.entityfieldparententityuuid
			left join languagemaster efsiten
				on efsiten.languagemasteruuid = efsite.locationnameuuid
			inner join languagemaster enflm
				on ef.entityfieldlanguagemasteruuid = enflm.languagemasteruuid
			inner join public.languagetranslations enflt
				on enflt.languagetranslationmasterid  = enflm.languagemasterid
					and enflt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) 
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts, read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as format
				on ef.entityfieldformatentityuuid = format.custagentityuuid	
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts, read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as widget
				on ef.entityfieldwidgetentityuuid = widget.custagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efexsys
				on ef.entityfieldexternalsystementityuuid = efexsys.systagentityuuid	
			left join workerinstance workerintfield
				on workerintfield.workerinstanceuuid = ef.entityfieldmodifiedbyuuid 
			left join worker fieldmodby
				on fieldmodby.workerid = workerintfield.workerinstanceworkerid	
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as eft
				on ef.entityfieldtypeentityuuid = eft.systagentityuuid	 
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efet
				on ef.entityfieldentitytypeentityuuid = efet.systagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efpt
				on ef.entityfieldentityparenttypeentityuuid = efpt.systagentityuuid) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive)
					and foo.entityfieldactive = Any (tempentitytemplatesendinactive);
			return;
		 
end if;

if allowners = false and (read_entitytemplateentityuuid notNull) and (read_entityfieldentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			et.entitytemplateuuid, 
			et.entitytemplateownerentityuuid, 
			cust.customername,
			et.entitytemplateparententityuuid,
			siten.languagemastersource as sitename,	
			et.entitytemplatetypeentityuuid,
			enttype.systagtype as entitytemplatetype,
			et.entitytemplateisprimary,
			et.entitytemplatescanid,
			et.entitytemplatenameuuid,
			entlt.languagetranslationvalue as entitytemplatename,
			et.entitytemplateorder, 
			et.entitytemplatemodifiedbyuuid,
			templatemodby.workerfullname as templatemodifiedby,
			et.entitytemplatestartdate, 
			et.entitytemplateenddate, 
			et.entitytemplatecreateddate, 
			et.entitytemplatemodifieddate, 
			et.entitytemplateexternalid, 
			et.entitytemplaterefid, 
			et.entitytemplaterefuuid,
			et.entitytemplateexternalsystementityuuid, 
			systemtype.systagtype as externalsystem,
				et.entitytemplatedeleted,
				et.entitytemplatedraft,
	case when et.entitytemplatedeleted then false
			when et.entitytemplatedraft then false
			when et.entitytemplateenddate::Date < now()::date 
				and et.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive,
			ef.entityfielduuid, 
			ef.entityfieldentitytemplateentityuuid, 
			ef.entityfieldcreateddate, 
			ef.entityfieldmodifieddate, 
			ef.entityfieldstartdate, 
			ef.entityfieldenddate, 
			ef.entityfieldlanguagemasteruuid, 
			enflt.languagetranslationvalue as entityfieldtranslatedname,			
			ef.entityfieldorder, 
			ef.entityfielddefaultvalue, 
			ef.entityfieldiscalculated, 
			ef.entityfieldiseditable, 
			ef.entityfieldisvisible, 
			ef.entityfieldisrequired, 
			ef.entityfieldformatentityuuid, 
			format.custagtype as entityfieldformatname,			
			ef.entityfieldwidgetentityuuid, 
			widget.custagtype as entityfieldwidgetname,
			ef.entityfieldexternalid,
			ef.entityfieldexternalsystementityuuid, 
			efexsys.systagtype as entityfieldexternalsystemname,
			ef.entityfieldmodifiedbyuuid, 
			fieldmodby.workerfullname as fieldmodifiedby,			
			ef.entityfieldrefid, 
			ef.entityfieldrefuuid,
			ef.entityfieldisprimary, 
			ef.entityfieldtranslate, 
			ef.entityfieldname, 
			ef.entityfieldownerentityuuid, 
			efcust.customername as entityfieldcustomername,			
			ef.entityfieldtypeentityuuid, 
			eft.systagtype as entityfieldtypename,			
			ef.entityfieldparententityuuid, 
			efsiten.languagemastersource as entityfieldsitename,				
			ef.entityfieldentitytypeentityuuid, 
			efet.systagtype as entityfieldentitytypename,			
			ef.entityfieldentityparenttypeentityuuid,
			efpt.systagtype as entityfieldparenttypename,
				ef.entityfielddeleted,
				ef.entityfielddraft,
	case when et.entityfielddeleted then false
			when et.entityfielddraft then false
			when et.entityfieldenddate::Date < now()::date 
				and et.entityfieldstartdate < now() then false
			else true
	end as entityfieldactive
		from entity.entitytemplate et
			inner join entity.entityfield ef
				on ef.entityfieldentitytemplateentityuuid = et.entitytemplateuuid
					and (et.entitytemplateownerentityuuid = read_ownerentityuuid
						or et.entitytemplateownerentityuuid = tendreluuid)
					and et.entitytemplateuuid = read_entitytemplateentityuuid
					and et.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				 	and et.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)
					and ef.entityfielddeleted = ANY (tempentitytemplatesenddeleted)
				 	and ef.entityfielddraft = ANY (tempentitytemplatesenddrafts)
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as cust
				on cust.customerentityuuid = et.entitytemplateownerentityuuid
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as efcust
				on efcust.customerentityuuid = ef.entityfieldownerentityuuid
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entitytemplatesenddeleted ,read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as site
				on site.locationentityuuid = et.entitytemplateparententityuuid
			left join languagemaster siten
				on siten.languagemasteruuid = site.locationnameuuid
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as enttype
				on et.entitytemplatetypeentityuuid = enttype.systagentityuuid
			inner join languagemaster entlm
				on et.entitytemplatenameuuid = entlm.languagemasteruuid
			inner join public.languagetranslations entlt
				on entlt.languagetranslationmasterid  = entlm.languagemasterid
					and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) 
			left join workerinstance workerint
				on workerint.workerinstanceuuid = et.entitytemplatemodifiedbyuuid 
			left join worker templatemodby
				on templatemodby.workerid = workerint.workerinstanceworkerid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as systemtype
				on et.entitytemplateexternalsystementityuuid = enttype.systagentityuuid
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entitytemplatesenddeleted ,read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efsite
				on efsite.locationentityuuid = ef.entityfieldparententityuuid
			left join languagemaster efsiten
				on efsiten.languagemasteruuid = efsite.locationnameuuid
			inner join languagemaster enflm
				on ef.entityfieldlanguagemasteruuid = enflm.languagemasteruuid
			inner join public.languagetranslations enflt
				on enflt.languagetranslationmasterid  = enflm.languagemasterid
					and enflt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts, read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as format
				on ef.entityfieldformatentityuuid = format.custagentityuuid	
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts, read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as widget
				on ef.entityfieldwidgetentityuuid = widget.custagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efexsys
				on ef.entityfieldexternalsystementityuuid = efexsys.systagentityuuid	
			left join workerinstance workerintfield
				on workerintfield.workerinstanceuuid = ef.entityfieldmodifiedbyuuid 
			left join worker fieldmodby
				on fieldmodby.workerid = workerintfield.workerinstanceworkerid	
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as eft
				on ef.entityfieldtypeentityuuid = eft.systagentityuuid	 
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efet
				on ef.entityfieldentitytypeentityuuid = efet.systagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efpt
				on ef.entityfieldentityparenttypeentityuuid = efpt.systagentityuuid) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive)
					and foo.entityfieldactive = Any (tempentitytemplatesendinactive);
		return;

end if;

if allowners = false and (read_entityfieldentityuuid notNull)
	then
	return query 
		select *
		from (SELECT 
			read_languagetranslationtypeuuid,
			et.entitytemplateuuid, 
			et.entitytemplateownerentityuuid, 
			cust.customername,
			et.entitytemplateparententityuuid,
			siten.languagemastersource as sitename,	
			et.entitytemplatetypeentityuuid,
			enttype.systagtype as entitytemplatetype,
			et.entitytemplateisprimary,
			et.entitytemplatescanid,
			et.entitytemplatenameuuid,
			entlt.languagetranslationvalue as entitytemplatename,
			et.entitytemplateorder, 
			et.entitytemplatemodifiedbyuuid,
			templatemodby.workerfullname as templatemodifiedby,
			et.entitytemplatestartdate, 
			et.entitytemplateenddate, 
			et.entitytemplatecreateddate, 
			et.entitytemplatemodifieddate, 
			et.entitytemplateexternalid, 
			et.entitytemplaterefid, 
			et.entitytemplaterefuuid,
			et.entitytemplateexternalsystementityuuid, 
			systemtype.systagtype as externalsystem,
				et.entitytemplatedeleted,
				et.entitytemplatedraft,
	case when et.entitytemplatedeleted then false
			when et.entitytemplatedraft then false
			when et.entitytemplateenddate::Date < now()::date 
				and et.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive,
			ef.entityfielduuid, 
			ef.entityfieldentitytemplateentityuuid, 
			ef.entityfieldcreateddate, 
			ef.entityfieldmodifieddate, 
			ef.entityfieldstartdate, 
			ef.entityfieldenddate, 
			ef.entityfieldlanguagemasteruuid, 
			enflt.languagetranslationvalue as entityfieldtranslatedname,			
			ef.entityfieldorder, 
			ef.entityfielddefaultvalue, 
			ef.entityfieldiscalculated, 
			ef.entityfieldiseditable, 
			ef.entityfieldisvisible, 
			ef.entityfieldisrequired, 
			ef.entityfieldformatentityuuid, 
			format.custagtype as entityfieldformatname,			
			ef.entityfieldwidgetentityuuid, 
			widget.custagtype as entityfieldwidgetname,
			ef.entityfieldexternalid,
			ef.entityfieldexternalsystementityuuid, 
			efexsys.systagtype as entityfieldexternalsystemname,
			ef.entityfieldmodifiedbyuuid, 
			fieldmodby.workerfullname as fieldmodifiedby,			
			ef.entityfieldrefid, 
			ef.entityfieldrefuuid,
			ef.entityfieldisprimary, 
			ef.entityfieldtranslate, 
			ef.entityfieldname, 
			ef.entityfieldownerentityuuid, 
			efcust.customername as entityfieldcustomername,			
			ef.entityfieldtypeentityuuid, 
			eft.systagtype as entityfieldtypename,			
			ef.entityfieldparententityuuid, 
			efsiten.languagemastersource as entityfieldsitename,				
			ef.entityfieldentitytypeentityuuid, 
			efet.systagtype as entityfieldentitytypename,			
			ef.entityfieldentityparenttypeentityuuid,
			efpt.systagtype as entityfieldparenttypename,
				ef.entityfielddeleted,
				ef.entityfielddraft,
	case when et.entityfielddeleted then false
			when et.entityfielddraft then false
			when et.entityfieldenddate::Date < now()::date 
				and et.entityfieldstartdate < now() then false
			else true
	end as entityfieldactive
		from entity.entitytemplate et
			inner join entity.entityfield ef
				on ef.entityfieldentitytemplateentityuuid = et.entitytemplateuuid
					and (et.entitytemplateownerentityuuid = read_ownerentityuuid
						or et.entitytemplateownerentityuuid = tendreluuid)
					and ef.entityfielduuid = read_entityfieldentityuuid
					and et.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				 	and et.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)
					and ef.entityfielddeleted = ANY (tempentitytemplatesenddeleted)
				 	and ef.entityfielddraft = ANY (tempentitytemplatesenddrafts)
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as cust
				on cust.customerentityuuid = et.entitytemplateownerentityuuid
			inner join (select * from entity.crud_customer_read_full(null, null, null,true,read_entitytemplatesenddeleted,read_entitytemplatesenddrafts,read_entitytemplatesendinactive, null)) as efcust
				on efcust.customerentityuuid = ef.entityfieldownerentityuuid
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entitytemplatesenddeleted ,read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as site
				on site.locationentityuuid = et.entitytemplateparententityuuid
			left join languagemaster siten
				on siten.languagemasteruuid = site.locationnameuuid
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as enttype
				on et.entitytemplatetypeentityuuid = enttype.systagentityuuid
			inner join languagemaster entlm
				on et.entitytemplatenameuuid = entlm.languagemasteruuid
			inner join public.languagetranslations entlt
				on entlt.languagetranslationmasterid  = entlm.languagemasterid
					and entlt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) 
			left join workerinstance workerint
				on workerint.workerinstanceuuid = et.entitytemplatemodifiedbyuuid 
			left join worker templatemodby
				on templatemodby.workerid = workerint.workerinstanceworkerid
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as systemtype
				on et.entitytemplateexternalsystementityuuid = enttype.systagentityuuid
			left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,read_entitytemplatesenddeleted ,read_entitytemplatesenddrafts ,read_entitytemplatesendinactive ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efsite
				on efsite.locationentityuuid = ef.entityfieldparententityuuid
			left join languagemaster efsiten
				on efsiten.languagemasteruuid = efsite.locationnameuuid
			inner join languagemaster enflm
				on ef.entityfieldlanguagemasteruuid = enflm.languagemasteruuid
			inner join public.languagetranslations enflt
				on enflt.languagetranslationmasterid  = enflm.languagemasterid
					and enflt.languagetranslationtypeid = (select systagid from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null,read_languagetranslationtypeuuid, null, false,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts, read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as format
				on ef.entityfieldformatentityuuid = format.custagentityuuid	
			left join (select * from entity.crud_custag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts, read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as widget
				on ef.entityfieldwidgetentityuuid = widget.custagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efexsys
				on ef.entityfieldexternalsystementityuuid = efexsys.systagentityuuid	
			left join workerinstance workerintfield
				on workerintfield.workerinstanceuuid = ef.entityfieldmodifiedbyuuid 
			left join worker fieldmodby
				on fieldmodby.workerid = workerintfield.workerinstanceworkerid	
			inner join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as eft
				on ef.entityfieldtypeentityuuid = eft.systagentityuuid	 
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efet
				on ef.entityfieldentitytypeentityuuid = efet.systagentityuuid	
			left join (select * from entity.crud_systag_read_min(null,null,null, null, true,read_entitytemplatesenddeleted  , read_entitytemplatesenddrafts  ,read_entitytemplatesendinactive  ,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as efpt
				on ef.entityfieldentityparenttypeentityuuid = efpt.systagentityuuid) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive)
					and foo.entityfieldactive = Any (tempentitytemplatesendinactive);
		return;

end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entitytemplate_field_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_field_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_field_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_field_read_full(uuid,uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.crud_entitytemplate_read_min(uuid,uuid,boolean,boolean,boolean,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.crud_entitytemplate_read_min(read_ownerentityuuid uuid, read_entitytemplateentityuuid uuid, read_entitytemplatesenddeleted boolean, read_entitytemplatesenddrafts boolean, read_entitytemplatesendinactive boolean, read_languagetranslationtypeuuid uuid)
 RETURNS TABLE(languagetranslationtypeuuid uuid, entitytemplateuuid uuid, entitytemplateownerentityuuid uuid, entitytemplateparententityuuid uuid, entitytemplatetypeentityuuid uuid, entitytemplateisprimary boolean, entitytemplatescanid text, entitytemplatenameuuid text, entitytemplateorder integer, entitytemplatemodifiedbyuuid text, entitytemplatestartdate timestamp with time zone, entitytemplateenddate timestamp with time zone, entitytemplatecreateddate timestamp with time zone, entitytemplatemodifieddate timestamp with time zone, entitytemplateexternalid text, entitytemplaterefid bigint, entitytemplaterefuuid text, entitytemplateexternalsystementityuuid uuid, entitytemplatedeleted boolean, entitytemplatedraft boolean, entitytemplateactive boolean)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare
	allowners boolean; 
	templanguagetranslationtypeid bigint;
	tempentitytemplatesenddeleted boolean[]; 
	tempentitytemplatesenddrafts  boolean[];  
	tempentitytemplatesendinactive boolean[];
	tendreluuid uuid;
BEGIN

/*  Examples

-- all customers no entity template
select * from entity.crud_entitytemplate_read_min(null, null, null,null, null, null)

-- specific customer no entity template
select * from entity.crud_entitytemplate_read_min(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,null, null,null)

-- specific entity template
select * 
from entity.crud_entitytemplate_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','957df2f9-051f-4af5-95ee-ea3760fbb83b',	null,null, null,null)

-- negative test - empty or wrong cutomer returns nothing
select * 
from entity.crud_entitytemplate_read_min(null,'957df2f9-051f-4af5-95ee-ea3760fbb83b',	null,null, null,null)

*/

tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';

if read_languagetranslationtypeuuid isNull
	then read_languagetranslationtypeuuid = (
		select systagentityuuid 
		from entity.crud_systag_read_min(	tendreluuid, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,read_entitytemplatesenddeleted, read_entitytemplatesenddrafts,read_entitytemplatesendinactive,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
		); 
end if;

if read_ownerentityuuid isNull
	then allowners = true;
	else allowners = false;
end if;

if  read_entitytemplatesenddeleted = false
	then tempentitytemplatesenddeleted = Array[false];
	else tempentitytemplatesenddeleted = Array[true,false];
end if;

if read_entitytemplatesenddrafts = false
	then tempentitytemplatesenddrafts = Array[false];
	else tempentitytemplatesenddrafts = Array[true,false];
end if;

if  read_entitytemplatesendinactive = false
	then tempentitytemplatesendinactive = Array[true];
	else tempentitytemplatesendinactive = Array[true,false];
end if;

-- probably can do this cealner with less sql

if allowners = true and (read_entitytemplateentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et.entitytemplateuuid, 
				et.entitytemplateownerentityuuid, 
				et.entitytemplateparententityuuid,
				et.entitytemplatetypeentityuuid,
				et.entitytemplateisprimary,
				et.entitytemplatescanid,
				et.entitytemplatenameuuid,
				et.entitytemplateorder, 
				et.entitytemplatemodifiedbyuuid, 
				et.entitytemplatestartdate, 
				et.entitytemplateenddate, 
				et.entitytemplatecreateddate, 
				et.entitytemplatemodifieddate, 
				et.entitytemplateexternalid, 
				et.entitytemplaterefid, 
				et.entitytemplaterefuuid,
				et.entitytemplateexternalsystementityuuid,
				et.entitytemplatedeleted,
				et.entitytemplatedraft,
	case when et.entitytemplatedeleted then false
			when et.entitytemplatedraft then false
			when et.entitytemplateenddate::Date > now()::date 
				and et.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive
			FROM entity.entitytemplate et
			where et.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				 and et.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive
		) ;
		return;
end if;

if allowners = false and (read_entitytemplateentityuuid isNull)
	then
	return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et2.entitytemplateuuid, 
				et2.entitytemplateownerentityuuid, 
				et2.entitytemplateparententityuuid,
				et2.entitytemplatetypeentityuuid,
				et2.entitytemplateisprimary,
				et2.entitytemplatescanid,
				et2.entitytemplatenameuuid,
				et2.entitytemplateorder, 
				et2.entitytemplatemodifiedbyuuid, 
				et2.entitytemplatestartdate, 
				et2.entitytemplateenddate, 
				et2.entitytemplatecreateddate, 
				et2.entitytemplatemodifieddate, 
				et2.entitytemplateexternalid, 
				et2.entitytemplaterefid, 
				et2.entitytemplaterefuuid,
				et2.entitytemplateexternalsystementityuuid,
				et2.entitytemplatedeleted,
				et2.entitytemplatedraft,
	case when et2.entitytemplatedeleted then false
			when et2.entitytemplatedraft then false
			when et2.entitytemplateenddate::Date > now()::date 
				and et2.entitytemplatestartdate < now() then false
			else true
	end as entitytemplateactive
		FROM entity.entitytemplate et2
		where et2.entitytemplateownerentityuuid = read_ownerentityuuid
			and et2.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
			and et2.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive
		) ;
		return;
end if;

if allowners = false and (read_entitytemplateentityuuid notNull)
	then
		return query 
		select *
		from (SELECT 
				read_languagetranslationtypeuuid,
				et3.entitytemplateuuid, 
				et3.entitytemplateownerentityuuid, 
				et3.entitytemplateparententityuuid,
				et3.entitytemplatetypeentityuuid,
				et3.entitytemplateisprimary,
				et3.entitytemplatescanid,
				et3.entitytemplatenameuuid,
				et3.entitytemplateorder, 
				et3.entitytemplatemodifiedbyuuid, 
				et3.entitytemplatestartdate, 
				et3.entitytemplateenddate, 
				et3.entitytemplatecreateddate, 
				et3.entitytemplatemodifieddate, 
				et3.entitytemplateexternalid, 
				et3.entitytemplaterefid, 
				et3.entitytemplaterefuuid,
				et3.entitytemplateexternalsystementityuuid,
				et3.entitytemplatedeleted,
				et3.entitytemplatedraft,
	case when et3.entitytemplatedeleted then false
			when et3.entitytemplatedraft then false
			when et3.entitytemplateenddate::Date > now()::date 
				and et3.entitytemplatestartdate < now() then false
			else true
				end as entitytemplateactive
			FROM entity.entitytemplate et3
			where (et3.entitytemplateownerentityuuid = read_ownerentityuuid
					or et3.entitytemplateownerentityuuid = tendreluuid) 
				and et3.entitytemplateuuid = read_entitytemplateentityuuid
				and et3.entitytemplatedeleted = ANY (tempentitytemplatesenddeleted)
				and et3.entitytemplatedraft = ANY (tempentitytemplatesenddrafts)) as foo
		where foo.entitytemplateactive = Any (tempentitytemplatesendinactive) ;
end if;

End;	

$function$;


REVOKE ALL ON FUNCTION entity.crud_entitytemplate_read_min(uuid,uuid,boolean,boolean,boolean,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_read_min(uuid,uuid,boolean,boolean,boolean,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_read_min(uuid,uuid,boolean,boolean,boolean,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.crud_entitytemplate_read_min(uuid,uuid,boolean,boolean,boolean,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_entitytemplate_update(uuid,uuid,uuid,text,uuid,text,text,text,integer,boolean,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_entitytemplate_update(IN update_entitytemplateuuid uuid, IN update_entitytemplateownerentityuuid uuid, IN update_entitytemplateparententityuuid uuid, IN update_entitytemplateexternalid text, IN update_entitytemplateexternalsystementityuuid uuid, IN update_entitytemplatescanid text, IN update_entitytemplatenameuuid text, IN update_entitytemplatename text, IN update_entitytemplateorder integer, IN update_entitytemplateisprimary boolean, IN update_entitytemplatetypeentityuuid uuid, IN update_entitytemplatedeleted boolean, IN update_entitytemplatedraft boolean, IN update_entitytemplatestartdate timestamp with time zone, IN update_entitytemplateenddate timestamp with time zone, IN update_entitytemplatemodifiedbyuuid text, IN update_languagetypeuuid uuid)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templocationid bigint;
Begin

-- Once created, the only things that can change after something is publsihed are ???

/*
-- Add testing here

*/

-- remove this once language issues are passed through

if update_languagetypeuuid isNull
	then update_languagetypeuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
End if;

 if update_entitytemplatedraft = true or ((select entitytemplatedraft 
										from entity.entitytemplate
										WHERE entitytemplateuuid = update_entitytemplateuuid ) = true)
	then -- let everything change
		UPDATE entity.entitytemplate
			SET entitytemplateownerentityuuid = case when update_entitytemplateownerentityuuid notnull 
												then update_entitytemplateownerentityuuid
												else entitytemplateownerentityuuid end,	
				entitytemplateparententityuuid = case when update_entitytemplateparententityuuid notnull 
												then update_entitytemplateparententityuuid
												else entitytemplateparententityuuid end,
				entitytemplatetypeentityuuid = case when update_entitytemplatetypeentityuuid notnull 
												then update_entitytemplatetypeentityuuid
												else entitytemplatetypeentityuuid end,
				entitytemplateexternalid = update_entitytemplateexternalid ,
				entitytemplateexternalsystementityuuid = case when update_entitytemplateexternalsystementityuuid notnull 
														then update_entitytemplateexternalsystementityuuid
														else entitytemplateexternalsystementityuuid end,
				entitytemplatescanid = update_entitytemplatescanid,
 				entitytemplatename  = case when update_entitytemplatename notnull and (coalesce(update_entitytemplatename,'') <> '')
												then update_entitytemplatename
												else entitytemplatename end,
				entitytemplateorder = case when update_entitytemplateorder notnull 
												then update_entitytemplateorder
												else entitytemplateorder end,  
				entitytemplateisprimary = case when update_entitytemplateisprimary notnull 
												then update_entitytemplateisprimary
												else entitytemplateisprimary end,  
				entitytemplatedeleted = case when update_entitytemplatedeleted notnull 
										then update_entitytemplatedeleted
										else entitytemplatedeleted end, 
				entitytemplatedraft = case when update_entitytemplatedraft notnull 
										then update_entitytemplatedraft
										else entitytemplatedraft end,
				entitytemplatestartdate = case when update_entitytemplatestartdate notnull 
										then update_entitytemplatestartdate
										else entitytemplatestartdate end,
	 			entitytemplateenddate = case 	when entitytemplatedeleted = true 
											and entitytemplateenddate isNull
											and update_entitytemplateenddate isNull then now()
										when entitytemplatedeleted = true 
											and entitytemplateenddate isNull
											and update_entitytemplateenddate notNull then update_entitytemplateenddate 
										when entitytemplatedeleted = true 
											and entitytemplateenddate notNull
											and update_entitytemplateenddate isNull then entitytemplateenddate
										when entitytemplatedeleted = true and entitytemplateenddate notNull
											and update_entitytemplateenddate notNull and update_entitytemplateenddate <> entitytemplateenddate
											then update_entitytemplateenddate	
										else null
									end,
				entitytemplatemodifieddate=now(),
				entitytemplatemodifiedbyuuid = update_entitytemplatemodifiedbyuuid
		WHERE entitytemplateuuid = update_entitytemplateuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entitytemplate
			SET entitytemplatestartdate = case when update_entitytemplatestartdate notnull 
											then update_entitytemplatestartdate
											else entitytemplatestartdate end,
				entitytemplatetypeentityuuid = case when update_entitytemplatetypeentityuuid notnull 
												then update_entitytemplatetypeentityuuid
												else entitytemplatetypeentityuuid end,
 				entitytemplatename  = case when update_entitytemplatename notnull and (coalesce(update_entitytemplatename,'') <> '')
												then update_entitytemplatename
												else entitytemplatename end,
				entitytemplateorder = case when update_entitytemplateorder notnull 
												then update_entitytemplateorder
												else entitytemplateorder end, 
				entitytemplateexternalid = update_entitytemplateexternalid ,
				entitytemplatescanid = update_entitytemplatescanid,
				entitytemplateexternalsystementityuuid = case when update_entitytemplateexternalsystementityuuid notnull 
														then update_entitytemplateexternalsystementityuuid
														else entitytemplateexternalsystementityuuid end,
				entitytemplatedeleted = case when update_entitytemplatedeleted notnull 
										then update_entitytemplatedeleted
										else entitytemplatedeleted end, 
 				entitytemplateenddate = case 	when entitytemplatedeleted = true 
											and entitytemplateenddate isNull
											and update_entitytemplateenddate isNull then now()
										when entitytemplatedeleted = true 
											and entitytemplateenddate isNull
											and update_entitytemplateenddate notNull then update_entitytemplateenddate 
										when entitytemplatedeleted = true 
											and entitytemplateenddate notNull
											and update_entitytemplateenddate isNull then entitytemplateenddate
										when entitytemplatedeleted = true and entitytemplateenddate notNull
											and update_entitytemplateenddate notNull and update_entitytemplateenddate <> entitytemplateenddate
											then update_entitytemplateenddate	
										else null
									end,
				entitytemplatemodifieddate=now(),
				entitytemplatemodifiedbyuuid = update_entitytemplatemodifiedbyuuid
		WHERE entitytemplateuuid = update_entitytemplateuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_entitytemplateownerentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);

if  update_entitytemplatename notNull and (coalesce(update_entitytemplatename,'') <> '')
	then

		update public.languagetranslations
			set languagetranslationvalue = update_entitytemplatename
		from entity.entitytemplate
			where entitytemplateuuid = update_entitytemplateuuid
				and languagetranslationmasterid = (select languagemasterid from languagemaster where languagemasteruuid = entitytemplatenameuuid)
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_entitytemplatename;
	
		-- update the languagemaster if the name changed
	
		update languagemaster
		set languagemastersource = update_entitytemplatename,
			languagemastermodifieddate = now(),
			languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid =update_entitytemplatemodifiedbyuuid),
			languagemastersourcelanguagetypeid = (select entityinstanceoriginalid from entity.entityinstance where entityinstanceuuid = update_languagetypeuuid),
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'		
		from entity.entitytemplate
		where entitytemplateuuid = update_entitytemplateuuid
			and languagemasteruuid = entitytemplatenameuuid
			and languagemastersource <> update_entitytemplatename;
	
		-- update the languagemaster and entityinstance if the type changed
	
		update entity.entityinstance
		set entityinstanceentitytemplatename = update_entitytemplatename,
			entityinstancemodifiedbyuuid = update_entitytemplatemodifiedbyuuid	
		where entityinstanceuuid = update_entitytemplatetypeentityuuid	
			and entityinstancetype <> update_entitytemplatename
			and entityinstancedeleted = false ;
END IF;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_entitytemplate_update(uuid,uuid,uuid,text,uuid,text,text,text,integer,boolean,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_update(uuid,uuid,uuid,text,uuid,text,text,text,integer,boolean,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_update(uuid,uuid,uuid,text,uuid,text,text,text,integer,boolean,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_entitytemplate_update(uuid,uuid,uuid,text,uuid,text,text,text,integer,boolean,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text,uuid) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_location_create(uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_location_create(IN create_locationownerentityuuid uuid, IN create_locationparententityuuid uuid, IN create_locationcornerstoneentityuuid uuid, IN create_locationcornerstoneorder integer, IN create_locationtaguuid uuid, IN create_locationtag text, IN create_locationname text, IN create_locationdisplayname text, IN create_locationscanid text, IN create_locationtimezone text, IN create_languagetypeuuid uuid, IN create_locationexternalid text, IN create_locationexternalsystemuuid uuid, IN create_locationlatitude text, IN create_locationlongitude text, IN create_locationradius text, IN create_locationdeleted boolean, IN create_locationdraft boolean, OUT create_locationentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
 	templanguagemasterid bigint;
	templanguagemasteruuid text;
	tempdisplaylanguagemasterid bigint;
	temptypelanguagemasterid bigint;
	temptzlanguagemasterid bigint;
	tempcustomerid bigint;
	tempcustagentityuuid uuid;
	templocationentityuuid uuid;
	tempcustomeruuid text;
	tempcustagid bigint;
	tempcustaguuid text;
	templocationtimezone text;
	templanguagetypeid bigint;
	templanguagetypeuuid uuid;
	templocationcornerstoneorder integer;
	templocationid bigint;
	templocationuuid text;
	templocationdeleted boolean;
	templocationdraft boolean;
	templocationownerentityuuid uuid;
	englishuuid uuid;
	tendreluuid uuid;
	templanguagetypeentityuuid uuid;
Begin

/*
-- Customer for testing -- '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

select * from entity.crud_location_read_min('70f200bd-1c92-481d-9f5c-e6cf6cd92cd0',null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

select * from entity.entityinstance where entityinstanceuuid = 'f5491785-0dc0-4746-8180-a26c1798b5d0'

----------------------------------------------

-- tests 
  	-- New site new location type no parent no cornerstone
	  
	call entity.crud_location_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_locationownerentityuuid
		null,	--create_locationparententityuuid
		null,   --create_locationcornerstoneentityuuid
		null, --create_locationcornerstoneorder 
		null, -- create_locationtaguuid,
		'locationtag'||now(),  -- create_locationtag
		'sitename'||now(),  -- create_locationname
		'sitedisplayname'||now(), -- locationdisplayname 
		'sitescanid'||now(), -- locationscanid	
		'America/Los_Angeles',  -- locationtimezone
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- languagetypeuuid  
		null,  -- locationexternalid
		null, -- locationexternalsystemuuid
		null, -- locationlatitude 
		null, -- locationlongitude
		null, -- locationradius
		null,
		null,
		null, -- OUT create_locationentityuuid
		337::bigint)	

	-- New location existing parent new location tag

	call entity.crud_location_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_locationownerentityuuid
		????,	--create_locationparententityuuid
		null,   --create_locationcornerstoneentityuuid
		null, --create_locationcornerstoneorder 
		null, -- create_locationtaguuid,
		'locationsubtag'||now(),  -- create_locationtag
		'locationname'||now(),  -- create_locationname
		'locationdisplayname'||now(), -- locationdisplayname 
		'locationscanid'||now(), -- locationscanid	
		'America/Los_Angeles',  -- locationtimezone
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- languagetypeuuid  
		null,  -- locationexternalid
		null, -- locationexternalsystemuuid
		null, -- locationlatitude 
		null, -- locationlongitude
		null, -- locationradius
		null,
		null,
		null, -- OUT create_locationentityuuid
		337::bigint)	

	-- New location existing parent existing location tag

	call entity.crud_location_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_locationownerentityuuid
		???,	--create_locationparententityuuid
		null,   --create_locationcornerstoneentityuuid
		null, --create_locationcornerstoneorder 
		'f5491785-0dc0-4746-8180-a26c1798b5d0', -- create_locationtaguuid,
		null,  -- create_locationtag
		'sitename'||now(),  -- create_locationname
		'sitedisplayname'||now(), -- locationdisplayname 
		'sitescanid'||now(), -- locationscanid	
		'America/Los_Angeles',  -- locationtimezone
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- languagetypeuuid  
		null,  -- locationexternalid
		null, -- locationexternalsystemuuid
		null, -- locationlatitude 
		null, -- locationlongitude
		null, -- locationradius
		null,
		null,
		null, -- OUT create_locationentityuuid
		337::bigint)	

	-- New location existing cornerstone

	call entity.crud_location_create(
		'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', --create_locationownerentityuuid
		???,	--create_locationparententityuuid
		???,   --create_locationcornerstoneentityuuid
		2, --create_locationcornerstoneorder 
		'f5491785-0dc0-4746-8180-a26c1798b5d0', -- create_locationtaguuid,
		null,  -- create_locationtag
		'sitename'||now(),  -- create_locationname
		'sitedisplayname'||now(), -- locationdisplayname 
		'sitescanid'||now(), -- locationscanid	
		'America/Los_Angeles',  -- locationtimezone
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- languagetypeuuid  
		null,  -- locationexternalid
		null, -- locationexternalsystemuuid
		null, -- locationlatitude 
		null, -- locationlongitude
		null, -- locationradius
		null,
		null,
		null, -- OUT create_locationentityuuid
		337::bigint)	

-- We could harden this by checking for valid data at the beginning of this call.  Will do this as phase 2.  
	-- Must have a valid customerid or customerexternalid
	-- Site Name and Site type can not be null or ''
	-- languagetype id must be a valid languagetypeid
	-- locationtimezone must be a legit timezone
	-- modified by id gets defaulted if it is not passed in (Maybe validate this)
	-- Could check all this and return null if any of these fail

-- Use owner instead of customer and paretn instead of site
*/

englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';

-- setup customer info
if create_locationownerentityuuid isNull
	then return;
	else templocationownerentityuuid = create_locationownerentityuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,templocationownerentityuuid,null,false,null,null,null, null);

-- probably return an error if the entity is not set to a customer.  Need to sort this out.  
if tempcustomerid isNull
	then  return;
end if;

-- locations need a name
if (create_locationname isNull or coalesce(create_locationname,'')= '')
	then return;  -- need error code
end if;

-- setup location order
if create_locationcornerstoneorder isNull
	then templocationcornerstoneorder = 1::integer;
	else templocationcornerstoneorder = create_locationcornerstoneorder::integer;
end if;

If create_locationdeleted isNull
	then templocationdeleted = false;
	else templocationdeleted = create_locationdeleted;
end if;

If create_locationdraft isNull
	then templocationdraft = false;
	else templocationdraft = create_locationdraft;
end if;

-- setup the language type
if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = englishuuid;
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,templanguagetypeentityuuid);

if templanguagetypeid isNull
	then return;
end if;

--------------------------------------
-- Switch to create custag vs having it embedded here.  Parent is Location Category.
-- 2 checks, is the uuid a valid location category.

if create_locationtaguuid isNull
	then
		tempcustagentityuuid = (select custagentityuuid 
					from entity.crud_custag_read_min(create_locationownerentityuuid,null,null, null, true,null,null, null,englishuuid)
					where create_locationtag = custagtype);
	else
		tempcustagentityuuid = create_locationtaguuid;
end if;

if tempcustagentityuuid isNull and (create_locationtag notNull or coalesce(create_locationtag,'')<> '')
	then 
		call entity.crud_custag_create(
				templocationownerentityuuid, --create_custagownerentityuuid
				'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', --create_custagparententityuuid - This is location Category
				null,   --create_custagcornerstoneentityuuid
				null, --create_custagcornerstoneorder 
				create_locationtag,  -- create_custag
				englishuuid, -- templanguagetypeentityuuid  
				null,  -- 	create_custagexternalid text,
				null, -- create_custagexternalsystemuuid
				null, 
				null, 
				tempcustagid , -- OUT create_custagid
				tempcustaguuid , -- OUT create_custaguuid text,
				tempcustagentityuuid, -- OUT create_custagentityuuid uuid
				337::bigint);
	else
		select custagid, custagid 
		into tempcustagid, tempcustagid
		from entity.crud_custag_read_min(templocationownerentityuuid, null,tempcustagentityuuid , null, false,null,null, null,englishuuid);
end if;

-- Custag is now created for location type.  Time to insert into location

-- create_locationtimezone
if (create_locationtimezone notNull and coalesce(create_locationtimezone,'')<> '')
	then templocationtimezone = create_locationtimezone;
	else templocationtimezone = (select locationtimezone 
		from entity.crud_location_read_full(create_locationownerentityuuid,create_locationparententityuuid,null,null,false,null,null,null,null,englishuuid));
end if;

if templocationtimezone isNull 
	then templocationtimezone = 'UTC';
end if;

-- insert name into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		create_locationname,    
		create_modifiedbyid)
	Returning languagemasterid,languagemasteruuid into templanguagemasterid,templanguagemasteruuid;

-- insert displayname into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		case when create_locationdisplayname notnull or (coalesce(create_locationdisplayname, '') <> '')
			then create_locationdisplayname
			else create_locationname
		end,   
		create_modifiedbyid)
	Returning languagemasterid into tempdisplaylanguagemasterid;

-- locationtimezone

	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby,
		languagemasterstatus)
	values(tempcustomerid,
		templanguagetypeid, 	
		templocationtimezone,   
		create_modifiedbyid,
		'NEVER_TRANSLATE')
	Returning languagemasterid into temptzlanguagemasterid;

-- now let's create the location entity then the location itself

	INSERT INTO entity.entityinstance(
		entityinstanceownerentityuuid, 
		entityinstanceparententityuuid,
		entityinstancecornerstoneentityuuid,
		entityinstancecornerstoneorder,
		entityinstancescanid,
		entityinstanceentitytemplateentityuuid, 
		entityinstancetypeentityuuid, 
		entityinstancecreateddate, 
		entityinstancemodifieddate, 
		entityinstancestartdate, 
		entityinstanceenddate, 
		entityinstanceexternalid, 
		entityinstanceexternalsystementityuuid,
		entityinstancemodifiedbyuuid, 
		entityinstancerefid,
		entityinstancerefuuid,
		entityinstanceentitytemplatename,
		entityinstancetype,
		entityinstancedeleted,
		entityinstancedraft,
		entityinstancenameuuid
		)
	values( 
		create_locationownerentityuuid,
		create_locationparententityuuid,  -- insert the parent id sent in.  If it is null we need to fix it later with self.  
		create_locationcornerstoneentityuuid,	-- insert the cornerstone sent in.  If it is null we need to fix it later with self.
		templocationcornerstoneorder, 
		create_locationscanid,
		(select entitytemplateuuid from entity.entitytemplate where entitytemplatescanid = 'Location'),
		(select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatescanid = 'Location'),
		now(), 
		now(), 	
		now(), 
		null, 
		create_locationexternalid,
		create_locationexternalsystemuuid,
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid), 
		null, 
		null,
		'Location',
		create_locationname,
		templocationdeleted,
		templocationdraft,
		templanguagemasteruuid
		)
	Returning entityinstanceuuid into templocationentityuuid;	

	update entity.entityinstance
	set entityinstanceparententityuuid = templocationentityuuid
	where entityinstanceparententityuuid isNull
		and entityinstanceuuid = templocationentityuuid;

	update entity.entityinstance
	set entityinstancecornerstoneentityuuid = templocationentityuuid
	where entityinstancecornerstoneentityuuid isNull
		and entityinstanceuuid = templocationentityuuid;

	-- locationdisplayname

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagemasteruuid, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values( 
		templocationentityuuid,
		create_locationownerentityuuid,
		case when create_locationdisplayname notnull or (coalesce(create_locationdisplayname, '') <> '')
			then create_locationdisplayname
			else create_locationname
		end,
		(select languagemasteruuid from languagemaster where languagemasterid = tempdisplaylanguagemasterid),
		templanguagetypeentityuuid,
		now(),
		now(),		
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'locationdisplayname'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'locationdisplayname');
	
	-- locationtimezone

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagemasteruuid, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values( 
		templocationentityuuid,
		create_locationownerentityuuid,
		templocationtimezone,
		(select languagemasteruuid from languagemaster where languagemasterid = temptzlanguagemasterid),
		templanguagetypeentityuuid,
		now(),
		now(),		
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'locationtimezone'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'locationtimezone');
	
	-- locationlatitude
	
	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values( 
		templocationentityuuid,
		create_locationownerentityuuid,
		create_locationlatitude,
		now(),
		now(),		
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'locationlatitude'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'locationlatitude');		
	
	-- locationlongitude
	
	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values( 
		templocationentityuuid,
		create_locationownerentityuuid,
		create_locationlongitude,
		now(),
		now(),		
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'locationlongitude'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'locationlongitude');	
	
	-- locationradius
	
	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values( 
		templocationentityuuid,
		create_locationownerentityuuid,
		create_locationradius,
		now(),
		now(),		
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'locationradius'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'locationradius');

	--	locationcategoryid 
if tempcustagentityuuid notNull
	then
		INSERT INTO entity.entitytag(
			entitytagownerentityuuid, 
			entitytagentityinstanceentityuuid,
			entitytagentitytemplateentityuuid,
			entitytagcreateddate, 
			entitytagmodifieddate, 
			entitytagstartdate, 
			entitytagenddate, 
			entitytagmodifiedbyuuid,
			entitytagcustagentityuuid)
		values (
			create_locationownerentityuuid,
			templocationentityuuid,
			(select entitytemplateuuid from entity.entitytemplate where entitytemplatescanid = 'Location'),
			now(),
			now(),
			now(),
			null,
			(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
			tempcustagentityuuid
		);
end if;

-- now load the location table

	INSERT INTO public.location(
		locationcustomerid,
		locationsiteid,
		locationparentid,
		locationcornerstoneid,
		locationcornerstoneorder,
		locationiscornerstone,
		locationlookupname,
		locationscanid,
		locationistop,
		locationcategoryid,
		locationstartdate,
		locationnameid,
		locationtimezone,
		locationexternalid,
		locationexternalsystemid,			
		locationmodifiedby)
	values(	
		tempcustomerid,
		(select locationid from entity.crud_location_read_min(create_locationownerentityuuid ,create_locationparententityuuid ,null,null,false,null,null,null,null,englishuuid)),
		(select locationid from entity.crud_location_read_min(create_locationownerentityuuid ,create_locationparententityuuid ,null,null,false,null,null,null,null,englishuuid)),
		(select locationid from entity.crud_location_read_min(create_locationownerentityuuid ,create_locationcornerstoneentityuuid ,null,null,false,null,null,null,null,englishuuid)),
		templocationcornerstoneorder,
		false,  
		create_locationname,
		create_locationscanid,			
		false,  
		tempcustagid,
		clock_timestamp(),  
		templanguagemasterid,
		templocationtimezone,   -- https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
		create_locationexternalid,	
		(select systagid from entity.crud_systag_read_min(create_locationownerentityuuid, null,create_locationexternalsystemuuid, null, false,null,null, null,englishuuid)),
		create_modifiedbyid)
	returning locationid,locationuuid into  templocationid, templocationuuid;

	update public.location
	set locationsiteid = locationid,
		locationistop = true
	where locationsiteid isNull
		and locationid = templocationid;

	update public.location
	set locationparentid = locationid
	where locationparentid isNull
		and locationid = templocationid;

	update public.location
	set locationcornerstoneid = locationid,
		locationiscornerstone = true
	where locationcornerstoneid isNull
		and locationid = templocationid;

	update entity.entityinstance
	set entityinstanceoriginalid = templocationid,
		entityinstanceoriginaluuid = templocationuuid
	where entityinstanceuuid = templocationentityuuid;

create_locationentityuuid = templocationentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_location_create(uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_location_create(uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_location_create(uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_location_create(uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_location_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_location_delete(IN create_locationownerentityuuid uuid, IN create_locationentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

FUTURE:  Just have this call entity.crud_entityinstance_delete(create_entityinstanceownerentityuuid, create_entityinstanceentityuuid, create_modifiedbyid)

-- tests needed
	-- no owner isNull
		call entity.crud_location_delete(
			null, -- IN create_locationownerentityuuid uuid,
			'47fa1d8d-eba5-40b8-8caa-13d5d59fd636', -- IN create_locationentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_location_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_locationownerentityuuid uuid,
			null, -- IN create_locationentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_location_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_locationownerentityuuid uuid,
			'3c04bedf-bcd8-40de-ae35-3a650146f7d7', -- IN create_locationentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_location_delete(
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_locationownerentityuuid uuid,
			'47fa1d8d-eba5-40b8-8caa-13d5d59fd636', -- IN create_locationentityuuid uuid,	
			337)



	-- reset the location
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = '47fa1d8d-eba5-40b8-8caa-13d5d59fd636'

-- use this to find fields to work with
select * 
from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
where locationownerentityuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'

-- how to check if the update was successful
select * from entity.entityinstance where entityinstancedeleted = true

*/

-- check for owner 

if create_locationownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for field

if create_locationentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the field record to deleted

update entity.entityinstance
set entityinstancedeleted = true,
	entityinstancemodifieddate = now(),
	entityinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entityinstanceownerentityuuid = create_locationownerentityuuid
	and entityinstanceuuid = create_locationentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_location_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_location_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_location_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_location_delete(uuid,uuid,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_location_update(uuid,uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,timestamp with time zone,timestamp with time zone,boolean,boolean,text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_location_update(IN update_locationentityuuid uuid, IN update_locationownerentityuuid uuid, IN update_locationparententityuuid uuid, IN update_locationcornerstoneentityuuid uuid, IN update_locationcornerstoneorder integer, IN update_locationtaguuid uuid, IN update_locationtag text, IN update_locationname text, IN update_locationdisplayname text, IN update_locationscanid text, IN update_locationtimezone text, IN update_languagetypeuuid uuid, IN update_locationexternalid text, IN update_locationexternalsystemuuid uuid, IN update_locationlatitude text, IN update_locationlongitude text, IN update_locationradius text, IN update_locationstartdate timestamp with time zone, IN update_locationenddate timestamp with time zone, IN update_locationdeleted boolean, IN update_locationdraft boolean, IN update_modifiedby text)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templocationid bigint;
Begin

/*
-- tests 

*/

if update_languagetypeuuid isNull 
	then update_languagetypeuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
End if;

templocationid =  (select entityinstanceoriginalid from entity.entityinstance where entityinstanceuuid = update_locationentityuuid);

-- simpify this.   update the draft values in the if statement.  The update all the common fields.  

if update_locationdraft = true or ((select entityinstancedraft 
										from entity.entityinstance
										WHERE entityinstanceuuid = update_locationentityuuid ) = true)
	then -- let everything change
		UPDATE entity.entityinstance
			SET entityinstanceownerentityuuid = case when update_locationownerentityuuid notnull 
												then update_locationownerentityuuid
												else entityinstanceownerentityuuid end,
 				entityinstancedeleted = case when update_locationdeleted notnull 
										then update_locationdeleted
										else entityinstancedeleted end, 
				entityinstancedraft = case when update_locationdraft notnull 
										then update_locationdraft
										else entityinstancedraft end
		WHERE entityinstanceuuid = update_locationentityuuid;

		update public.location
			set locationcustomerid = case when update_locationownerentityuuid notnull 
											then (select locationcustomerid from entity.crud_location_read_min(update_locationownerentityuuid ,update_locationparententityuuid ,null,null,false,null,null,null,null,update_languagetypeuuid))
											else locationcustomerid end
		where locationid =  templocationid;
end if;

-- update common fields between draft and published
UPDATE entity.entityinstance
	SET entityinstanceparententityuuid = case when update_locationparententityuuid notnull 
										then update_locationparententityuuid
										else entityinstanceparententityuuid end,
		entityinstancetype = case when update_locationname notnull and (coalesce(update_locationname,'') <> '')
										then update_locationname
										else entityinstancetype end,
		entityinstanceexternalid = case when update_locationexternalid notnull 
										then update_locationexternalid
										else entityinstanceexternalid end,	
		entityinstanceexternalsystementityuuid = case when update_locationexternalsystemuuid notnull 
												then update_locationexternalsystemuuid
												else entityinstanceexternalsystementityuuid end,
		entityinstancecornerstoneentityuuid = case when update_locationcornerstoneentityuuid notnull 
												then update_locationcornerstoneentityuuid
												else entityinstancecornerstoneentityuuid end,
		entityinstancecornerstoneorder = case when update_locationcornerstoneorder notnull 
										then update_locationcornerstoneorder
										else entityinstancecornerstoneorder end,
		entityinstancescanid = case when update_locationscanid notnull 
										then update_locationscanid
										else entityinstancescanid end, 
		entityinstancedeleted = case when update_locationdeleted notnull 
								then update_locationdeleted
								else entityinstancedeleted end, 
		entityinstancestartdate = case when update_locationstartdate notnull 
								then update_locationstartdate
								else entityinstancestartdate end,
		entityinstanceenddate = update_locationenddate,
		entityinstancemodifieddate =now(),
		entityinstancemodifiedbyuuid = update_modifiedby
WHERE entityinstanceuuid = update_locationentityuuid;

update public.location
	set locationsiteid = case when update_locationparententityuuid notnull 
										then (select locationid from entity.crud_location_read_min(update_locationownerentityuuid ,update_locationparententityuuid ,null,null,false,null,null,null,null,update_languagetypeuuid))
										else locationsiteid end,
		locationparentid = case when update_locationparententityuuid notnull 
										then (select locationid from entity.crud_location_read_min(update_locationownerentityuuid ,update_locationparententityuuid ,null,null,false,null,null,null,null,update_languagetypeuuid))
										else locationparentid end,
		locationcornerstoneid = case when update_locationparententityuuid notnull 
										then (select locationid from entity.crud_location_read_min(update_locationownerentityuuid ,update_locationcornerstoneentityuuid ,null,null,false,null,null,null,null,update_languagetypeuuid))
										else locationcornerstoneid end,
		locationcornerstoneorder = case when update_locationcornerstoneorder notnull 
										then update_locationcornerstoneorder
										else locationcornerstoneorder end,
		locationlookupname = case when update_locationname notnull and (coalesce(update_locationname,'') <> '')
										then update_locationname
										else locationlookupname end, 
		locationscanid = case when update_locationscanid notnull 
										then update_locationscanid
										else locationscanid end, 
		locationstartdate = case when update_locationstartdate notnull 
								then update_locationstartdate
								else locationstartdate end,
		locationenddate = update_locationenddate,
		locationmodifieddate = now(),
		locationexternalid = case when update_locationexternalid notnull 
										then update_locationexternalid
										else locationexternalid end,	
		locationexternalsystemid = case when update_locationexternalsystemuuid notnull 
												then (select systagid from entity.crud_systag_read_min(update_locationownerentityuuid, null,update_locationexternalsystemuuid, null, false,null,null, null,update_languagetypeuuid))
												else locationexternalsystemid end,			
		locationmodifiedby =  (select workerinstanceid from workerinstance where workerinstanceuuid = update_modifiedby)
where locationid =  templocationid;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_locationentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);

		-- update the languagemaster if the name changed
if  update_locationname notNull and (coalesce(update_locationname,'') <> '')
	then
		update languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_locationname,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_modifiedby),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'		
			from entity.entityinstance
			where entityinstanceuuid = update_locationentityuuid
				and languagemasteruuid = entityinstancenameuuid
				and languagemastersource <> update_locationname;
end if;

	-- update displayname in languagemaster
if  update_locationdisplayname notNull and (coalesce(update_locationdisplayname,'') <> '')
	then
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_locationdisplayname,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_modifiedby),
				languagemastermodifieddate = now(),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'					
		where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
									from entity.entityfieldinstance
									where entityfieldinstanceentityinstanceentityuuid = update_locationentityuuid
										and  entityfieldinstanceentityfieldentityuuid = '7bba0fd0-19f4-4984-b8e2-431a5f6c70d0');

		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_locationdisplayname,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_modifiedby
		where entityfieldinstanceentityinstanceentityuuid = update_locationentityuuid
				and  entityfieldinstanceentityfieldentityuuid = '7bba0fd0-19f4-4984-b8e2-431a5f6c70d0';
end if;

	-- update locationtimezone
if  update_locationtimezone notNull and (coalesce(update_locationtimezone,'') <> '')
	then		
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_locationtimezone,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_modifiedby),
				languagemastermodifieddate = now()				
		where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
									from entity.entityfieldinstance
									where entityfieldinstanceentityinstanceentityuuid = update_locationentityuuid
										and  entityfieldinstanceentityfieldentityuuid = '2a69677c-b23a-4407-b2ae-1905f0640579');

		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_locationtimezone,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_modifiedby
		where entityfieldinstanceentityinstanceentityuuid = update_locationentityuuid
				and  entityfieldinstanceentityfieldentityuuid = '2a69677c-b23a-4407-b2ae-1905f0640579';
end if;

	-- update locationlatitude
if  update_locationlatitude notNull 
	then		
		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_locationlatitude,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_modifiedby
		where entityfieldinstanceentityinstanceentityuuid = update_locationentityuuid
				and  entityfieldinstanceentityfieldentityuuid = 'db4dfca7-2a2c-45d1-a4ec-f749c48d5ddf';
end if;

	-- update locationlongitude
if  update_locationlongitude notNull 
	then		
		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_locationlongitude,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_modifiedby
		where entityfieldinstanceentityinstanceentityuuid = update_locationentityuuid
				and  entityfieldinstanceentityfieldentityuuid = '37e49e9e-9700-432f-a384-2e68f2279b50';
end if;

	-- update locationradius
if  update_locationradius notNull 
	then		
		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_locationradius,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_modifiedby
		where entityfieldinstanceentityinstanceentityuuid = update_locationentityuuid
				and  entityfieldinstanceentityfieldentityuuid = '421b26da-1529-4951-a0ef-9dfb0d18e413';
end if;

-- set the location indicators
update public.location
set locationistop = true
where locationsiteid = locationid
	and locationistop = false
	and locationid = templocationid;

update public.location
set locationiscornerstone = true
where locationcornerstoneid = locationid
	and locationiscornerstone = false
	and locationid = templocationid;

update public.location
set locationistop = false
where locationsiteid <> locationid
	and locationistop = true
	and locationid = templocationid;

update public.location
set locationiscornerstone = false
where locationcornerstoneid <> locationid
	and locationiscornerstone = true
	and locationid = templocationid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_location_update(uuid,uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,timestamp with time zone,timestamp with time zone,boolean,boolean,text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_location_update(uuid,uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,timestamp with time zone,timestamp with time zone,boolean,boolean,text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_location_update(uuid,uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,timestamp with time zone,timestamp with time zone,boolean,boolean,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_location_update(uuid,uuid,uuid,uuid,integer,uuid,text,text,text,text,text,uuid,text,uuid,text,text,text,timestamp with time zone,timestamp with time zone,boolean,boolean,text) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_systag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_systag_create(IN create_systagownerentityuuid uuid, IN create_systagparententityuuid uuid, IN create_systagcornerstoneentityuuid uuid, IN create_systagcornerstoneorder integer, IN create_systag text, IN create_languagetypeuuid uuid, IN create_systagexternalid text, IN create_systagexternalsystemuuid uuid, IN create_systagdeleted boolean, IN create_systagdraft boolean, OUT create_systagid bigint, OUT create_systaguuid text, OUT create_systagentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
 	templanguagemasterid bigint;
	templanguagemasteruuid text;
	tempdisplaylanguagemasterid bigint;
	tempdisplaylanguagemasteruuid text;
	tempcustomerid bigint;
	tempcustomeruuid text;
	tempsystagentityuuid uuid;
	tempsystagid bigint;
	tempsystaguuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
	templanguagetypeentityuuid uuid;
	tempsystagcornerstoneorder integer;  -- cornerstone as well?
	tempsystagparententityuuid uuid;
	tempsystagownerentityuuid uuid;	
	tempsystagdeleted boolean;
	tempsystagdraft boolean;

Begin

/*
-- Customer for testing -- '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0'
-- tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
-- use this to find fields to work with
	select systagtype, * 
	from entity.crud_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '30f65cf5-97a0-4e3d-a518-056521bf4f3d', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')

-- tests 
	-- If systag isNull then it should do nothing
		call entity.crud_systag_create(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', --create_systagownerentityuuid
			'30f65cf5-97a0-4e3d-a518-056521bf4f3d', --create_systagparententityuuid
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			null,  -- create_systag
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null, 
			null, 
			null, -- OUT create_systagid
			null, -- OUT create_systaguuid text,
			null, -- OUT create_systagentityuuid uuid
			337::bigint)

	-- add test.  If systag is a duplicate then return an error
		-- entity 277e5a92-04f6-4f53-abff-ed798c32658b = 'Ship'
		call entity.crud_systag_create(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', --create_systagownerentityuuid
			'30f65cf5-97a0-4e3d-a518-056521bf4f3d', --create_systagparententityuuid
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			'Microsoft',  -- create_systag
			'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null, 
			null, 
			null, -- OUT create_systagid
			null, -- OUT create_systaguuid text,
			null, -- OUT create_systagentityuuid uuid
			337::bigint)

	-- systag to a systag 	
			-- Do we allow for cystags and systags to be at the same level?
			-- Curent systags with systags

	call entity.crud_systag_create(
		'f90d618d-5de7-4126-8c65-0afb700c6c61', --create_systagownerentityuuid
		'30f65cf5-97a0-4e3d-a518-056521bf4f3d', --create_systagparententityuuid
		null,   --create_systagcornerstoneentityuuid
		null, --create_systagcornerstoneorder 
		'systag'||now(),  -- create_systag
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
		null,  -- 	create_systagexternalid text,
		null, -- create_systagexternalsystemuuid
		null,
		null,
		null, -- OUT create_systagid
		null, -- OUT create_systaguuid text,
		null, -- OUT create_systagentityuuid uuid
		337::bigint)

	-- systag that is the start of a tree 
			-- To start will assume there is always a parent.  Will use the generic one.  

	call entity.crud_systag_create(
		'c', --create_systagownerentityuuid
		null,	--create_systagparententityuuid
		null,   --create_systagcornerstoneentityuuid
		null, --create_systagcornerstoneorder 
		'parentsystag'||now(),  -- create_systag
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
		null,  -- 	create_systagexternalid text,
		null, -- create_systagexternalsystemuuid
		null,
		null,
		null, -- OUT create_systagid
		null, -- OUT create_systaguuid text,
		null, -- OUT create_systagentityuuid uuid
		337::bigint)
		
	-- systag of a systag

	call entity.crud_systag_create(
		'f90d618d-5de7-4126-8c65-0afb700c6c61', --create_systagownerentityuuid
		???,	--create_systagparententityuuid  -- use the rertun from the previous test.  
		null,   --create_systagcornerstoneentityuuid
		null, --create_systagcornerstoneorder 
		'subsystag'||now(),  -- create_systag
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
		null,  -- 	create_systagexternalid text,
		null, -- create_systagexternalsystemuuid
		null,
		null,
		null, -- OUT create_systagid
		null, -- OUT create_systaguuid text,
		null, -- OUT create_systagentityuuid uuid
		337::bigint)

	-- systag with cornerstone

	call entity.crud_systag_create(
		'f90d618d-5de7-4126-8c65-0afb700c6c61', --create_systagownerentityuuid
		????,	--create_systagparententityuuid  -- use the return from generic test.  
		????,   --create_systagcornerstoneentityuuid  -- use the previous test.  
		2::integer, --create_systagcornerstoneorder 
		'subsystag'||now(),  -- create_systag
		'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', -- create_languagetypeuuid  
		null,  -- 	create_systagexternalid text,
		null, -- create_systagexternalsystemuuid
		null,
		null,
		null, -- OUT create_systagid
		null, -- OUT create_systaguuid text,
		null, -- OUT create_systagentityuuid uuid
		337::bigint)
	
	-- New location existing parent new location tag

-- maybe a seperate SP for key systag types that exist today that the system needs.    

*/

-- setup customer info
if create_systagownerentityuuid isNull
	then return;
	else tempsystagownerentityuuid = create_systagownerentityuuid;
end if;

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,tempsystagownerentityuuid,null,false,null,null,null, null);

-- probably return an error if the entity is not set to a customer.  Need to sort this out.  
if tempcustomerid isNull
	then  return;
end if;

-- systags need a name
if (create_systag isNull or coalesce(create_systag,'')= '')
	then return;  -- need error code
end if;

-- setup the language type
if create_languagetypeuuid isNull
	then templanguagetypeentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	else templanguagetypeentityuuid = create_languagetypeuuid;
end if;

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, templanguagetypeentityuuid, null, false,null,null, null,templanguagetypeentityuuid);

if templanguagetypeid isNull
	then return;
end if;

-- setup parent

if create_systagparententityuuid isNull
	then -- set parent to the generic systag
		tempsystagparententityuuid = '86be74b7-40df-4c20-9467-d35fae610c52'::uuid;  -- this is the top most of the tag tree.
	else tempsystagparententityuuid = create_systagparententityuuid;
end if;

-- if systag already exists for the parent then return an error
if create_systag = any(	select systagtype 
		from entity.crud_systag_read_min(tempsystagownerentityuuid ,null,null, tempsystagparententityuuid, false,null,null, null,templanguagetypeentityuuid))
	then return; 
end if;	

-- setup systag order

if create_systagcornerstoneorder isNull
	then tempsystagcornerstoneorder = 1::integer;
	else tempsystagcornerstoneorder = create_systagcornerstoneorder::integer;
end if;

If create_systagdeleted isNull
	then tempsystagdeleted = false;
	else tempsystagdeleted = create_systagdeleted;
end if;

If create_systagdraft isNull
	then tempsystagdraft = false;
	else tempsystagdraft = create_systagdraft;
end if;

-- add the entity systag first then into the systag table

-- insert name into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		create_systag,
		create_modifiedbyid)
	Returning languagemasterid,languagemasteruuid into templanguagemasterid,templanguagemasteruuid;

-- insert displayname into languagemaster
	insert into public.languagemaster
		(languagemastercustomerid,
		languagemastersourcelanguagetypeid,
		languagemastersource,
		languagemastermodifiedby)
	values(tempcustomerid,
		templanguagetypeid, 	
		create_systag,
		create_modifiedbyid)
	Returning languagemasterid,languagemasteruuid into tempdisplaylanguagemasterid,tempdisplaylanguagemasteruuid;

-- insert systag
-- insert into the entity table first

	INSERT INTO entity.entityinstance(
		entityinstanceownerentityuuid, 
		entityinstanceparententityuuid,	
		entityinstanceentitytemplateentityuuid, 
		entityinstancetypeentityuuid, 
		entityinstancecreateddate, 
		entityinstancemodifieddate, 
		entityinstancestartdate, 
		entityinstanceenddate, 
		entityinstanceexternalid, 
		entityinstanceexternalsystemuuid,
		entityinstanceexternalsystementityuuid,
		entityinstancemodifiedbyuuid, 
		entityinstancerefid,
		entityinstancerefuuid,
		entityinstancecornerstoneentityuuid,
		entityinstancecornerstoneorder,
		entityinstanceentitytemplatename,
		entityinstancetype,
		entityinstancenameuuid,
		entityinstancedeleted, 
		entityinstancedraft	
		)
	values(  
		create_systagownerentityuuid,
		tempsystagparententityuuid,  
		(select entitytemplateuuid from entity.entitytemplate where entitytemplatescanid = 'System Tag'),
		(select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatescanid = 'System Tag'),
		now(),
		now(), 
		now(), 
		null, 
		create_systagexternalid,
		null,
		create_systagexternalsystemuuid,
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		null, 
		null,	
		create_systagcornerstoneentityuuid,
		tempsystagcornerstoneorder,
		'System Tag',
		create_systag,
		templanguagemasteruuid,
		tempsystagdeleted,
		tempsystagdraft)
	Returning entityinstanceuuid into tempsystagentityuuid;		
	
	-- cornerstone to self it they are null
	
	update entity.entityinstance
	set entityinstancecornerstoneentityuuid = entityinstanceuuid
	where entityinstanceentitytemplatename in ('System Tag')  
		and entityinstancecornerstoneentityuuid isNull
		and entityinstanceuuid = tempsystagentityuuid;

	-- systagdisplayname

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagemasteruuid, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values
		(tempsystagentityuuid,
		create_systagownerentityuuid,	
		create_systag,
		tempdisplaylanguagemasteruuid,
		create_languagetypeuuid,
		now(),
		now(),
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'systagdisplayname'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'systagdisplayname');
	
	-- systagabbreviationentityuuid
	
	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	values
		(tempsystagentityuuid,
		create_systagownerentityuuid,	
		null,
		now(),
		now(),
		(select entityfielduuid
			from entity.entityfield
			where entityfieldname = 'systagabbreviationentityuuid'),
		(select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid),
		'systagabbreviationentityuuid');

	-- insert into regular systag table

	INSERT INTO public.systag(
			systagcustomerid, 
			systagparentid, 
			systagnameid, 
			systagtype,
			systagstartdate,
			systagmodifiedby
			)
	values (tempcustomerid,

			(select entityinstanceoriginalid from entity.entityinstance where entityinstanceuuid = tempsystagparententityuuid),
			templanguagemasterid,
			create_systag,
			now(),
			create_modifiedbyid)
			Returning systaguuid, systagid into tempsystaguuid,tempsystagid;

	update entity.entityinstance
	set entityinstanceoriginalid = tempsystagid,
		entityinstanceoriginaluuid = tempsystaguuid
	where entityinstanceuuid = tempsystagentityuuid;

create_systagid = tempsystagid;
create_systaguuid = tempsystaguuid;
create_systagentityuuid = tempsystagentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_systag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_create(uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_systag_delete(uuid,uuid,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_systag_delete(IN create_systagownerentityuuid uuid, IN create_systagentityuuid uuid, IN create_modifiedbyid bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare
	
Begin

/*

-- tests needed
	-- no owner isNull
		call entity.crud_systag_delete(
			null, -- IN create_systagownerentityuuid uuid,
			'e1ef97cc-6d08-4855-9d57-834ed3c6e467', -- IN create_systagentityuuid uuid,	
			337)

	-- no field entity isNull
		call entity.crud_systag_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_systagownerentityuuid uuid,
			null, -- IN create_systagentityuuid uuid,	
			337)

	-- owner and field combo do not exist
		call entity.crud_systag_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_systagownerentityuuid uuid,
			'70f200bd-1c92-481d-9f5c-e6cf6cd92cd0', -- IN create_systagentityuuid uuid,	
			337)		
			
	-- valid owner and field
		call entity.crud_systag_delete(
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_systagownerentityuuid uuid,
			'e1ef97cc-6d08-4855-9d57-834ed3c6e467', -- IN create_systagentityuuid uuid,	
			337)
			
	-- reset the cutag
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = 'e1ef97cc-6d08-4855-9d57-834ed3c6e467'

-- use this to find fields to work with
select * from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')
order by systagid

-- how to check if the update was successful
select * from entity.entityinstance where entityinstancedeleted = true

*/

-- check for owner 

if create_systagownerentityuuid  isNull
	then 
		return;   -- need an error code here
end if;

-- check for field

if create_systagentityuuid isNull
	then return;   -- need an error code here
end if;

-- update the field record to deleted

update entity.entityinstance
set entityinstancedeleted = true,
	entityinstancemodifieddate = now(),
	entityinstanceenddate = now(),
	entityinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedbyid)
where entityinstanceownerentityuuid = create_systagownerentityuuid
	and entityinstanceuuid = create_systagentityuuid;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_systag_delete(uuid,uuid,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_delete(uuid,uuid,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_delete(uuid,uuid,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_delete(uuid,uuid,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_systag_update(IN update_systagentityuuid uuid, IN update_systagownerentityuuid uuid, IN update_systagparententityuuid uuid, IN update_systagcornerstoneentityuuid uuid, IN update_systagcornerstoneorder integer, IN update_systag text, IN update_languagetypeuuid uuid, IN update_systagexternalid text, IN update_systagexternalsystemuuid uuid, IN update_systagdeleted boolean, IN update_systagdraft boolean, IN update_systagstartdate timestamp with time zone, IN update_systagenddate timestamp with time zone, IN update_systagmodifiedbyuuid text)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
Begin

/*
Needs tests
	
*/

if update_languagetypeuuid isNull 
	then update_languagetypeuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
End if;

 if update_systagdraft = true or ((select entityinstancedraft 
										from entity.entityinstance
										WHERE entityinstanceuuid = update_systagentityuuid ) = true)
	then -- let everything change
		UPDATE entity.entityinstance
			SET entityinstanceownerentityuuid = case when update_systagownerentityuuid notnull 
												then update_systagownerentityuuid
												else entityinstanceownerentityuuid end,	
				entityinstanceparententityuuid = case when update_systagparententityuuid notnull 
												then update_systagparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancecornerstoneorder = case when update_systagcornerstoneorder notnull 
												then update_systagcornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancetype = case when update_systag notnull and (coalesce(update_systag,'') <> '')
												then update_systag
												else entityinstancetype end,
				entityinstanceexternalid = case when update_systagexternalid notnull 
												then update_systagexternalid
												else entityinstanceexternalid end,												
				entityinstanceexternalsystementityuuid = case when update_systagexternalsystemuuid notnull 
														then update_systagexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancedeleted = case when update_systagdeleted notnull 
										then update_systagdeleted
										else entityinstancedeleted end, 
				entityinstancedraft = case when update_systagdraft notnull 
										then update_systagdraft
										else entityinstancedraft end,
				entityinstancestartdate = case when update_systagstartdate notnull 
										then update_systagstartdate
										else entityinstancestartdate end,
				entityinstanceenddate = case 	when update_systagdeleted = true 
									and entityinstanceenddate isNull
									and update_systagenddate isNull then now()
								when update_systagdeleted = true 
									and entityinstanceenddate isNull
									and update_systagenddate notNull then update_systagenddate 
								when update_systagdeleted = true 
									and entityinstanceenddate notNull
									and update_systagenddate isNull then entityinstanceenddate
								when update_systagdeleted = true and entityinstanceenddate notNull
									and update_systagenddate notNull and update_systagenddate <> entityinstanceenddate
									then update_systagenddate	
								else null
							end,						
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_systagmodifiedbyuuid
		WHERE entityinstanceuuid = update_systagentityuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entityinstance
			SET entityinstanceparententityuuid = case when update_systagparententityuuid notnull 
												then update_systagparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancecornerstoneorder = case when update_systagcornerstoneorder notnull 
												then update_systagcornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancetype = case when update_systag notnull and (coalesce(update_systag,'') <> '')
												then update_systag
												else entityinstancetype end,
				entityinstanceexternalid = case when update_systagexternalid notnull 
												then update_systagexternalid
												else entityinstanceexternalid end,												
				entityinstanceexternalsystementityuuid = case when update_systagexternalsystemuuid notnull 
														then update_systagexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancestartdate = case when update_systagstartdate notnull 
										then update_systagstartdate
										else entityinstancestartdate end,
				entityinstancedeleted = case when update_systagdeleted notnull 
										then update_systagdeleted
										else entityinstancedeleted end, 
				entityinstanceenddate = case 	when update_systagdeleted = true 
									and entityinstanceenddate isNull
									and update_systagenddate isNull then now()
								when update_systagdeleted = true 
									and entityinstanceenddate isNull
									and update_systagenddate notNull then update_systagenddate 
								when update_systagdeleted = true 
									and entityinstanceenddate notNull
									and update_systagenddate isNull then entityinstanceenddate
								when update_systagdeleted = true and entityinstanceenddate notNull
									and update_systagenddate notNull and update_systagenddate <> entityinstanceenddate
									then update_systagenddate	
								else null
							end,
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_systagmodifiedbyuuid
		WHERE entityinstanceuuid = update_systagentityuuid;
end if;

update_systagownerentityuuid = (select owner from api.entity_instance where id = update_systagentityuuid);

-- update the language master

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_systagownerentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);

if update_systag notnull and (coalesce(update_systag,'') <> '')
	then
	-- update name in languagemaster
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_systag,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_systagmodifiedbyuuid),
				languagemastermodifieddate = now()
		where languagemasteruuid = (select entityinstancenameuuid from entity.entityinstance WHERE entityinstanceuuid = update_systagentityuuid);
	
	-- update displayname in languagemaster
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_systag,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_systagmodifiedbyuuid),
				languagemastermodifieddate = now()
		where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
									from entity.entityfieldinstance
									where entityfieldinstanceentityinstanceentityuuid = update_systagentityuuid
										and  entityfieldinstanceentityfieldentityuuid = '1b29e7b0-0800-4366-b79e-424dd9bafa71');
end if;

-- update systag

update public.systag
		set systagtype = case when update_systag notnull and (coalesce(update_systag,'') <> '')
								then update_systag
								else systagtype end,
			systagstartdate = case when update_systagstartdate notnull 
									then update_systagstartdate
									else systagstartdate end,
			systagenddate  = update_systagenddate, 
			systagmodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_systagmodifiedbyuuid)
where systagid = (select systagid from entity.crud_systag_read_min(update_systagownerentityuuid, 
							null, update_systagentityuuid, null, false,null,null, null,update_languagetypeuuid));

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO graphql;

-- Type: PROCEDURE ; Name: entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.crud_systag_update(IN update_systagentityuuid uuid, IN update_systagownerentityuuid uuid, IN update_systagparententityuuid uuid, IN update_systagcornerstoneentityuuid uuid, IN update_systagcornerstoneorder integer, IN update_systag text, IN update_systag_name text, IN update_systag_displayname text, IN update_languagetypeuuid uuid, IN update_systagexternalid text, IN update_systagexternalsystemuuid uuid, IN update_systagdeleted boolean, IN update_systagdraft boolean, IN update_systagstartdate timestamp with time zone, IN update_systagenddate timestamp with time zone, IN update_systagmodifiedbyuuid text)
 LANGUAGE plpgsql
AS $procedure$
Declare
	tempcustomerid bigint;
	tempcustomeruuid text;
	templanguagetypeid bigint;
	templanguagetypeuuid text;
Begin

/*
Needs tests
	
*/

if update_languagetypeuuid isNull 
	then update_languagetypeuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
End if;

 if update_systagdraft = true or ((select entityinstancedraft 
										from entity.entityinstance
										WHERE entityinstanceuuid = update_systagentityuuid ) = true)
	then -- let everything change
		UPDATE entity.entityinstance
			SET entityinstanceownerentityuuid = case when update_systagownerentityuuid notnull 
												then update_systagownerentityuuid
												else entityinstanceownerentityuuid end,	
				entityinstanceparententityuuid = case when update_systagparententityuuid notnull 
												then update_systagparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancecornerstoneorder = case when update_systagcornerstoneorder notnull 
												then update_systagcornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancetype = case when update_systag notnull and (coalesce(update_systag,'') <> '')
												then update_systag
												else entityinstancetype end,
				entityinstanceexternalid = update_systagexternalid,												
				entityinstanceexternalsystementityuuid = case when update_systagexternalsystemuuid notnull 
														then update_systagexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancedeleted = case when update_systagdeleted notnull 
										then update_systagdeleted
										else entityinstancedeleted end, 
				entityinstancedraft = case when update_systagdraft notnull 
										then update_systagdraft
										else entityinstancedraft end,
				entityinstancestartdate = case when update_systagstartdate notnull 
										then update_systagstartdate
										else entityinstancestartdate end,
				entityinstanceenddate = case 	when update_systagdeleted = true 
									and entityinstanceenddate isNull
									and update_systagenddate isNull then now()
								when update_systagdeleted = true 
									and entityinstanceenddate isNull
									and update_systagenddate notNull then update_systagenddate 
								when update_systagdeleted = true 
									and entityinstanceenddate notNull
									and update_systagenddate isNull then entityinstanceenddate
								when update_systagdeleted = true and entityinstanceenddate notNull
									and update_systagenddate notNull and update_systagenddate <> entityinstanceenddate
									then update_systagenddate	
								else null
							end,						
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_systagmodifiedbyuuid
		WHERE entityinstanceuuid = update_systagentityuuid;
	Else -- trim the update to fields allowed to change
		UPDATE entity.entityinstance
			SET entityinstanceparententityuuid = case when update_systagparententityuuid notnull 
												then update_systagparententityuuid
												else entityinstanceparententityuuid end,
				entityinstancecornerstoneorder = case when update_systagcornerstoneorder notnull 
												then update_systagcornerstoneorder
												else entityinstancecornerstoneorder end, 
				entityinstancetype = case when update_systag notnull and (coalesce(update_systag,'') <> '')
												then update_systag
												else entityinstancetype end,
				entityinstanceexternalid = update_systagexternalid,												
				entityinstanceexternalsystementityuuid = case when update_systagexternalsystemuuid notnull 
														then update_systagexternalsystemuuid
														else entityinstanceexternalsystementityuuid end,
				entityinstancestartdate = case when update_systagstartdate notnull 
										then update_systagstartdate
										else entityinstancestartdate end,
				entityinstancedeleted = case when update_systagdeleted notnull 
										then update_systagdeleted
										else entityinstancedeleted end, 
				entityinstanceenddate = case 	when update_systagdeleted = true 
									and entityinstanceenddate isNull
									and update_systagenddate isNull then now()
								when update_systagdeleted = true 
									and entityinstanceenddate isNull
									and update_systagenddate notNull then update_systagenddate 
								when update_systagdeleted = true 
									and entityinstanceenddate notNull
									and update_systagenddate isNull then entityinstanceenddate
								when update_systagdeleted = true and entityinstanceenddate notNull
									and update_systagenddate notNull and update_systagenddate <> entityinstanceenddate
									then update_systagenddate	
								else null
							end,
				entityinstancemodifieddate=now(),
				entityinstancemodifiedbyuuid = update_systagmodifiedbyuuid
		WHERE entityinstanceuuid = update_systagentityuuid;
end if;

update_systagownerentityuuid = (select owner from api.entity_instance where id = update_systagentityuuid);

-- update the language master

select customerid, customeruuid into tempcustomerid,tempcustomeruuid
	from entity.crud_customer_read_min(null,update_systagownerentityuuid,null,false,null,null,null, null);

select systagid,systaguuid into templanguagetypeid,templanguagetypeuuid
	from entity.crud_systag_read_min(null, null, update_languagetypeuuid, null, false,null,null, null,update_languagetypeuuid);

if update_systag_displayname notnull and (coalesce(update_systag_displayname,'') <> '')
	then

	-- update name in languagetranslations (Temp until the retranslate runs)	
		update public.languagetranslations
			set languagetranslationvalue = update_systag_displayname
		from entity.entityinstance
		where languagetranslationmasterid = (select languagemasterid 
												from languagemaster 
												where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
																			from entity.entityfieldinstance
																			where entityfieldinstanceentityinstanceentityuuid = update_systagentityuuid
																				and  entityfieldinstanceentityfieldentityuuid = 'cf94ce9c-edd3-4c7b-8128-ab598fc9710a'))
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_systag_displayname;
	
	-- update displayname in languagemaster
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_systag_displayname,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_systagmodifiedbyuuid),
				languagemastermodifieddate = now(),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'	
		where languagemasteruuid = (select entityfieldinstancevaluelanguagemasteruuid 
									from entity.entityfieldinstance
									where entityfieldinstanceentityinstanceentityuuid = update_systagentityuuid
										and  entityfieldinstanceentityfieldentityuuid = 'cf94ce9c-edd3-4c7b-8128-ab598fc9710a')
				and languagemastersource <> update_systag_displayname;

	-- update the field instance

		update entity.entityfieldinstance
			set entityfieldinstancevalue = update_systag_displayname,
				entityfieldinstancevaluelanguagetypeentityuuid = update_languagetypeuuid,
				entityfieldinstancemodifieddate = now(),
				entityfieldinstancemodifiedbyuuid = update_systagmodifiedbyuuid
		where entityfieldinstanceentityinstanceentityuuid = update_systagentityuuid
				and  entityfieldinstanceentityfieldentityuuid = 'cf94ce9c-edd3-4c7b-8128-ab598fc9710a'
				and entityfieldinstancevalue <> update_systag_displayname; 

end if;

if update_systag_name notnull and (coalesce(update_systag_name,'') <> '')
	then

	-- update name in languagetranslations (Temp until the retranslate runs)	
		update public.languagetranslations
			set languagetranslationvalue = update_systag_name
		from entity.entityinstance
			where entityinstanceuuid = update_systagentityuuid
				and languagetranslationmasterid = (select languagemasterid from languagemaster where languagemasteruuid = entityinstancenameuuid)
				and languagetranslationtypeid = templanguagetypeid
				and languagetranslationvalue <> update_systag_name;

	-- update name in languagemaster
		update public.languagemaster
			set languagemastersourcelanguagetypeid = templanguagetypeid,
				languagemastersource = update_systag_name,
				languagemastermodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_systagmodifiedbyuuid),
				languagemastermodifieddate = now(),
				languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION'	
		from entity.entityinstance
			where entityinstanceuuid = update_systagentityuuid
				and languagemasteruuid = entityinstancenameuuid
				and languagemastersource <> update_systag_name;
				
end if;

-- update systag

update public.systag
		set systagstartdate = case when update_systagstartdate notnull 
									then update_systagstartdate
									else systagstartdate end,
			systagenddate  = update_systagenddate, 
			systagmodifiedby = (select workerinstanceid from workerinstance where workerinstanceuuid = update_systagmodifiedbyuuid)
where systagid = (select systagid from entity.crud_systag_read_min(update_systagownerentityuuid, 
							null, update_systagentityuuid, null, false,null,null, null,update_languagetypeuuid));

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.crud_systag_update(uuid,uuid,uuid,uuid,integer,text,text,text,uuid,text,uuid,boolean,boolean,timestamp with time zone,timestamp with time zone,text) TO graphql;

-- Type: PROCEDURE ; Name: entity.enable_checklist(uuid,text,uuid,text,uuid,text,text,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.enable_checklist(IN create_customer_uuid uuid, IN create_original_customer_uuid text, IN create_site_uuid uuid, IN create_original_site_uuid text, IN create_language_type_uuid uuid, IN create_original_language_type_uuid text, IN create_timezone text, IN create_modifiedby bigint)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
-- Customer temp values
    tempcustomerid bigint;    
	
-- Site/Location temp values
    tempcustagsitetypeid bigint;
	tempcustagsitetypeuuid uuid;
    tempsiteid bigint;
	temptaguuid uuid;
	tempcustaguuid text;
-- template, instance and result
    tempworktemplateid bigint;
    tempworktemplateuuid text;
    tempworkfrequencyid bigint;
    tempworkresultid bigint;
    tempworkresultidforworker bigint;
    tempworkinstanceid bigint;
-- General temp values
    templanguagemasterid bigint;
    template_description_id bigint;
	tempcreate_modifiedby_uud text;
-- checklist
    checklist_config_template_uuid text;
    checklist_config_uuid text;
-- language uuids
  	englishentityuuid uuid;
	englishoriginaluuid text;
	temp_language_type text;
	languageuuid uuid;
	tendreluuid uuid;
	temp_language_type_id bigint;

BEGIN

    RAISE NOTICE 'Start of procedure';

------------------------------------------------------------------
-- Start setting the missing values
-- grab originaluuids or entityuuids depending on what was sent in
-------------------------------------------------------------------

-- setup language variables.  If there is no language type sent in default to english.  
-- Set these as variables just incast the uuids change in the future.

	tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
	languageuuid = '580f6ee2-42ca-4a5b-9e18-9ea0c168845a';
 	englishentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	englishoriginaluuid = '7ebd10ee-5018-4e11-9525-80ab5c6aebee';

	if create_language_type_uuid isNull
		then  select systagentityuuid ,systagdisplayname, systagid
				into create_language_type_uuid,temp_language_type, temp_language_type_id
				from entity.crud_systag_read_full(tendreluuid,null,null, languageuuid, false,null,null, null,englishentityuuid)
				where systaguuid = create_original_language_type_uuid
				;
	end if;

	if create_original_language_type_uuid isNull
		then  select systaguuid ,systagdisplayname, systagid
				into create_original_language_type_uuid,temp_language_type, temp_language_type_id
				from entity.crud_systag_read_full(tendreluuid,null,null, languageuuid, false,null,null, null,englishentityuuid)
				where systagentityuuid = create_language_type_uuid				
				;
	end if;

-- if language type is still null then set it to the default.

	if create_language_type_uuid isNull or create_original_language_type_uuid isNull
		then create_language_type_uuid = englishentityuuid;
			create_original_language_type_uuid = englishoriginaluuid;
			temp_language_type_id = 20;
			temp_language_type = 'en';
	end if;

-- setup customer variables

	if create_customer_uuid isNull
		then select customerentityuuid, customerid
				into create_customer_uuid,tempcustomerid
				from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)
				where customeruuid = create_original_customer_uuid;
	end if;

	if create_original_customer_uuid isNull
		then select customeruuid, customerid
				into create_original_customer_uuid,tempcustomerid		
				from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)
				where customerentityuuid = create_customer_uuid;
	end if;

	if create_customer_uuid isNull or create_original_customer_uuid isNull or tempcustomerid isNull
		then  raise exception 'No owner entity found';
	end if;

-- setup site variables

	if create_site_uuid isNull
		then select locationentityuuid, locationid
				into create_original_site_uuid,tempsiteid	 
				from entity.crud_location_read_min(create_customer_uuid,null,null,null,true,null,null,null,null,null)
				where locationid = create_original_site_uuid;
	end if;

	if create_original_site_uuid isNull
		then select locationuuid, locationid
				into create_original_site_uuid,tempsiteid	
				from entity.crud_location_read_min(create_customer_uuid,null,null,null,true,null,null,null,null,null)
				where locationentityuuid = create_site_uuid;
	end if;

	if create_site_uuid isNull or create_original_site_uuid isNull or tempsiteid isNull
		then  raise exception 'No site entity found';
	end if;

    IF (SELECT EXISTS(SELECT id
                      FROM view_worktemplate
                      WHERE worktemplatename = 'Demo Checklist'
                        AND worktemplatecustomerid = tempcustomerid)) THEN
        RAISE NOTICE 'Checklist template exists, skipping.';
    ELSE
        -- Add in worktemplates for the site id and location types
-- Add in checklist template type

        INSERT INTO public.languagemaster
        (languagemastercustomerid,
         languagemastercustomersiteid,
         languagemastersourcelanguagetypeid,
         languagemastersource,
         languagemastermodifiedby)
        VALUES (tempcustomerid,
                tempsiteid,
                temp_language_type_id,
                'Demo Checklist',
                create_modifiedby)
        RETURNING languagemasterid INTO templanguagemasterid;

        INSERT INTO public.languagemaster
        (languagemastercustomerid,
         languagemastercustomersiteid,
         languagemastersourcelanguagetypeid,
         languagemastersource,
         languagemastermodifiedby)
        VALUES (tempcustomerid,
                tempsiteid,
                temp_language_type_id,
                'Use the Tendrel Console to modify this demo checklist or create your own!',
                create_modifiedby)
        RETURNING languagemasterid INTO template_description_id;

-- find and add the site location category to the template

		select  locationtagentityuuid
		into temptaguuid
		from entity.crud_location_read_min(create_customer_uuid,create_site_uuid,null,null,false,null,null,null,null,englishentityuuid);

		select custagid, custaguuid 
		into tempcustagsitetypeid, tempcustaguuid
		from entity.crud_custag_read_min(create_customer_uuid, null, temptaguuid, null, false,null,null, null,englishentityuuid);

        INSERT INTO public.worktemplate(worktemplatecustomerid,
                                        worktemplatesiteid,
                                        worktemplatenameid,
                                        worktemplateneedstranslation,
                                        worktemplateallowondemand,
                                        worktemplateworkfrequencyid,
                                        worktemplatemodifiedby,
                                        worktemplatelocationtypeid,
                                        worktemplatesoplink,
                                        worktemplatedescriptionid)
        VALUES (tempcustomerid,
                tempsiteid,
                templanguagemasterid,
                FALSE,
                TRUE,
                1, -- this is placeholder for the frequencyid we are about to create
                create_modifiedby,
                tempcustagsitetypeid,
                'https://beta.console.tendrel.io/checklist',
                null)   -- FIX THIS:  this is the languagemaster.  Should have been the actual workdescription table.  
        RETURNING worktemplateid,id INTO tempworktemplateid, tempworktemplateuuid;
	
--    add work description 

		INSERT INTO public.workdescription(
			workdescriptionworktemplateid, 
			workdescriptioncustomerid, 
			workdescriptionname, 
			workdescriptioncreateddate, 
			workdescriptionmodifieddate, 
			workdescriptionstartdate, 
			workdescriptionenddate, 
			workdescriptionlanguagemasterid, 
			workdescriptionlanguagetypeid, 
			workdescriptionmodifiedby 
			)
		VALUES (
			tempworktemplateid, 
			tempcustomerid, 
			 'Use the Tendrel Console to modify this demo checklist or create your own!', 
			now(), 
			now(), 
			now(), 
			null, 
			template_description_id, 
			temp_language_type_id, 
			create_modifiedby
		) RETURNING workdescriptionid INTO template_description_id;

--		update worktemplate
--		set worktemplatedescriptionid = template_description_id
--		where worktemplateid = tempworktemplateid;

        RAISE NOTICE 'inserted part through template';

-- Add in the workfrequency for the template

        INSERT INTO public.workfrequency(workfrequencyworktemplateid,
                                         workfrequencycustomerid,
                                         workfrequencytypeid,
                                         workfrequencyvalue,
                                         workfrequencystartdate,
                                         workfrequencymodifiedby)
        VALUES (tempworktemplateid,
                tempcustomerid,
                740,
                1,
                CLOCK_TIMESTAMP(),
                create_modifiedby)
        RETURNING workfrequencyid INTO tempworkfrequencyid;

        RAISE NOTICE 'inserted frequency';

        UPDATE worktemplate w
        SET worktemplateworkfrequencyid = tempworkfrequencyid
        WHERE worktemplateid = tempworktemplateid;

-----------------------------------------------------------------------------------
        RAISE NOTICE 'variable tempcustomerid %',tempcustomerid;
        RAISE NOTICE 'variable create_original_customer_uuid %',create_original_customer_uuid;
		RAISE NOTICE 'variable tempworktemplateuuid %',tempworktemplateuuid;
		RAISE NOTICE 'variable tempcustaguuid %',tempcustaguuid;
-----------------------------------------------------------------------------------						

-- add the contraints

        INSERT INTO worktemplateconstraint (worktemplateconstraintcustomerid,
                                            worktemplateconstraintcustomeruuid,
                                            worktemplateconstrainttemplateid,
                                            worktemplateconstraintconstraintid, -- Location Type in custag
                                            worktemplateconstraintconstrainedtypeid, -- Constraint type in systag
                                            worktemplateconstraintmodifiedby)
        VALUES (tempcustomerid,
                create_original_customer_uuid,
                tempworktemplateuuid,
                tempcustaguuid,
                'd8dfd8de-ffdc-4472-8d38-171351668e9d',   -- Is this location type?
                create_modifiedby);

        RAISE NOTICE 'first constraint';

-- Next template for in progress

        INSERT INTO public.worktemplatenexttemplate(worktemplatenexttemplateprevioustemplateid,
                                                    worktemplatenexttemplatenexttemplateid,
                                                    worktemplatenexttemplatecustomerid,
                                                    worktemplatenexttemplateviastatuschange,
                                                    worktemplatenexttemplateviastatuschangeid,
                                                    worktemplatenexttemplatesiteid,
                                                    worktemplatenexttemplatetypeid,
                                                    worktemplatenexttemplatemodifiedby)
        VALUES (tempworktemplateid,
                tempworktemplateid,
                tempcustomerid,
                TRUE,
                707,
                tempsiteid,
                692,
                create_modifiedby);

-- set tiny tendies types

        INSERT INTO worktemplatetype AS w
        (worktemplatetypeworktemplateuuid,
         worktemplatetypesystaguuid,
         worktemplatetypeworktemplateid,
         worktemplatetypesystagid,
         worktemplatetypecustomerid,
         worktemplatetypecustomeruuid)
        VALUES (tempworktemplateuuid,
                'ad2f2ced-06ca-46ab-8d75-a2c0a97ad33d',  -- Is this checklist?
                tempworktemplateid,
                969,
                tempcustomerid,
                create_original_customer_uuid);

        RAISE NOTICE 'inserted template';
		
        -- Add in workresults here
--Time At Task

        INSERT INTO public.workresult(workresultworktemplateid,
                                      workresultcustomerid,
                                      workresultsiteid,
                                      workresultfortask,
                                      workresultforaudit,
                                      workresulttypeid,
                                      workresultlanguagemasterid,
                                      workresultorder,
                                      workresultisvisible,
                                      workresultisprimary,
                                      workresultmodifiedby)
        VALUES (tempworktemplateid,
                tempcustomerid,
                tempsiteid,
                TRUE,
                FALSE,
                737,
                4367,
                0,
                FALSE,
                TRUE,
                create_modifiedby);

-- Checklist - Clicker (using our widget.  May remove this later or not use it at all.)
        INSERT INTO public.languagemaster
        (languagemastercustomerid,
         languagemastercustomersiteid,
         languagemastersourcelanguagetypeid,
         languagemastersource,
         languagemastermodifiedby)
        VALUES (tempcustomerid,
                tempsiteid,
                temp_language_type_id,
                'Clicker Widget',
                create_modifiedby)
        RETURNING languagemasterid INTO templanguagemasterid;

        INSERT INTO public.workresult(workresultworktemplateid,
                                      workresultcustomerid,
                                      workresulttypeid,
                                      workresultforaudit,
                                      workresultstartdate,
                                      workresultlanguagemasterid,
                                      workresultsiteid,
                                      workresultorder,
                                      workresultiscalculated,
                                      workresultiseditable,
                                      workresultisvisible,
                                      workresultisrequired,
                                      workresultfortask,
                                      workresultisprimary,
                                      workresultmodifiedby)
        VALUES (tempworktemplateid,
                tempcustomerid,
                700,
                FALSE,
                CLOCK_TIMESTAMP(),
                templanguagemasterid,
                tempsiteid,
                1,
                FALSE,
                TRUE,
                TRUE,
                FALSE,
                TRUE,
                FALSE,
                create_modifiedby);

-- Checklist - Boolean (using our widget.  May remove this later or not use it at all.)
        INSERT INTO public.languagemaster
        (languagemastercustomerid,
         languagemastercustomersiteid,
         languagemastersourcelanguagetypeid,
         languagemastersource,
         languagemastermodifiedby)
        VALUES (tempcustomerid,
                tempsiteid,
                temp_language_type_id,
                'True/False Widget',
                create_modifiedby)
        RETURNING languagemasterid INTO templanguagemasterid;

        INSERT INTO public.workresult(workresultworktemplateid,
                                      workresultcustomerid,
                                      workresulttypeid,
                                      workresultforaudit,
                                      workresultstartdate,
                                      workresultlanguagemasterid,
                                      workresultsiteid,
                                      workresultorder,
                                      workresultiscalculated,
                                      workresultiseditable,
                                      workresultisvisible,
                                      workresultisrequired,
                                      workresultfortask,
                                      workresultisprimary,
                                      workresultmodifiedby)
        VALUES (tempworktemplateid,
                tempcustomerid,
                754,
                FALSE,
                CLOCK_TIMESTAMP(),
                templanguagemasterid,
                tempsiteid,
                1,
                FALSE,
                TRUE,
                TRUE,
                FALSE,
                TRUE,
                FALSE,
                create_modifiedby);

-- Checklist - Text (using our widget.  May remove this later or not use it at all.)
        INSERT INTO public.languagemaster
        (languagemastercustomerid,
         languagemastercustomersiteid,
         languagemastersourcelanguagetypeid,
         languagemastersource,
         languagemastermodifiedby)
        VALUES (tempcustomerid,
                tempsiteid,
                temp_language_type_id,
                'Long Text Widget',
                create_modifiedby)
        RETURNING languagemasterid INTO templanguagemasterid;

        INSERT INTO public.workresult(workresultworktemplateid,
                                      workresultcustomerid,
                                      workresulttypeid,
                                      workresultforaudit,
                                      workresultstartdate,
                                      workresultlanguagemasterid,
                                      workresultsiteid,
                                      workresultorder,
                                      workresultiscalculated,
                                      workresultiseditable,
                                      workresultisvisible,
                                      workresultisrequired,
                                      workresultfortask,
                                      workresultisprimary,
                                      workresultmodifiedby,
                                      workresultdefaultvalue)
        VALUES (tempworktemplateid,
                tempcustomerid,
                702,
                FALSE,
                CLOCK_TIMESTAMP(),
                templanguagemasterid,
                tempsiteid,
                1,
                FALSE,
                TRUE,
                TRUE,
                FALSE,
                TRUE,
                FALSE,
                create_modifiedby,
                'Widgets can be pre-configured with default values in the Tendrel Console, saving time by automatically applying frequently used result values.');

 

-- Primary Location
        INSERT INTO public.languagemaster
        (languagemastercustomerid,
         languagemastercustomersiteid,
         languagemastersourcelanguagetypeid,
         languagemastersource,
         languagemastermodifiedby)
        VALUES (tempcustomerid,
                tempsiteid,
                temp_language_type_id,
                'Location',
                create_modifiedby)
        RETURNING languagemasterid INTO templanguagemasterid;

        INSERT INTO public.workresult(workresultworktemplateid,
                                      workresultcustomerid,
                                      workresulttypeid,
                                      workresultforaudit,
                                      workresultstartdate,
                                      workresultlanguagemasterid,
                                      workresultsiteid,
                                      workresultorder,
                                      workresultiscalculated,
                                      workresultiseditable,
                                      workresultisvisible,
                                      workresultisrequired,
                                      workresultfortask,
                                      workresultentitytypeid,
                                      workresultisprimary,
                                      workresultmodifiedby)
        VALUES (tempworktemplateid,
                tempcustomerid,
                848,
                FALSE,
                CLOCK_TIMESTAMP(),
                templanguagemasterid,
                tempsiteid,
                996,
                FALSE,
                FALSE,
                FALSE,
                FALSE,
                TRUE,
                852,
                TRUE,
                create_modifiedby)
        RETURNING workresultid INTO tempworkresultid;

--Primary Worker
        INSERT INTO public.languagemaster
        (languagemastercustomerid,
         languagemastercustomersiteid,
         languagemastersourcelanguagetypeid,
         languagemastersource,
         languagemastermodifiedby)
        VALUES (tempcustomerid,
                tempsiteid,
                temp_language_type_id,
                'Worker',
                create_modifiedby)
        RETURNING languagemasterid INTO templanguagemasterid;

        INSERT INTO public.workresult(workresultworktemplateid,
                                      workresultcustomerid,
                                      workresulttypeid,
                                      workresultforaudit,
                                      workresultstartdate,
                                      workresultlanguagemasterid,
                                      workresultsiteid,
                                      workresultorder,
                                      workresultiscalculated,
                                      workresultiseditable,
                                      workresultisvisible,
                                      workresultisrequired,
                                      workresultfortask,
                                      workresultentitytypeid,
                                      workresultisprimary,
                                      workresultmodifiedby)
        VALUES (tempworktemplateid,
                tempcustomerid,
                848,
                FALSE,
                CLOCK_TIMESTAMP(),
                templanguagemasterid,
                tempsiteid,
                997,
                FALSE,
                FALSE,
                FALSE,
                FALSE,
                TRUE,
                850,
                TRUE,
                create_modifiedby)
        RETURNING workresultid INTO tempworkresultidforworker;

        -- Add in instances
-- Checklist only has ondemand  

        INSERT INTO public.workinstance(workinstancecustomerid,
                                        workinstanceworktemplateid,
                                        workinstancesiteid,
                                        workinstancetypeid,
                                        workinstancestatusid,
                                        workinstancetargetstartdate,
                                        workinstancetimezone,
                                        workinstancerefid, -- put location here to start
                                        workinstancemodifiedby)
        VALUES (tempcustomerid,
                tempworktemplateid,
                tempsiteid,
                692, -- this is the work type for task.
                706, -- this is the status for Open.
                CLOCK_TIMESTAMP(),
                create_timezone,    
                tempsiteid,
                create_modifiedby)
        RETURNING workinstanceid INTO tempworkinstanceid;

        UPDATE workinstance
        SET workinstanceoriginatorworkinstanceid = workinstanceid
        WHERE workinstancecustomerid = tempcustomerid
          AND workinstanceoriginatorworkinstanceid ISNULL;

-- Insert for tasks
        INSERT INTO public.workresultinstance(workresultinstanceworkinstanceid,
                                              workresultinstancecustomerid,
                                              workresultinstanceworkresultid,
                                              workresultinstancemodifiedby,
                                              workresultinstancevalue)
        VALUES (tempworkinstanceid,
                tempcustomerid,
                tempworkresultid,
                create_modifiedby,
                tempsiteid);

        INSERT INTO public.workresultinstance(workresultinstanceworkinstanceid,
                                              workresultinstancecustomerid,
                                              workresultinstanceworkresultid,
                                              workresultinstancemodifiedby,
                                              workresultinstancevalue)
        VALUES (tempworkinstanceid,
                tempcustomerid,
                tempworkresultidforworker,
                create_modifiedby,
                NULL);

        RAISE NOTICE 'inserted work instances';

-- FIX THIS:  Cleanup widget and format.  We should not ahve to fix them after the fact.  Insert them correctly.  

-- Number
        UPDATE workresult
        SET workresultwidgetid     = 407,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 701
          AND workresultwidgetid IS NULL;

-- Clicker
        UPDATE workresult
        SET workresultwidgetid     = 406,
            workresulttypeid       = 701,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 700
          AND workresultwidgetid IS NULL;

-- boolean
        UPDATE workresult
        SET workresultwidgetid     = 414,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 754
          AND workresultwidgetid IS NULL;

-- tat
        UPDATE workresult
        SET workresultwidgetid     = 413,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 737
          AND workresultwidgetid IS NULL;

--Text
        UPDATE workresult
        SET workresultwidgetid     = 408,
            workresulttypeid       = 771,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 702
          AND workresultwidgetid IS NULL;

--Sentiment
        UPDATE workresult
        SET workresultwidgetid     = 410,
            workresulttypeid       = 701,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 704
          AND workresultwidgetid IS NULL;

--String
        UPDATE workresult
        SET workresultwidgetid     = 412,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 771
          AND workresultwidgetid IS NULL;

-- entity
        UPDATE workresult
        SET workresultwidgetid     = 415,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 848
          AND workresultwidgetid IS NULL;

-- date
        UPDATE workresult
        SET workresultwidgetid     = 419,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 868
          AND workresultwidgetid IS NULL;

-- Geolocation
        UPDATE workresult
        SET workresultwidgetid     = 463,
            workresulttypeid       = 771,
            workresultmodifieddate = CLOCK_TIMESTAMP()
        WHERE workresulttypeid = 890
          AND workresultwidgetid IS NULL;

    END IF;

-- Add in customerconfigs

    SELECT uuid
    INTO Checklist_config_template_uuid
    FROM public.crud_customer_config_templates_list(temp_language_type_id)
    WHERE category = 'Applications'
      AND type = 'Checklist';

	tempcreate_modifiedby_uud = (select workerinstanceuuid from workerinstance where workerinstanceid = create_modifiedby);
    -- get uuids
    CALL public.crud_customer_config_create(customer_uuid := create_original_customer_uuid, site_uuid := create_original_site_uuid,
                                            config_template_uuid := Checklist_config_template_uuid,
                                            config_value := 'false', 
											 modified_by := tempcreate_modifiedby_uud,
                                            config_id := Checklist_config_uuid);

END;

$procedure$;


REVOKE ALL ON PROCEDURE entity.enable_checklist(uuid,text,uuid,text,uuid,text,text,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.enable_checklist(uuid,text,uuid,text,uuid,text,text,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.enable_checklist(uuid,text,uuid,text,uuid,text,text,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.enable_checklist(uuid,text,uuid,text,uuid,text,text,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.enable_pinpoint(uuid,text,uuid,text,uuid,text,text,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.enable_pinpoint(IN create_customer_uuid uuid, IN create_original_customer_uuid text, IN create_site_uuid uuid, IN create_original_site_uuid text, IN create_language_type_uuid uuid, IN create_original_language_type_uuid text, IN create_timezone text, IN create_modifiedby bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare

-- Customer temp values
    tempcustomerid bigint;    
	
-- Site/Location temp values
    tempcustagsitetypeid bigint;
	tempcustagsitetypeuuid uuid;
    tempsiteid bigint;
	temptaguuid uuid;
	tempcustaguuid text;
-- template, instance and result
    tempworktemplateid bigint;
    tempworktemplateuuid text;
    tempworkfrequencyid bigint;
    tempworkresultid bigint;
    tempworkresultidforworker bigint;
    tempworkinstanceid bigint;
-- General temp values
    templanguagemasterid bigint;
    template_description_id bigint;
	tempcreate_modifiedby_uud text;
-- RTLS
    RTLS_config_template_uuid text;
    RTLS_config_uuid          text;
-- language uuids
  	englishentityuuid uuid;
	englishoriginaluuid text;
	temp_language_type text;
	languageuuid uuid;
	tendreluuid uuid;
	temp_language_type_id bigint;

Begin

    RAISE NOTICE 'Start of procedure';

------------------------------------------------------------------
-- Start setting the missing values
-- grab originaluuids or entityuuids depending on what was sent in
-------------------------------------------------------------------

-- setup language variables.  If there is no language type sent in default to english.  
-- Set these as variables just incast the uuids change in the future.

	tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
	languageuuid = '580f6ee2-42ca-4a5b-9e18-9ea0c168845a';
 	englishentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	englishoriginaluuid = '7ebd10ee-5018-4e11-9525-80ab5c6aebee';

	if create_language_type_uuid isNull
		then  select systagentityuuid ,systagdisplayname, systagid
				into create_language_type_uuid,temp_language_type, temp_language_type_id
				from entity.crud_systag_read_full(tendreluuid,null,null, languageuuid, false,null,null, null,englishentityuuid)
				where systaguuid = create_original_language_type_uuid
				;
	end if;

	if create_original_language_type_uuid isNull
		then  select systaguuid ,systagdisplayname, systagid
				into create_original_language_type_uuid,temp_language_type, temp_language_type_id
				from entity.crud_systag_read_full(tendreluuid,null,null, languageuuid, false,null,null, null,englishentityuuid)
				where systagentityuuid = create_language_type_uuid				
				;
	end if;

-- if language type is still null then set it to the default.

	if create_language_type_uuid isNull or create_original_language_type_uuid isNull
		then create_language_type_uuid = englishentityuuid;
			create_original_language_type_uuid = englishoriginaluuid;
			temp_language_type_id = 20;
			temp_language_type = 'en';
	end if;

-- setup customer variables

	if create_customer_uuid isNull
		then select customerentityuuid, customerid
				into create_customer_uuid,tempcustomerid
				from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)
				where customeruuid = create_original_customer_uuid;
	end if;

	if create_original_customer_uuid isNull
		then select customeruuid, customerid
				into create_original_customer_uuid,tempcustomerid		
				from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)
				where customerentityuuid = create_customer_uuid;
	end if;

	if create_customer_uuid isNull or create_original_customer_uuid isNull or tempcustomerid isNull
		then  raise exception 'No owner entity found';
	end if;

-- setup site variables

	if create_site_uuid isNull
		then select locationentityuuid, locationid
				into create_original_site_uuid,tempsiteid	 
				from entity.crud_location_read_min(create_customer_uuid,null,null,null,true,null,null,null,null,null)
				where locationid = create_original_site_uuid;
	end if;

	if create_original_site_uuid isNull
		then select locationuuid, locationid
				into create_original_site_uuid,tempsiteid	
				from entity.crud_location_read_min(create_customer_uuid,null,null,null,true,null,null,null,null,null)
				where locationentityuuid = create_site_uuid;
	end if;

	if create_site_uuid isNull or create_original_site_uuid isNull or tempsiteid isNull
		then  raise exception 'No site entity found';
	end if;

-- find and add the site location category to the template

		select  locationtagentityuuid
		into temptaguuid
		from entity.crud_location_read_min(create_customer_uuid,create_site_uuid,null,null,false,null,null,null,null,englishentityuuid);

		select custagid, custaguuid 
		into tempcustagsitetypeid, tempcustaguuid
		from entity.crud_custag_read_min(create_customer_uuid, null, temptaguuid, null, false,null,null, null,englishentityuuid);

-------------------------------------------------------------------------------	

-- Add in worktemplates for the site id and location types
-- Add in RTLS template type
IF (SELECT EXISTS(select id from view_worktemplate
		where worktemplatename = 'RTLS'
		and worktemplatecustomerid = tempcustomerid)) THEN
    RAISE NOTICE 'RTLS template exists, skipping.';
ELSE
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,   -- May switch this to languagetype in the future.  Can't remeber if we do anythig with name.  
            'RTLS',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.worktemplate(worktemplatecustomerid,
                                    worktemplatesiteid,
                                    worktemplatenameid,
                                    worktemplateneedstranslation,
                                    worktemplateallowondemand,
                                    worktemplateworkfrequencyid,
                                    worktemplatemodifiedby,
                                    worktemplatelocationtypeid,
                                    worktemplatereapinprogworkmillis)
    values (tempcustomerid,
            tempsiteid,
            templanguagemasterid,
            FALSE,
            FALSE,
            1, -- this is placeholder for the frequencyid we are about to create
            create_modifiedby,
            tempcustagsitetypeid,
            -- expiration of 7 days
            604800000)
    Returning worktemplateid,id into tempworktemplateid, tempworktemplateuuid;

    RAISE NOTICE 'inserted part through template';

-- Add in the workfrequency for the template

    INSERT INTO public.workfrequency(workfrequencyworktemplateid,
                                     workfrequencycustomerid,
                                     workfrequencytypeid,
                                     workfrequencyvalue,
                                     workfrequencystartdate,
                                     workfrequencymodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            748, -- one time frequency
            1,
            clock_timestamp(),
            create_modifiedby)
    Returning workfrequencyid into tempworkfrequencyid;

    RAISE NOTICE 'inserted frequency';

    update worktemplate w
    set worktemplateworkfrequencyid = tempworkfrequencyid
    where worktemplateid = tempworktemplateid;

-- add the contraints

    INSERT INTO worktemplateconstraint (worktemplateconstraintcustomerid,
                                        worktemplateconstraintcustomeruuid,
                                        worktemplateconstrainttemplateid,
                                        worktemplateconstraintconstraintid, -- Location Type in custag
                                        worktemplateconstraintconstrainedtypeid, -- Constraint type in systag
                                        worktemplateconstraintmodifiedby)
    values (tempcustomerid,
            create_original_customer_uuid,
            tempworktemplateuuid,
            tempcustaguuid,
            'd8dfd8de-ffdc-4472-8d38-171351668e9d',
            create_modifiedby);

    RAISE NOTICE 'first constraint';
-- Next template for in progress

    INSERT INTO public.worktemplatenexttemplate(worktemplatenexttemplateprevioustemplateid,
                                                worktemplatenexttemplatenexttemplateid,
                                                worktemplatenexttemplatecustomerid,
                                                worktemplatenexttemplateviastatuschange,
                                                worktemplatenexttemplateviastatuschangeid,
                                                worktemplatenexttemplatesiteid,
                                                worktemplatenexttemplatetypeid,
                                                worktemplatenexttemplatemodifiedby)
    values (tempworktemplateid,
            tempworktemplateid,
            tempcustomerid,
            TRUE,
            707,
            tempsiteid,
            811,
            create_modifiedby);

-- set tiny tendies types

    insert into worktemplatetype as w
    (worktemplatetypeworktemplateuuid,
     worktemplatetypesystaguuid,
     worktemplatetypeworktemplateid,
     worktemplatetypesystagid,
     worktemplatetypecustomerid,
     worktemplatetypecustomeruuid)
    values (tempworktemplateuuid,
            (select systaguuid from systag where systagtype='RTLS' and systagparentid = (select systagid from systag where systagtype='Template Type')),
            tempworktemplateid,
            968,
            tempcustomerid,
            create_original_customer_uuid);

    RAISE NOTICE 'inserted template';
    -- Add in workresults here
--Time At Task

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresultsiteid,
                                  workresultfortask,
                                  workresultforaudit,
                                  workresulttypeid,
                                  workresultlanguagemasterid,
                                  workresultorder,
                                  workresultisvisible,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            tempsiteid,
            TRUE,
            FALSE,
            737,
            4367,
            0,
            FALSE,
            create_modifiedby);

-- RTLS - Accuracy
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Accuracy',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            701,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            1,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            FALSE,
            create_modifiedby);

-- RTLS - Altitude
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Altitude',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            701,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            1,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            FALSE,
            create_modifiedby);

-- RTLS - Altitude Accuracy
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Altitude Accuracy',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            701,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            3,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            FALSE,
            create_modifiedby);

-- RTLS - Heading (using our widget.  May remove this later or not use it at all.)
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Heading',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            701,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            4,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            FALSE,
            create_modifiedby);

-- RTLS - Latitude (using our widget.  May remove this later or not use it at all.)
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Latitude',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            701,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            5,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            FALSE,
            create_modifiedby);

-- RTLS - Longitude (using our widget.  May remove this later or not use it at all.)
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Longitude',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            701,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            6,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            FALSE,
            create_modifiedby);

-- RTLS - Speed (using our widget.  May remove this later or not use it at all.)
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Speed',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            701,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            7,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            FALSE,
            create_modifiedby);

-- RTLS - Online Status (using our widget.  May remove this later or not use it at all.)
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Online Status',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultisprimary,
                                  workresultmodifiedby,
                                  workresulttranslate)
    values (tempworktemplateid,
            tempcustomerid,
            771,   -- Really this is a drop down and probably a pointer to possible statuses.
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            8,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            FALSE,
            create_modifiedby,
            FALSE);

-- Primary Location
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Location',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            996,
            FALSE,
            FALSE,
            FALSE,
            FALSE,
            TRUE,
            852,
            TRUE,
            create_modifiedby)
    Returning workresultid into tempworkresultid;

--Primary Worker
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Worker',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            997,
            FALSE,
            FALSE,
            FALSE,
            FALSE,
            TRUE,
            850,
            TRUE,
            create_modifiedby)
    returning workresultid into tempworkresultidforworker;

-- Cleanup widget and format
-- Number
    update workresult
    set workresultwidgetid     = 407,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 701
      and workresultwidgetid is null;

-- Clicker
    update workresult
    set workresultwidgetid     = 406,
        workresulttypeid       = 701,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 700
      and workresultwidgetid is null;

-- boolean
    update workresult
    set workresultwidgetid     = 414,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 754
      and workresultwidgetid is null;

-- tat
    update workresult
    set workresultwidgetid     = 413,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 737
      and workresultwidgetid is null;

--Text
    update workresult
    set workresultwidgetid     = 408,
        workresulttypeid       = 771,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 702
      and workresultwidgetid is null;

--Sentiment
    update workresult
    set workresultwidgetid     = 410,
        workresulttypeid       = 701,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 704
      and workresultwidgetid is null;

--String
    update workresult
    set workresultwidgetid     = 412,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 771
      and workresultwidgetid is null;

-- entity
    update workresult
    set workresultwidgetid     = 415,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 848
      and workresultwidgetid is null;

-- date
    update workresult
    set workresultwidgetid     = 419,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 868
      and workresultwidgetid is null;

    select uuid
    into RTLS_config_template_uuid
    from public.crud_customer_config_templates_list(20)
    where category = 'Applications'
      and type = 'RTLS';

    -- get uuids
    call public.crud_customer_config_create(customer_uuid := create_original_customer_uuid, site_uuid := create_original_site_uuid,
                                            config_template_uuid := RTLS_config_template_uuid,
                                            config_value := 'false', modified_by := null,
                                            config_id := RTLS_config_uuid);

END IF;

-- Add in worktemplates for the site id and location types
-- Check In/Out will be of the Activity WorkType
-- Check In/Out will be On Demand

IF (SELECT EXISTS(select id from view_worktemplate
		where worktemplatename = 'RTLS - Check In/Out'
		and worktemplatecustomerid = tempcustomerid)) THEN
    RAISE NOTICE 'RTLS Check In/Out template exists, skipping.';
ELSE
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'RTLS - Check In/Out',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.worktemplate(worktemplatecustomerid,
                                    worktemplatesiteid,
                                    worktemplatenameid,
                                    worktemplateneedstranslation,
                                    worktemplateallowondemand,
                                    worktemplateworkfrequencyid,
                                    worktemplatemodifiedby,
                                    worktemplatelocationtypeid)
    values (tempcustomerid,
            tempsiteid,
            templanguagemasterid,
            FALSE,
            TRUE,
            1, -- this is placeholder for the frequencyid we are about to create
            create_modifiedby,
            tempcustagsitetypeid)
    Returning worktemplateid,id into tempworktemplateid, tempworktemplateuuid;

    RAISE NOTICE 'inserted part through template';

-- Add in the workfrequency for the template

    INSERT INTO public.workfrequency(workfrequencyworktemplateid,
                                     workfrequencycustomerid,
                                     workfrequencytypeid,
                                     workfrequencyvalue,
                                     workfrequencystartdate,
                                     workfrequencymodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            740,
            1,
            clock_timestamp(),
            create_modifiedby)
    Returning workfrequencyid into tempworkfrequencyid;

    RAISE NOTICE 'inserted frequency';

    update worktemplate w
    set worktemplateworkfrequencyid = tempworkfrequencyid
    where worktemplateid = tempworktemplateid;

-- add the contraints

    INSERT INTO worktemplateconstraint (worktemplateconstraintcustomerid,
                                        worktemplateconstraintcustomeruuid,
                                        worktemplateconstrainttemplateid,
                                        worktemplateconstraintconstraintid, -- Location Type in custag
                                        worktemplateconstraintconstrainedtypeid, -- Constraint type in systag
                                        worktemplateconstraintmodifiedby)
    values (tempcustomerid,
            create_original_customer_uuid,
            tempworktemplateuuid,
            tempcustaguuid,
            'd8dfd8de-ffdc-4472-8d38-171351668e9d',  -- this is 'Location'
            create_modifiedby);

    RAISE NOTICE 'first constraint';
-- Next template for in progress

    INSERT INTO public.worktemplatenexttemplate(worktemplatenexttemplateprevioustemplateid,
                                                worktemplatenexttemplatenexttemplateid,
                                                worktemplatenexttemplatecustomerid,
                                                worktemplatenexttemplateviastatuschange,
                                                worktemplatenexttemplateviastatuschangeid,
                                                worktemplatenexttemplatesiteid,
                                                worktemplatenexttemplatetypeid,
                                                worktemplatenexttemplatemodifiedby)
    values (tempworktemplateid,
            tempworktemplateid,
            tempcustomerid,
            TRUE,
            707,
            tempsiteid,
            811,
            create_modifiedby);

-- set tiny tendies types

    insert into worktemplatetype as w
    (worktemplatetypeworktemplateuuid,
     worktemplatetypesystaguuid,
     worktemplatetypeworktemplateid,
     worktemplatetypesystagid,
     worktemplatetypecustomerid,
     worktemplatetypecustomeruuid)
    values (tempworktemplateuuid,
            'systag_0da3103c-adc6-4ec2-ac8d-7966a03ad9f6',  -- Activity
            tempworktemplateid,
            968,
            tempcustomerid,
            create_original_customer_uuid);

    RAISE NOTICE 'inserted template';

-- Add in workresults here
--Time At Task

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresultsiteid,
                                  workresultfortask,
                                  workresultforaudit,
                                  workresulttypeid,
                                  workresultlanguagemasterid,
                                  workresultorder,
                                  workresultisvisible,
                                  workresultmodifiedby,
								  workresultwidgetid)
    values (tempworktemplateid,
            tempcustomerid,
            tempsiteid,
            TRUE,
            FALSE,
            737,
            4367,
            0,
            FALSE,
            create_modifiedby,
			413);

-- Primary Location

    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Location',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby,
								  workresultwidgetid)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            996,
            FALSE,
            FALSE,
            FALSE,
            FALSE,
            TRUE,
            852,
            TRUE,
            create_modifiedby,
			415)
    Returning workresultid into tempworkresultid;

--Primary Worker
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Worker',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby,
								  workresultwidgetid)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            997,
            FALSE,
            FALSE,
            FALSE,
            FALSE,
            TRUE,
            850,
            TRUE,
            create_modifiedby,
			415)
    returning workresultid into tempworkresultidforworker;

-- Add in ondemand instances

    INSERT INTO public.workinstance(workinstancecustomerid,
                                    workinstanceworktemplateid,
                                    workinstancesiteid,
                                    workinstancetypeid,
                                    workinstancestatusid,
                                    workinstancetargetstartdate,
                                    workinstancetimezone,
                                    workinstancerefid, -- put location here to start
                                    workinstancemodifiedby)
    values (tempcustomerid,
            tempworktemplateid,
            tempsiteid,
            811, -- this is the work type for task.
            706, -- this is the status for Open.
            clock_timestamp(),
            create_timezone,
            tempsiteid,
            create_modifiedby)
    Returning workinstanceid into tempworkinstanceid;

    update workinstance
    set workinstanceoriginatorworkinstanceid = workinstanceid
    where workinstancecustomerid = tempcustomerid
      and workinstanceoriginatorworkinstanceid isNull;

-- Insert result instances
    INSERT INTO public.workresultinstance(workresultinstanceworkinstanceid,
                                          workresultinstancecustomerid,
                                          workresultinstanceworkresultid,
                                          workresultinstancemodifiedby,
                                          workresultinstancevalue,
                                          workresultinstancetimezone)
    values (tempworkinstanceid,
            tempcustomerid,
            tempworkresultid,
            create_modifiedby,
            tempsiteid,
            create_timezone);

    INSERT INTO public.workresultinstance(workresultinstanceworkinstanceid,
                                          workresultinstancecustomerid,
                                          workresultinstanceworkresultid,
                                          workresultinstancemodifiedby,
                                          workresultinstancevalue,
                                          workresultinstancetimezone)
    values (tempworkinstanceid,
            tempcustomerid,
            tempworkresultidforworker,
            create_modifiedby,
            null,
            create_timezone);

    RAISE NOTICE 'inserted work instances';
END IF;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.enable_pinpoint(uuid,text,uuid,text,uuid,text,text,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.enable_pinpoint(uuid,text,uuid,text,uuid,text,text,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.enable_pinpoint(uuid,text,uuid,text,uuid,text,text,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.enable_pinpoint(uuid,text,uuid,text,uuid,text,text,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.enable_runtime(uuid,text,uuid,text,uuid,text,bigint,text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.enable_runtime(IN create_customer_uuid uuid, IN create_original_customer_uuid text, IN create_site_uuid uuid, IN create_original_site_uuid text, IN create_language_type_uuid uuid, IN create_original_language_type_uuid text, IN modified_by bigint, IN timezone text, OUT testlog text)
 LANGUAGE plpgsql
AS $procedure$
declare

  ins_locations text[];
  ins_template text;
  ins_template_type_n bigint;
  runtime_config_template_uuid text;
  runtime_config_uuid text;
  create_locationentityuuid uuid;
  testtext text;
  
  -- language uuids
  	englishentityuuid uuid;
	englishoriginaluuid text;
	temp_language_type text;
	languageuuid uuid;
	tendreluuid uuid;
 
begin

------------------------------------------------------------------
-- Start setting the missing values
-- grab originaluuids or entityuuids depending on what was sent in
-------------------------------------------------------------------

-- setup language variables.  If there is no language type sent in default to english.  
-- Set these as variables just incast the uuids change in the future.

	tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
	languageuuid = '580f6ee2-42ca-4a5b-9e18-9ea0c168845a';
 	englishentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	englishoriginaluuid = '7ebd10ee-5018-4e11-9525-80ab5c6aebee';

	if create_language_type_uuid isNull
		then  select systagentityuuid ,systagdisplayname
				into create_language_type_uuid,temp_language_type
				from entity.crud_systag_read_full(tendreluuid,null,null, languageuuid, false,null,null, null,englishentityuuid)
				where systaguuid = create_original_language_type_uuid
				;
	end if;

	if create_original_language_type_uuid isNull
		then  select systaguuid ,systagdisplayname
				into create_original_language_type_uuid,temp_language_type
				from entity.crud_systag_read_full(tendreluuid,null,null, languageuuid, false,null,null, null,englishentityuuid)
				where systagentityuuid = create_language_type_uuid				
				;
	end if;

-- if language type is still null then set it to the default.

	if create_language_type_uuid isNull or create_original_language_type_uuid isNull
		then create_language_type_uuid = englishentityuuid;
			create_original_language_type_uuid = englishoriginaluuid;
			temp_language_type = 'en';
	end if;

-- setup customer variables

	if create_customer_uuid isNull
		then create_customer_uuid = (select customerentityuuid 
									from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)
									where customeruuid = create_original_customer_uuid);
	end if;

	if create_original_customer_uuid isNull
		then create_original_customer_uuid = (select customeruuid 
											from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)
											where customerentityuuid = create_customer_uuid);
	end if;

	if create_customer_uuid isNull or create_original_customer_uuid isNull
		then  raise exception 'No owner entity found';
	end if;

-- setup site variables

	if create_site_uuid isNull
		then create_site_uuid = (select locationentityuuid 
									from entity.crud_location_read_min(create_customer_uuid,null,null,null,true,null,null,null,null,null)
									where locationid = create_original_site_uuid);
	end if;

	if create_original_site_uuid isNull
		then create_original_site_uuid = (select locationuuid 
											from entity.crud_location_read_min(create_customer_uuid,null,null,null,true,null,null,null,null,null)
											where locationentityuuid = create_site_uuid);
	end if;

	if create_site_uuid isNull or create_original_site_uuid isNull
		then  raise exception 'No site entity found';
	end if;

-- collect the worker instance info
-- FUTURE:  Flip this to entity once it is Worker is migrated

  perform set_config('user.id', workeridentityid, true)
  from public.workerinstance
  inner join public.worker on workerinstanceworkerid = workerid
  where workerinstanceid = modified_by;

-- Create the first Runtime Location

------------------------------------------------------------------------------------------
-- From what I can tell we are only creating one location right now so I dumbed this down.
-- The original used a loop and I removed it. 
------------------------------------------------------------------------------------------

  call entity.crud_location_create(
			create_locationownerentityuuid := create_customer_uuid, 
			create_locationparententityuuid := create_site_uuid, 
			create_locationcornerstoneentityuuid := null,  
			create_locationcornerstoneorder := null, 
			create_locationtaguuid := null, 
			create_locationtag := 'Runtime Location', 
			create_locationname := 'My First Location', 
			create_locationdisplayname := 'My First Location',
			create_locationscanid := null, 
			create_locationtimezone := timezone, 
			create_languagetypeuuid := create_language_type_uuid, 
			create_locationexternalid := null, 
			create_locationexternalsystemuuid := null, 
			create_locationlatitude := null, 
			create_locationlongitude := null, 
			create_locationradius := null, 
			create_locationdeleted := null, 
			create_locationdraft := null, 
			create_locationentityuuid := create_locationentityuuid, 
			create_modifiedbyid := modified_by
	);

-- Create the first runtime template.
-- FUTURE:  Eventually we need to modify this to point to the entity model --

  select t.id into ins_template
  from legacy0.create_task_t(
      customer_id := create_original_customer_uuid,
      language_type := temp_language_type,
      task_name := 'Run',
      task_parent_id := create_original_site_uuid,
      modified_by := modified_by
  ) as t;

	--

	if ins_template isnull 
  	then raise exception 'failed to create template';
  end if;

-- Set the Runtime Template Type
-- FUTURE:  Eventually we need to modify this to point to the entity model 

	-- NOTE: I'm not exactly sure _why_ this happens but previously we were doing
	-- something like this:
	--   select t.id into template_type_id
	-- and we noticed that only the Runtime template type was being created. I
	-- *think* this is because the query planner sees that the `into` target is
	-- singular and so implicitly `LIMIT`s the query accordingly.
	select count(*) into ins_template_type_n
	from
		public.systag as s,
		legacy0.create_template_type(
			template_id := ins_template,
			systag_id := s.systaguuid,
			modified_by := modified_by
		) as t
	where s.systagparentid = 882 and s.systagtype in ('Trackable', 'Runtime')
  ;
  --
  if ins_template_type_n != 2
      then raise exception 'failed to create template types for root template';
  end if;

-- Setup the Template Fields
-- FUTURE:  Do we need an override by?  It is how we do timeclock. --

    create temp table field (f_name, f_type, f_is_primary, f_order) as (
        values
            ('Override Start Time'::text, 'Date'::text, true::boolean, 0::integer),
            ('Override End Time', 'Date', true, 1),
            ('Run Output', 'Number', false, 2),
            ('Reject Count', 'Number', false, 3),
            ('Comments', 'String', false, 99)
    );
	
    perform '  +field', t.id
    from
        field,
        legacy0.create_field_t(
            customer_id := create_original_customer_uuid,
            language_type := temp_language_type,
            template_id := ins_template,
            field_description := null,
            field_is_draft := false,
            field_is_primary := field.f_is_primary,
            field_is_required := false,
            field_name := field.f_name,
            field_order := field.f_order,
            field_reference_type := null,
            field_type := field.f_type,
            field_value := null,
            field_widget := null,
            modified_by := modified_by
        ) as t
  ;

   drop table field;
  --

  if (select count(*) from workresult 
		where workresultworktemplateid in (select worktemplateid 
											from worktemplate 
											where id = ins_template)) = 0
  	then raise exception 'failed to create template fields';
  end if;

  -- The canonical respawn rule.
  -- This rule tells the engine to create an open Runtime instance whenever an existing instance moves to InProgress.
  -- Note that there are two modes of instantiation under the legacy model (i.e. worktemplatenexttemplate): eager and lazy.
  -- The mode of instantiation is driven by worktemplatenexttemplatenexttypeid, which is a foreign key to systag.
  -- A next type of 'On Demand' indicates lazy instantiation and, practically speaking, allows the _end user_ (e.g. the mobile app)
  -- to explicitly request what to instantiate (if they do not so choose, nothing will be instantiated).
  -- Conversely, any other next type (e.g. Task, Audit, Remediation) implies eager instantiation and will result in
  -- automatic instantiation (by the engine) when the given rule is satisfied (i.e. it satisfies the status constraint
  -- (worktemplatenexttemplateviastatuschangeid) and/or the result constraint (worktemplatenexttemplateviaworkresultid)).
  --
  -- Note that we are still going to do this until the newer Runtime app build
  -- is live! This is to maintain backwards compatibility. Once it is, this can
  -- be removed in favor of lazy instantiation.
  --
  perform '  +irule', t.next
  from legacy0.create_instantiation_rule(
      prev_template_id := ins_template,
      next_template_id := ins_template,
      state_condition := 'In Progress',
      type_tag := 'Task', -- Eager instantiation := driven by the engine
      modified_by := modified_by
  ) as t;
  --
  if not found then
    raise exception 'failed to create canonical on-demand in-progress irule';
  end if;

  -----------------------------------------------------------------------
  -- Create the constraint for the root template at each child location.
  -- Dumbed this down since there is only one.
  -- FUTURE: From what I can tell we are only creating one right now.  
  -- FUTURE: Fix Subfunctions to use entity.  SHORT TERM: look up from entity locationid and pass it in  

       create temp table ins_constraint as 
               select *
               from legacy0.create_template_constraint_on_location(
                   template_id := ins_template,
                   location_id := ( select locationuuid
				   					from entity.crud_location_read_min(
									   read_locationownerentityuuid := create_customer_uuid, 
									   read_locationentityuuid := create_locationentityuuid, 
									   read_locationparententityuuid := null, 
									   read_locationcornerstoneentityuuid := null, 
									   read_alllocations := false, 
									   read_locationtag := null, 
									   read_locationsenddeleted := null, 
									   read_locationsenddrafts := null, 
									   read_locationsendinactive := null, 
									   read_languagetranslationtypeentityuuid := create_language_type_uuid
									)),
                   modified_by := modified_by
               ) as t
           ;

  -- Note that this will eventually get removed as part of the lazy
  -- instantiation merge (once the newer Runtime app build is live). Under the
  -- newer model, pre-creation of On Demand instances is no longer required.
  create temp table ins_instance as 
    select *
    from engine0.instantiate(
      template_id := ins_template,
      location_id := (
        select locationuuid
        from entity.crud_location_read_min(
          read_locationownerentityuuid := create_customer_uuid, 
          read_locationentityuuid := create_locationentityuuid, 
          read_locationparententityuuid := null, 
          read_locationcornerstoneentityuuid := null, 
          read_alllocations := false, 
          read_locationtag := null, 
          read_locationsenddeleted := null, 
          read_locationsenddrafts := null, 
          read_locationsendinactive := null, 
          read_languagetranslationtypeentityuuid := create_language_type_uuid
        )
      ),
      target_state := 'Open',
      target_type := 'Task',
      modified_by := modified_by
    )
  ;

  perform '  +constraint', t.id
  from ins_constraint as t
  union all
  (
    select '   +instance', t.instance
    from ins_instance as t
    group by t.instance
  )
  ;
  --
  if not found then
    raise exception 'failed to create location constraint/initial instance';
  end if;

   drop table ins_constraint;
   drop table ins_instance;
-------------------------------------------------------------------------------------------------
  -- Create the Idle Time template, which is a transition from Runtime.
  -- Note that, under Runtime, Idle is a _choice_. When Runtime is active, the user may _choose_ to
  -- transition into Idle by explicitly choosing it from the list (e.g. clicking the button in the
  -- mobile app). This is the (practical) difference between eager and lazy instantiation.
  -- Lazy instantiations are driven by the user while eager instantiations are automatic (i.e. driven by the engine).

    create temp table field (f_name, f_type, f_is_primary, f_order) as (
            values
                ('Override Start Time'::text, 'Date'::text, true::boolean, 0::integer),
                ('Override End Time', 'Date', true, 1),
                ('Description', 'String', false, 2),
				('Reason Code', 'String', false, 3)
        );

     create temp table ins_next as 
            select t.*
            from legacy0.create_task_t(
                customer_id := create_original_customer_uuid,
                language_type := temp_language_type,
                task_name := 'Idle Time',
                task_parent_id := create_original_site_uuid,
                task_order := 1,
                modified_by := modified_by
            ) as t
        ;

	
       create temp table ins_type as (
            select t.*
            from ins_next, public.systag as s
            cross join lateral legacy0.create_template_type(
                template_id := ins_next.id,
                systag_id := s.systaguuid,
                modified_by := modified_by
            ) as t
            where s.systagtype = 'Idle Time'
        );

        create temp table ins_field as (
            select t.*
            from field, ins_next
            cross join
                lateral legacy0.create_field_t(
                    customer_id := create_original_customer_uuid,
                    language_type := temp_language_type,
                    template_id := ins_next.id,
                    field_description := null,
                    field_is_draft := false,
                    field_is_primary := field.f_is_primary,
                    field_is_required := false,
                    field_name := field.f_name,
                    field_order := field.f_order,
                    field_reference_type := null,
                    field_type := field.f_type,
                    field_value := null,
                    field_widget := null,
                    modified_by := modified_by
                ) as t
        );

        create temp table ins_nt_rule as (		
            select t.*
            from ins_next
            cross join
                lateral legacy0.create_instantiation_rule(
                    prev_template_id := ins_template,
                    next_template_id := ins_next.id,
                    state_condition := 'In Progress',
                    type_tag := 'On Demand', -- Lazy instantiation (read the comments above)
                    modified_by := modified_by
                ) as t
        );

-- replaced with this which matches what is working for main template.
       create temp table ins_constraint as 
               select *
               from legacy0.create_template_constraint_on_location(
                   template_id := (select id from ins_next),
                   location_id := ( select locationuuid
				   					from entity.crud_location_read_min(
									   read_locationownerentityuuid := create_customer_uuid, 
									   read_locationentityuuid := create_locationentityuuid, 
									   read_locationparententityuuid := null, 
									   read_locationcornerstoneentityuuid := null, 
									   read_alllocations := false, 
									   read_locationtag := null, 
									   read_locationsenddeleted := null, 
									   read_locationsenddrafts := null, 
									   read_locationsendinactive := null, 
									   read_languagetranslationtypeentityuuid := create_language_type_uuid
									)),
                   modified_by := modified_by
               ) as t
           ;

        perform '  +next', ins_nt_rule.next
        from ins_nt_rule
        union all
        select '   +type', ins_type.id
        from ins_type
        union all
        select '   +field', ins_field.id
        from ins_field
        union all
        select '   +constraint', ins_constraint.id
        from ins_constraint
  ;
  --
  if not found then
    raise exception 'failed to create next template (Idle Time)';
  end if;
   
   drop table field;
   drop table ins_next;
   drop table ins_type;
   drop table ins_field;
   drop table ins_nt_rule;
   drop table ins_constraint;

  -- Create the Downtime template, which is a transition from Runtime.
  -- Note that, under Runtime, Idle is a _choice_. When Runtime is active, the user may _choose_ to
  -- transition into Down by explicitly choosing it from the list (e.g. clicking the button in the
  -- mobile app). This is the (practical) difference between eager and lazy instantiation.
  -- Lazy instantiations are driven by the user while eager instantiations are automatic (i.e. driven by the engine).

    create temp table field (f_name, f_type, f_is_primary, f_order) as (
            values
                ('Override Start Time'::text, 'Date'::text, true::boolean, 0::integer),
                ('Override End Time', 'Date', true, 1),
                ('Description', 'String', false, 2),
				('Reason Code', 'String', false, 3)
        );

        create temp table ins_next as (
            select t.*
            from legacy0.create_task_t(
                customer_id := create_original_customer_uuid,
                language_type := temp_language_type,
                task_name := 'Downtime',
                task_parent_id := create_original_site_uuid,
                task_order := 0,
                modified_by := modified_by
            ) as t
        );

        create temp table ins_type as (
            select t.*
            from ins_next, public.systag as s
            cross join lateral legacy0.create_template_type(
                template_id := ins_next.id,
                systag_id := s.systaguuid,
                modified_by := modified_by
            ) as t
            where s.systagtype = 'Downtime'
        );

        create temp table ins_field as (
            select t.*
            from field, ins_next
            cross join
                lateral legacy0.create_field_t(
                    customer_id := create_original_customer_uuid,
                    language_type := temp_language_type,
                    template_id := ins_next.id,
                    field_description := null,
                    field_is_draft := false,
                    field_is_primary := field.f_is_primary,
                    field_is_required := false,
                    field_name := field.f_name,
                    field_order := field.f_order,
                    field_reference_type := null,
                    field_type := field.f_type,
                    field_value := null,
                    field_widget := null,
                    modified_by := modified_by
                ) as t
        );

        create temp table ins_nt_rule as (
            select t.*
            from ins_next
            cross join
                lateral legacy0.create_instantiation_rule(
                    prev_template_id := ins_template,
                    next_template_id := ins_next.id,
                    state_condition := 'In Progress',
                    type_tag := 'On Demand', -- Lazy instantiation (read the comments above)
                    modified_by := modified_by
                ) as t
        );

-- replaced with this which matches what is working for main template.
       create temp table ins_constraint as 
               select *
               from legacy0.create_template_constraint_on_location(
                   template_id := (select id from ins_next),
                   location_id := ( select locationuuid
				   					from entity.crud_location_read_min(
									   read_locationownerentityuuid := create_customer_uuid, 
									   read_locationentityuuid := create_locationentityuuid, 
									   read_locationparententityuuid := null, 
									   read_locationcornerstoneentityuuid := null, 
									   read_alllocations := false, 
									   read_locationtag := null, 
									   read_locationsenddeleted := null, 
									   read_locationsenddrafts := null, 
									   read_locationsendinactive := null, 
									   read_languagetranslationtypeentityuuid := create_language_type_uuid
									)),
                   modified_by := modified_by
               ) as t
           ;

        perform '  +next', ins_nt_rule.next
        from ins_nt_rule
        union all
        select '   +type', ins_type.id
        from ins_type
        union all
        select '   +field', ins_field.id
        from ins_field
        union all
        select '   +constraint', ins_constraint.id
        from ins_constraint
  ;
  --
  if not found then
    raise exception 'failed to create next template (Downtime)';
  end if;

   drop table field;
   drop table ins_next;
   drop table ins_type;
   drop table ins_field;
   drop table ins_nt_rule;
   drop table ins_constraint;

  -- Create the Batch template. This is really all we need to do for Batch at
  -- the moment, since it is explicitly NOT on-demand and we don't have any
  -- transition rules yet.
  select t.id into ins_template
  from legacy0.create_task_t(
      customer_id := create_original_customer_uuid,
      language_type := temp_language_type,
      task_name := 'Batch',
      task_parent_id := create_original_site_uuid,
      -- In practice, the implication of this setting is that Batches must
      -- explicitly be created (i.e. instantiated) in order to work on them.
      task_supports_lazy_instantiation := false,
      modified_by := modified_by
  ) as t;
  --
  if not found then
    raise exception 'failed to create Batch template';
  end if;
  --
	select count(*) into ins_template_type_n
	from
		public.systag as s,
		legacy0.create_template_type(
			template_id := ins_template,
			systag_id := s.systaguuid,
			modified_by := modified_by
		) as t
	where s.systagparentid = 882 and s.systagtype in ('Batch');
  --
  if ins_template_type_n != 1 then
    raise exception 'failed to create Batch template type';
  end if;
  --
  perform *
  from
    (
      values
        ('Customer'::text, 'String'::text, false::boolean, 0::integer),
        ('Product Name', 'String', false, 1),
        ('SKU', 'String', false, 2)
    ) as field (f_name, f_type, f_is_primary, f_order),
    legacy0.create_field_t(
        customer_id := create_original_customer_uuid,
        language_type := temp_language_type,
        template_id := ins_template,
        field_description := null,
        field_is_draft := false,
        field_is_primary := field.f_is_primary,
        field_is_required := false,
        field_name := field.f_name,
        field_order := field.f_order,
        field_reference_type := null,
        field_type := field.f_type,
        field_value := null,
        field_widget := null,
        modified_by := modified_by
    ) as t
  ;
  --
  if not found then -- TODO: better validation here.
    raise exception 'failed to create Batch template fields';
  end if;

  select uuid
  into runtime_config_template_uuid
  from public.crud_customer_config_templates_list(20)
  where category = 'Applications'
  and type = 'Runtime';

  call public.crud_customer_config_create(
      customer_uuid := create_original_customer_uuid,
      site_uuid := create_original_site_uuid,
      config_template_uuid := runtime_config_template_uuid,
      config_value := 'true'::text,
      modified_by := null,
      config_id := runtime_config_uuid
  );

  return;

end
$procedure$;


REVOKE ALL ON PROCEDURE entity.enable_runtime(uuid,text,uuid,text,uuid,text,bigint,text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.enable_runtime(uuid,text,uuid,text,uuid,text,bigint,text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.enable_runtime(uuid,text,uuid,text,uuid,text,bigint,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.enable_runtime(uuid,text,uuid,text,uuid,text,bigint,text) TO graphql;

-- Type: PROCEDURE ; Name: entity.enable_timesheet(uuid,text,uuid,text,uuid,text,text,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.enable_timesheet(IN create_customer_uuid uuid, IN create_original_customer_uuid text, IN create_site_uuid uuid, IN create_original_site_uuid text, IN create_language_type_uuid uuid, IN create_original_language_type_uuid text, IN create_timezone text, IN create_modifiedby bigint)
 LANGUAGE plpgsql
AS $procedure$
Declare

-- Customer temp values
    tempcustomerid bigint;    
	
-- Site/Location temp values
    tempcustagsitetypeid bigint;
	tempcustagsitetypeuuid uuid;
    tempsiteid bigint;
	temptaguuid uuid;
	tempcustaguuid text;
-- template, instance and result
    tempworktemplateid bigint;
    tempworktemplateuuid text;
    tempworkfrequencyid bigint;
    tempworkresultid bigint;
    tempworkresultidforworker bigint;
    tempworkinstanceid bigint;
-- General temp values
    templanguagemasterid bigint;
    template_description_id bigint;
	tempcreate_modifiedby_uud text;
	modified_by_uuid text;
-- timeclock
    timeclock_config_template_uuid text;
    timeclock_config_uuid          text;
    timeclock_enabled              text;
-- language uuids
  	englishentityuuid uuid;
	englishoriginaluuid text;
	temp_language_type text;
	languageuuid uuid;
	tendreluuid uuid;
	temp_language_type_id bigint;

/*

-- Custoemr temp values
    tempcustomerid                 bigint;
-- Site/Location temp valules
    tempcustagsitetypeid           bigint;
    tempcustagsitetypeuuid         text;
    tempsiteid                     bigint;
    tempsiteuuid                   text;
-- template, instance and result
    tempworktemplateid             bigint;
    tempworktemplateuuid           text;
    tempworkfrequencyid            bigint;
    tempworkresultid               bigint;
    tempworkresultidforworker      bigint;
    tempworkinstanceid             bigint;
-- General temp values
    templanguagemasterid           bigint;
    templocationtimezone           text;

*/

Begin

-----------------------------------------------------------------
-- Start setting the missing values
-- grab originaluuids or entityuuids depending on what was sent in
-------------------------------------------------------------------

-- setup language variables.  If there is no language type sent in default to english.  
-- Set these as variables just incast the uuids change in the future.

	tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
	languageuuid = '580f6ee2-42ca-4a5b-9e18-9ea0c168845a';
 	englishentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	englishoriginaluuid = '7ebd10ee-5018-4e11-9525-80ab5c6aebee';

	if create_language_type_uuid isNull
		then  select systagentityuuid ,systagdisplayname, systagid
				into create_language_type_uuid,temp_language_type, temp_language_type_id
				from entity.crud_systag_read_full(tendreluuid,null,null, languageuuid, false,null,null, null,englishentityuuid)
				where systaguuid = create_original_language_type_uuid
				;
	end if;

	if create_original_language_type_uuid isNull
		then  select systaguuid ,systagdisplayname, systagid
				into create_original_language_type_uuid,temp_language_type, temp_language_type_id
				from entity.crud_systag_read_full(tendreluuid,null,null, languageuuid, false,null,null, null,englishentityuuid)
				where systagentityuuid = create_language_type_uuid				
				;
	end if;

-- if language type is still null then set it to the default.

	if create_language_type_uuid isNull or create_original_language_type_uuid isNull
		then create_language_type_uuid = englishentityuuid;
			create_original_language_type_uuid = englishoriginaluuid;
			temp_language_type_id = 20;
			temp_language_type = 'en';
	end if;

-- setup customer variables

	if create_customer_uuid isNull
		then select customerentityuuid, customerid
				into create_customer_uuid,tempcustomerid
				from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)
				where customeruuid = create_original_customer_uuid;
	end if;

	if create_original_customer_uuid isNull
		then select customeruuid, customerid
				into create_original_customer_uuid,tempcustomerid		
				from entity.crud_customer_read_min(null,null, null, true, null,null,null,null)
				where customerentityuuid = create_customer_uuid;
	end if;

	if create_customer_uuid isNull or create_original_customer_uuid isNull or tempcustomerid isNull
		then  raise exception 'No owner entity found';
	end if;

-- setup site variables

	if create_site_uuid isNull
		then select locationentityuuid, locationid
				into create_original_site_uuid,tempsiteid	 
				from entity.crud_location_read_min(create_customer_uuid,null,null,null,true,null,null,null,null,null)
				where locationid = create_original_site_uuid;
	end if;

	if create_original_site_uuid isNull
		then select locationuuid, locationid
				into create_original_site_uuid,tempsiteid	
				from entity.crud_location_read_min(create_customer_uuid,null,null,null,true,null,null,null,null,null)
				where locationentityuuid = create_site_uuid;
	end if;

	if create_site_uuid isNull or create_original_site_uuid isNull or tempsiteid isNull
		then  raise exception 'No site entity found';
	end if;

-- find and add the site location category to the template

		select  locationtagentityuuid
		into temptaguuid
		from entity.crud_location_read_min(create_customer_uuid,create_site_uuid,null,null,false,null,null,null,null,englishentityuuid);

		select custagid, custaguuid 
		into tempcustagsitetypeid, tempcustaguuid
		from entity.crud_custag_read_min(create_customer_uuid, null, temptaguuid, null, false,null,null, null,englishentityuuid);

    -- first, return if timesheet is already set up for this customer
    select value
    into timeclock_enabled
    from public.crud_customer_config_list(customer_uuid_param := create_original_customer_uuid, language_id := 20)
    where category = 'Applications'
      and type = 'Timeclock'
      and value = 'true';

    -- TODO: bolster this handling a little better
    -- need to account for customers turning on/off their features
    -- eventually maybe check if the templates are there?
    if timeclock_enabled notnull
    then
        RAISE NOTICE 'Timeclock already enabled for this customer';
        return;
    End if;

    RAISE NOTICE 'Start of procedure';
    modified_by_uuid = (select workerinstanceuuid from workerinstance w where workerinstanceid = create_modifiedby);

    if modified_by_uuid is null
    then
        RAISE NOTICE 'Unable to find modified by worker';
        return;
    End if;

/*
    -- find customer
    tempcustomerid = (select customerid from customer c where customeruuid = customer_uuid);

    if tempcustomerid is null
    then
        RAISE NOTICE 'Unable to find customer id';
        return;
    End if;

    -- find site
    select locationid, locationcategoryid, locationuuid, custaguuid, locationtimezone
    into tempsiteid, tempcustagsitetypeid, tempsiteuuid, tempcustagsitetypeuuid, templocationtimezone
    from location l
             left join custag c on l.locationcategoryid = c.custagid
    where locationuuid = site_uuid
      and locationcustomerid = tempcustomerid;

    if tempsiteid is null
    then
        RAISE NOTICE 'Unable to find site id';
        return;
    End if;
*/

-- Add in Clock In/Out with entry location type
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Clock In/Out',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.worktemplate(worktemplatecustomerid,
                                    worktemplatesiteid,
                                    worktemplatenameid,
                                    worktemplateneedstranslation,
                                    worktemplateallowondemand,
                                    worktemplateworkfrequencyid,
                                    worktemplatemodifiedby,
                                    worktemplatelocationtypeid)
    values (tempcustomerid,
            tempsiteid,
            templanguagemasterid,
            FALSE,
            TRUE,
            1, -- this is placeholder for the frequencyid we are about to create
            create_modifiedby,
            tempcustagsitetypeid)
    Returning worktemplateid,id into tempworktemplateid, tempworktemplateuuid;

    RAISE NOTICE 'inserted part thru template';

-- Add in the workfrequency for the template

    INSERT INTO public.workfrequency(workfrequencyworktemplateid,
                                     workfrequencycustomerid,
                                     workfrequencytypeid,
                                     workfrequencyvalue,
                                     workfrequencystartdate,
                                     workfrequencymodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            740,
            1,
            clock_timestamp(),
            create_modifiedby)
    Returning workfrequencyid into tempworkfrequencyid;

    RAISE NOTICE 'inserted frequency';

    update worktemplate w
    set worktemplateworkfrequencyid = tempworkfrequencyid
    where worktemplateid = tempworktemplateid;

-- add the contraints
    INSERT INTO worktemplateconstraint (worktemplateconstraintcustomerid,
                                        worktemplateconstraintcustomeruuid,
                                        worktemplateconstrainttemplateid,
                                        worktemplateconstraintconstraintid, -- Location Type in custag
                                        worktemplateconstraintconstrainedtypeid, -- Constraint type in systag
                                        worktemplateconstraintmodifiedby)
    values (tempcustomerid,
            create_original_customer_uuid,
            tempworktemplateuuid,
            tempcustaguuid,
            'd8dfd8de-ffdc-4472-8d38-171351668e9d',
            create_modifiedby);

    RAISE NOTICE 'first constraint';
-- Next template for in progress

    INSERT INTO public.worktemplatenexttemplate(worktemplatenexttemplateprevioustemplateid,
                                                worktemplatenexttemplatenexttemplateid,
                                                worktemplatenexttemplatecustomerid,
                                                worktemplatenexttemplateviastatuschange,
                                                worktemplatenexttemplateviastatuschangeid,
                                                worktemplatenexttemplatesiteid,
                                                worktemplatenexttemplatetypeid,
                                                worktemplatenexttemplatemodifiedby)
    values (tempworktemplateid,
            tempworktemplateid,
            tempcustomerid,
            TRUE,
            707,
            tempsiteid,
            811,
            create_modifiedby);

-- set tiny tendies types

    insert into worktemplatetype as w
    (worktemplatetypeworktemplateuuid,
     worktemplatetypesystaguuid,
     worktemplatetypeworktemplateid,
     worktemplatetypesystagid,
     worktemplatetypecustomerid,
     worktemplatetypecustomeruuid)
    values (tempworktemplateuuid,
            'b2af4084-1f19-4e25-9890-db003ba7a4c3',
            tempworktemplateid,
            883,
            tempcustomerid,
            create_original_customer_uuid);

    RAISE NOTICE 'inserted template';
    -- Add in workresults here
--Time At Task

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresultsiteid,
                                  workresultfortask,
                                  workresultforaudit,
                                  workresulttypeid,
                                  workresultlanguagemasterid,
                                  workresultorder,
                                  workresultisvisible,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            tempsiteid,
            TRUE,
            FALSE,
            737,
            4367,
            0,
            FALSE,
            create_modifiedby);

--Worker
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Worker',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            1,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            850,
            FALSE,
            create_modifiedby);

--Start Location
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Start Location',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            2,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            852,
            FALSE,
            create_modifiedby);

--End Location
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'End Location',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            3,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            852,
            FALSE,
            create_modifiedby);

--Start Override
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Start Override',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            868,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            4,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            null,
            FALSE,
            create_modifiedby);

--End Override
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'End Override',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            868,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            5,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            null,
            FALSE,
            create_modifiedby);

--Override By
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Override By',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            6,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            850,
            FALSE,
            create_modifiedby);

--Location
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Location',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            996,
            FALSE,
            FALSE,
            FALSE,
            FALSE,
            TRUE,
            852,
            TRUE,
            create_modifiedby)
    Returning workresultid into tempworkresultid;

--Worker
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Worker',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            997,
            FALSE,
            FALSE,
            FALSE,
            FALSE,
            TRUE,
            850,
            TRUE,
            create_modifiedby)
    returning workresultid into tempworkresultidforworker;

    -- Add in instances
-- timesheet only has ondemand

    INSERT INTO public.workinstance(workinstancecustomerid,
                                    workinstanceworktemplateid,
                                    workinstancesiteid,
                                    workinstancetypeid,
                                    workinstancestatusid,
                                    workinstancetargetstartdate,
                                    workinstancetimezone,
                                    workinstancerefid, -- put location here to start
                                    workinstancemodifiedby)
    values (tempcustomerid,
            tempworktemplateid,
            tempsiteid,
            811, -- this is the work type for task.
            706, -- this is the status for Open.
            clock_timestamp(),
            create_timezone,
            tempsiteid,
            create_modifiedby)
    Returning workinstanceid into tempworkinstanceid;

    update workinstance
    set workinstanceoriginatorworkinstanceid = workinstanceid
    where workinstancecustomerid = tempcustomerid
      and workinstanceoriginatorworkinstanceid isNull;

-- Insert for tasks
    INSERT INTO public.workresultinstance(workresultinstanceworkinstanceid,
                                          workresultinstancecustomerid,
                                          workresultinstanceworkresultid,
                                          workresultinstancemodifiedby,
                                          workresultinstancevalue)
    values (tempworkinstanceid,
            tempcustomerid,
            tempworkresultid,
            create_modifiedby,
            tempsiteid);

    INSERT INTO public.workresultinstance(workresultinstanceworkinstanceid,
                                          workresultinstancecustomerid,
                                          workresultinstanceworkresultid,
                                          workresultinstancemodifiedby,
                                          workresultinstancevalue)
    values (tempworkinstanceid,
            tempcustomerid,
            tempworkresultidforworker,
            create_modifiedby,
            null);

-- Add in Break In/Out with entry location type

    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Break In/Out',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.worktemplate(worktemplatecustomerid,
                                    worktemplatesiteid,
                                    worktemplatenameid,
                                    worktemplateneedstranslation,
                                    worktemplateallowondemand,
                                    worktemplateworkfrequencyid,
                                    worktemplatemodifiedby,
                                    worktemplatelocationtypeid)
    values (tempcustomerid,
            tempsiteid,
            templanguagemasterid,
            FALSE,
            TRUE,
            1, -- this is placeholder for the frequencyid we are about to create
            create_modifiedby,
            tempcustagsitetypeid)
    Returning worktemplateid,id into tempworktemplateid, tempworktemplateuuid;

    RAISE NOTICE 'inserted break in/out template';

-- Add in the workfrequency for the template

    INSERT INTO public.workfrequency(workfrequencyworktemplateid,
                                     workfrequencycustomerid,
                                     workfrequencytypeid,
                                     workfrequencyvalue,
                                     workfrequencystartdate,
                                     workfrequencymodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            740,
            1,
            clock_timestamp(),
            create_modifiedby)
    Returning workfrequencyid into tempworkfrequencyid;

    update worktemplate w
    set worktemplateworkfrequencyid = tempworkfrequencyid
    where worktemplateid = tempworktemplateid;

-- add the contraints

    INSERT INTO worktemplateconstraint (worktemplateconstraintcustomerid,
                                        worktemplateconstraintcustomeruuid,
                                        worktemplateconstrainttemplateid,
                                        worktemplateconstraintconstraintid, -- 'Row'
                                        worktemplateconstraintconstrainedtypeid, -- Location
                                        worktemplateconstraintmodifiedby)
    values (tempcustomerid,
            create_original_customer_uuid,
            tempworktemplateuuid,
            tempcustaguuid,
            'd8dfd8de-ffdc-4472-8d38-171351668e9d',
            create_modifiedby);
    RAISE NOTICE 'added second constraint';
-- Next template for in progress

    INSERT INTO public.worktemplatenexttemplate(worktemplatenexttemplateprevioustemplateid,
                                                worktemplatenexttemplatenexttemplateid,
                                                worktemplatenexttemplatecustomerid,
                                                worktemplatenexttemplateviastatuschange,
                                                worktemplatenexttemplateviastatuschangeid,
                                                worktemplatenexttemplatesiteid,
                                                worktemplatenexttemplatetypeid,
                                                worktemplatenexttemplatemodifiedby)
    values (tempworktemplateid,
            tempworktemplateid,
            tempcustomerid,
            TRUE,
            707,
            tempsiteid,
            811,
            create_modifiedby);

-- set tiny tendies types

    insert into worktemplatetype as w
    (worktemplatetypeworktemplateuuid,
     worktemplatetypesystaguuid,
     worktemplatetypeworktemplateid,
     worktemplatetypesystagid,
     worktemplatetypecustomerid,
     worktemplatetypecustomeruuid)
    values (tempworktemplateuuid,
            'b6efaf15-2818-4e1d-bcc9-26d171496d8d',
            tempworktemplateid,
            884,
            tempcustomerid,
            create_original_customer_uuid);

    -- Add in workresults here
--Time At Task

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresultsiteid,
                                  workresultfortask,
                                  workresultforaudit,
                                  workresulttypeid,
                                  workresultlanguagemasterid,
                                  workresultorder,
                                  workresultisvisible,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            tempsiteid,
            TRUE,
            FALSE,
            737,
            4367,
            0,
            FALSE,
            create_modifiedby);

--Worker
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Worker',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            1,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            850,
            FALSE,
            create_modifiedby);

--Start Location
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Start Location',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            2,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            852,
            FALSE,
            create_modifiedby);

--End Location
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'End Location',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            3,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            852,
            FALSE,
            create_modifiedby);

--Start Override
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Start Override',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            868,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            4,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            null,
            FALSE,
            create_modifiedby);

--End Override
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'End Override',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            868,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            5,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            null,
            FALSE,
            create_modifiedby);

--Override By
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Override By',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            6,
            FALSE,
            TRUE,
            TRUE,
            FALSE,
            TRUE,
            850,
            FALSE,
            create_modifiedby);

--Location
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Location',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            996,
            FALSE,
            FALSE,
            FALSE,
            FALSE,
            TRUE,
            852,
            TRUE,
            create_modifiedby)
    Returning workresultid into tempworkresultid;

--Worker
    insert into public.languagemaster
    (languagemastercustomerid,
     languagemastercustomersiteid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
     languagemastermodifiedby)
    values (tempcustomerid,
            tempsiteid,
            20,
            'Worker',
            create_modifiedby)
    Returning languagemasterid into templanguagemasterid;

    INSERT INTO public.workresult(workresultworktemplateid,
                                  workresultcustomerid,
                                  workresulttypeid,
                                  workresultforaudit,
                                  workresultstartdate,
                                  workresultlanguagemasterid,
                                  workresultsiteid,
                                  workresultorder,
                                  workresultiscalculated,
                                  workresultiseditable,
                                  workresultisvisible,
                                  workresultisrequired,
                                  workresultfortask,
                                  workresultentitytypeid,
                                  workresultisprimary,
                                  workresultmodifiedby)
    values (tempworktemplateid,
            tempcustomerid,
            848,
            false,
            clock_timestamp(),
            templanguagemasterid,
            tempsiteid,
            997,
            FALSE,
            FALSE,
            FALSE,
            FALSE,
            TRUE,
            850,
            TRUE,
            create_modifiedby)
    returning workresultid into tempworkresultidforworker;

    RAISE NOTICE 'inserted results';
    -- Add in instances
-- timesheet only has ondemand

    INSERT INTO public.workinstance(workinstancecustomerid,
                                    workinstanceworktemplateid,
                                    workinstancesiteid,
                                    workinstancetypeid,
                                    workinstancestatusid,
                                    workinstancetargetstartdate,
                                    workinstancetimezone,
                                    workinstancerefid, -- put location here to start
                                    workinstancemodifiedby)
    values (tempcustomerid,
            tempworktemplateid,
            tempsiteid,
            811, -- this is the work type for task.
            706, -- this is the status for Open.
            clock_timestamp(),
            create_timezone,
            tempsiteid,
            create_modifiedby)
    Returning workinstanceid into tempworkinstanceid;

    update workinstance
    set workinstanceoriginatorworkinstanceid = workinstanceid
    where workinstancecustomerid = tempcustomerid
      and workinstanceoriginatorworkinstanceid isNull;

-- Insert for tasks
    INSERT INTO public.workresultinstance(workresultinstanceworkinstanceid,
                                          workresultinstancecustomerid,
                                          workresultinstanceworkresultid,
                                          workresultinstancemodifiedby,
                                          workresultinstancevalue)
    values (tempworkinstanceid,
            tempcustomerid,
            tempworkresultid,
            create_modifiedby,
            tempsiteid);

    INSERT INTO public.workresultinstance(workresultinstanceworkinstanceid,
                                          workresultinstancecustomerid,
                                          workresultinstanceworkresultid,
                                          workresultinstancemodifiedby,
                                          workresultinstancevalue)
    values (tempworkinstanceid,
            tempcustomerid,
            tempworkresultidforworker,
            create_modifiedby,
            null);

    RAISE NOTICE 'inserted work instances';
    -- Cleanup widget and format
-- Number
    update workresult
    set workresultwidgetid     = 407,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 701
      and workresultwidgetid is null;

-- Clicker
    update workresult
    set workresultwidgetid     = 406,
        workresulttypeid       = 701,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 700
      and workresultwidgetid is null;

-- boolean
    update workresult
    set workresultwidgetid     = 414,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 754
      and workresultwidgetid is null;

-- tat
    update workresult
    set workresultwidgetid     = 413,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 737
      and workresultwidgetid is null;

--Text
    update workresult
    set workresultwidgetid     = 408,
        workresulttypeid       = 771,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 702
      and workresultwidgetid is null;

--Sentiment
    update workresult
    set workresultwidgetid     = 410,
        workresulttypeid       = 701,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 704
      and workresultwidgetid is null;

--String
    update workresult
    set workresultwidgetid     = 412,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 771
      and workresultwidgetid is null;

-- entity
    update workresult
    set workresultwidgetid     = 415,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 848
      and workresultwidgetid is null;

-- date
    update workresult
    set workresultwidgetid     = 419,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 868
      and workresultwidgetid is null;

-- Geolocation
    update workresult
    set workresultwidgetid     = 463,
        workresulttypeid       = 771,
        workresultmodifieddate = clock_timestamp()
    where workresulttypeid = 890
      and workresultwidgetid is null;

-- Add in customerconfigs
    select uuid
    into timeclock_config_template_uuid
    from public.crud_customer_config_templates_list(20)
    where category = 'Applications'
      and type = 'Timeclock';

    -- get uuids
    call public.crud_customer_config_create(customer_uuid := create_original_customer_uuid, site_uuid := create_original_site_uuid,
                                            config_template_uuid := timeclock_config_template_uuid,
                                            config_value := 'false', modified_by := modified_by_uuid,
                                            config_id := timeclock_config_uuid);

    

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.enable_timesheet(uuid,text,uuid,text,uuid,text,text,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.enable_timesheet(uuid,text,uuid,text,uuid,text,text,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.enable_timesheet(uuid,text,uuid,text,uuid,text,text,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.enable_timesheet(uuid,text,uuid,text,uuid,text,text,bigint) TO graphql;

-- Type: FUNCTION ; Name: entity.func_dim_languagetranslation_read_min(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_dim_languagetranslation_read_min(read_dim_dimcustomeruuid uuid, read_dim_dimlanguagetranslationtypeuuid uuid)
 RETURNS TABLE(dim_dimlanguatetypeid text, dim_languagetypeid bigint, dim_languagetypeshortname text, dim_languagetypelongname text, dim_languagetranslationtypeid bigint, dim_languagetypecreateddate timestamp with time zone, dim_languagetypemodifieddate timestamp with time zone, dim_languagetypestartdate timestamp with time zone, dim_languagetypeenddate timestamp with time zone, dim_languagetypeuuid text, dim_dimlanguatetypeuuid uuid, dim_languagetypeentityuuid uuid, dim_languagetranslationshortnameuuid text, dim_languagetranslationlongnameuuid text)
 LANGUAGE plpgsql
 ROWS 1e+07
AS $function$

Declare

BEGIN

/*  Examples

-- specific customer all languages
select * 
from entity.func_dim_languagetranslation_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','d279129c-ca61-4fbb-b4fa-f61426c7ecec')

-- d279129c-ca61-4fbb-b4fa-f61426c7ecec -- english
-- f26c1e47-e2b2-4193-80db-4b57dbf0ee4f -- spanish
-- 556b69b5-188e-448f-8b2e-26840b892924 -- hindi

-- specific customer select language
select * 
from entity.func_dim_languagetranslation_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',???)

-- all customers is a fail ???
select * from entity.func_customer_read_min(null,true, null)

*/

--if read_allcustomers = true
--	then
	return query 
	select
		dim.dim_dimlanguatetypeid,
		dim.dim_languagetypeid,
		dim.dim_languagetypeshortname,
		dim.dim_languagetypelongname,
		dim.dim_languagetranslationtypeid,
		dim.dim_languagetypecreateddate,
		dim.dim_languagetypemodifieddate,
		dim.dim_languagetypestartdate,
		dim.dim_languagetypeenddate,
		dim.dim_languagetypeuuid,
		dim.dim_dimlanguatetypeuuid,
		dim.dim_languagetypeentityuuid,
		dim.dim_languagetranslationshortnameuuid,
		dim.dim_languagetranslationlongnameuuid
	from datawarehouse.dim_languagetranslation_v2 dim
		where dim.dim_dimlanguagetranslationcustomeruuid = read_dim_dimcustomeruuid
			and dim.dim_dimlanguagetranslationtypeuuid = read_dim_dimlanguagetranslationtypeuuid;
--end if;

/*

return query 
	select
	    entityinstanceoriginalid as customerid,
	    entityinstanceoriginaluuid as customeruuid,
	    entityinstanceuuid as customerentityuuid,
		cn.entityfieldinstancevaluelanguagemasteruuid as customernameuuid,
		dn.entityfieldinstancevaluelanguagemasteruuid as customerdisplaynameuuid,
	    entityinstancetypeentityuuid as customertypeentityuuid,
	    entityinstancecreateddate as customercreateddate,
	    entityinstancemodifieddate as customermodifieddate,
	    entityinstancestartdate as customerstartdate,	
	    entityinstanceenddate as customerenddate,
	    entityinstancemodifiedbyuuid as customermodifiedbyuuid,
	    entityinstanceexternalid as customerexternalid,
	    entityinstanceexternalsystementityuuid as customerexternalsystementityid,
		efi.entityfieldinstancevalue::uuid AS customerlanguagetypeentityuuid
	from entity.entityinstance
		JOIN entity.entityfieldinstance efi 
			on entityinstanceuuid = efi.entityfieldinstanceentityinstanceentityuuid
				and efi.entityfieldinstanceentityfieldname = 'customerlanguagetypeentityuuid'
				and entityinstanceuuid = read_customerentityuuid
		join entity.entityfieldinstance cn
			on entityinstanceuuid = cn.entityfieldinstanceentityinstanceentityuuid
				and cn.entityfieldinstanceentityfieldname = 'customername'
		join entity.entityfieldinstance dn
			on entityinstanceuuid = dn.entityfieldinstanceentityinstanceentityuuid
				and dn.entityfieldinstanceentityfieldname = 'customerdisplayname';
*/
End;	


$function$;


REVOKE ALL ON FUNCTION entity.func_dim_languagetranslation_read_min(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_dim_languagetranslation_read_min(uuid,uuid) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_dim_languagetranslation_read_min(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_dim_languagetranslation_read_min(uuid,uuid) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_custag(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_custag(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_custag(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'testing custags\n-------\n'||E'  testing all customers all custags\n  -------\n';
test_failedtext = test_failedtext||E'testing custags\n-------\n'||E'  testing all customers all custags\n  -------\n';
if (select count(*) from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '||(clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;

fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '||(clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;

fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customers all custags \n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customers all custags \n  -------\n';
if (select count(*) from entity.crud_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '||(clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '||(clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customers all custags \n  -------\n';
test_failedtext = test_failedtext||E'  testing all custags for a parent \n  -------\n';
if (select count(*) from entity.crud_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing fail scenario for parent \n  -------\n';
test_failedtext = test_failedtext||E'  testing fail scenario for parent \n  -------\n';
if (select count(*) from entity.crud_custag_read_min(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then test_passedtext = test_passedtext||E'     Pass:  select count(*) from entity.crud_custag_read_min(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_min(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_custag_read_full(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_full(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_full(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific custags \n  -------\n';
test_failedtext = test_failedtext||E'  testing specific custags \n  -------\n';

if (select count(*) from entity.crud_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing fail for custags \n  -------\n';
test_failedtext = test_failedtext||E'  testing fail for custags \n  -------\n';
if (select count(*) from entity.crud_custag_read_min(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_min(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_min(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_custag_read_full(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_custag_read_full(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_custag_read_full(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_custag(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_custag(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_custag(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_custag(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_customer(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_customer(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_customer(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'testing customer\n-------\n'||E'  testing specific customer\n  -------\n';
test_failedtext = test_failedtext||E'testing customer\n-------\n'||E'  testing specific customer\n  -------\n';

if (select count(*) from entity.crud_customer_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,false, null, null, null, null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,false,null, null, null,  null)= 1  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,false, null, null, null, null)= 1  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_customer_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, false, null, null, null, null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,false,null, null, null,  null)=1  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,false, null, null, null, null)=1  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing all customers\n  -------\n';
test_failedtext = test_failedtext||E'  testing all customers\n  -------\n';
if (select count(*) from entity.crud_customer_read_min(null,null,null,true, null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_min(null,null,null,true,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_min(null,null,null,true, null, null, null, null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_customer_read_full(null,null, null, true,null, null, null,  null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_full(null,null, null, true,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_full(null,null, null, true,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing all customers with some in japanese\n  -------\n';
test_failedtext = test_failedtext||E'  testing all customers with some in japanese\n  -------\n';
if (select count(*) from entity.crud_customer_read_full(null,null, null, true,null, null, null,  '190d8c53-b076-460d-8c10-8ca35396429a')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_full(null,null, null, true,null, null, null,  ''190d8c53-b076-460d-8c10-8ca35396429a'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_full(null,null, null, true,null, null, null,  ''190d8c53-b076-460d-8c10-8ca35396429a'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing children of a parent customer\n  -------\n';
test_failedtext = test_failedtext||E'  testing children of a parent customer\n  -------\n';
if (select count(*) from entity.crud_customer_read_min(null,null,'f90d618d-5de7-4126-8c65-0afb700c6c61',false,null, null, null,  null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_min(null,null,''f90d618d-5de7-4126-8c65-0afb700c6c61'',false,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_min(null,null,''f90d618d-5de7-4126-8c65-0afb700c6c61'',false,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_customer_read_full(null,null,'f90d618d-5de7-4126-8c65-0afb700c6c61',false,null, null, null,  null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_full(null,null,''f90d618d-5de7-4126-8c65-0afb700c6c61'',false,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_full(null,null,''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null, null, null, null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing children of an authority customer\n  -------\n';
test_failedtext = test_failedtext||E'  testing children of an authority customer\n  -------\n';
if (select count(*) from entity.crud_customer_read_min(null,'f90d618d-5de7-4126-8c65-0afb700c6c61',null,false, null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_min(null,''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,false,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_min(null,''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,false,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_customer_read_full(null,'f90d618d-5de7-4126-8c65-0afb700c6c61',null,false,null, null, null,  null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_customer_read_full(null,''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,false,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_customer_read_full(null,''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,false,null, null, null,  null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp(); 

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_customer(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_customer(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_customer(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_customer(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_dataintegrity(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_dataintegrity(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	next_start timestamp with time zone;
Begin

/*
call entity.import_entity('all time');

select * from entity.func_test_entity();

select * from entity.func_test_dataintegrity(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

fact_end = clock_timestamp();

-- Create Header for testing data integrity 
----------------------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'header','testing data integrity',next_start,true ) as foo;	
		
-- Create Section for entity template validations 
----------------------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'section','entity template validations',next_start,true ) as foo;

-- valid entity template type
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','valid entity template type',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.entitytemplate et left join  (select * from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) sys on systagentityuuid = entitytemplatetypeentityuuid and systagparententityuuid = ''b07bf96e-0a35-4b01-bcc0-863dc7b3db0c'' where systagentityuuid isNull) < 1',
		next_start, ((select count(*) from entity.entitytemplate et
						left join  (select * from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) sys
							on systagentityuuid = entitytemplatetypeentityuuid
								and systagparententityuuid = 'b07bf96e-0a35-4b01-bcc0-863dc7b3db0c'
							where systagentityuuid isNull) < 1)) as foo;

-- entity template parents not null
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entity template parents not null',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.entitytemplate et where entitytemplateparententityuuid isNull) = 0',
		next_start, ((select count(*) from entity.entitytemplate et where entitytemplateparententityuuid isNull) < 1)) as foo;

-- template external system valid
	-- Not done yet
-- Need to come back to this.  How do we validate extrnal system?
	-- Not done yet
		
-- Create Section for entity field validations 
----------------------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'section','entity field validations',next_start,true ) as foo;

-- entity field parents not null
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entity field parents not null',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.entityfield et where entityfieldparententityuuid isNull) = 0',
		next_start, ((select count(*) from entity.entityfield et where entityfieldparententityuuid isNull) < 1)) as foo;


/*

-- make sure it is a customer?
    CONSTRAINT entityfieldcustomerentityuuid_enitityinstance_fk FOREIGN KEY (entityfieldownerentityuuid)
        REFERENCES entity.entityinstance (entityinstanceuuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,

-- tempalte or field
    CONSTRAINT entityfieldentityparenttypeentityuuid_entityinstance_fk FOREIGN KEY (entityfieldentityparenttypeentityuuid)
        REFERENCES entity.entityinstance (entityinstanceuuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,

-- valid type and not null
    CONSTRAINT entityfieldentitytypeentityuuid_entityinstance_fk FOREIGN KEY (entityfieldentitytypeentityuuid)
        REFERENCES entity.entityinstance (entityinstanceuuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,

-- valid system???		
    CONSTRAINT entityfieldexternalsystementityuuid_entityinstance_fk FOREIGN KEY (entityfieldexternalsystementityuuid)
        REFERENCES entity.entityinstance (entityinstanceuuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,

-- valid format		
    CONSTRAINT entityfieldformatentityuuid_entityinstance_fk FOREIGN KEY (entityfieldformatentityuuid)
        REFERENCES entity.entityinstance (entityinstanceuuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,

-- valid widget - not null
    CONSTRAINT entityfieldwidgetentityuuid_entityinstance_fk FOREIGN KEY (entityfieldwidgetentityuuid)
        REFERENCES entity.entityinstance (entityinstanceuuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID

-- entity tag

	
    entitytagownerentityuuid uuid NOT NULL,
		-- FK

    entitytagentityinstanceentityuuid uuid,
		-- FK
		
    entitytagentitytemplateentityuuid uuid,
		-- FK
		
    entitytagcustagentityuuid uuid NOT NULL,
		-- FK
		
*/

-- entity instance

-- entity field instance

-- customer

-- location

-- systag

-- custag

    next_start = clock_timestamp();

-- Create Section for min and full equaling each other 
----------------------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'section','entity min and full read functions equal each other',next_start,true ) as foo;

-- custag min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','custag min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) = (select count(*) from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''))',
		next_start, (select count(*) from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = (select count(*) from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo;

-- customer min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','customer min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_customer_read_full(null,null, null, true,null,null, null, null)) = (select count(*) from entity.crud_customer_read_min(null,null, null, true,null,null, null, null))',
		next_start, (select count(*) from entity.crud_customer_read_full(null,null, null, true,null,null, null, null)) = (select count(*) from entity.crud_customer_read_min(null,null, null, true,null,null, null, null))) as foo;

-- entitydescription min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entitydescription min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_entitydescription_read_min(null, null, null,null, null, null,null,null)) = (select count(*) from entity.crud_entitydescription_read_full(null, null, null,null, null, null,null,null))',
		next_start, (select count(*) from entity.crud_entitydescription_read_min(null, null, null,null, null, null,null,null)) = (select count(*) from entity.crud_entitydescription_read_full(null, null, null,null, null, null,null,null))) as foo;

-- entityfield min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entityfield min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_entityfield_read_full(null, null, null,null, null, null,null)) = (select count(*) from entity.crud_entityfield_read_min(null, null, null,null, null, null,null))',
		next_start, (select count(*) from entity.crud_entityfield_read_full(null, null, null,null, null, null,null)) = (select count(*) from entity.crud_entityfield_read_min(null, null, null,null, null, null,null))) as foo;

-- entityfieldinstance min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entityfieldinstance min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) = (select count(*) from entity.crud_entityfieldinstance_read_min(null,null,null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''))',
		next_start, (select count(*) from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = (select count(*) from entity.crud_entityfieldinstance_read_min(null,null,null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo;

-- entityfileinstance min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entityfileinstance min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_entityfileinstance_read_full(null, null, null,null, null, null,null,null)) = (select count(*) from entity.crud_entityfileinstance_read_min(null, null, null,null, null, null,null,null))',
		next_start, (select count(*) from entity.crud_entityfileinstance_read_full(null, null, null,null, null, null,null,null)) = (select count(*) from entity.crud_entityfileinstance_read_min(null, null, null,null, null, null,null,null))) as foo;

-- entityinstance  min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entityinstance min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) = (select count(*) from entity.crud_entityinstance_read_min(null,null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''))',
		next_start, (select count(*) from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = (select count(*) from entity.crud_entityinstance_read_min(null,null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo;

-- entitytag  min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entitytag min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_entitytag_read_full(null, null,null,null, null, true, null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) = (select count(*) from entity.crud_entitytag_read_min(null, null,null,null, null, true, null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''))',
		next_start, (select count(*) from entity.crud_entitytag_read_full(null, null,null,null, null, true, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = (select count(*) from entity.crud_entitytag_read_min(null, null,null,null, null, true, null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo;

-- entitytemplate  min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','entitytemplate min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_entitytemplate_read_full(null, null, null, null, null,null)) = (select count(*) from entity.crud_entitytemplate_read_min(null, null, null, null, null,null))',
		next_start, (select count(*) from entity.crud_entitytemplate_read_full(null, null, null, null, null,null)) = (select count(*) from entity.crud_entitytemplate_read_full(null, null, null, null, null,null))) as foo;

-- location min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','location min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) = (select count(*) from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''))',
		next_start, (select count(*) from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = (select count(*) from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo;

-- systag min and full equal
--------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'test','systag min and full reads equal',next_start,true  ) as foo;
-- min = full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into test_failedtestcount, test_successtestcount, failedtest, test_passedtext, test_failedtext, next_start
FROM entity.util_test_createlog(test_failedtestcount,test_successtestcount,test_failedtest,test_passedtext,test_failedtext,
		'sql','(select count(*) from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) = (select count(*) from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''))',
		next_start, (select count(*) from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = (select count(*) from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'))) as foo;

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_dataintegrity(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_dataintegrity(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_dataintegrity(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_dataintegrity(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_entity(); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_entity()
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_start timestamp with time zone;
    fact_end timestamp with time zone;
	temptext text;
Begin

 -- Start the timer on this function
    fact_start = clock_timestamp();
	failedtest = false;
	failedtestcount = 0;
	successtestcount = 0;	
	temptext = '';
	failedtext = '';
	passedtext = '';

-- call entity.import_entity('all time');
-- select * from entity.func_test_entity();

-- data integrity
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_dataintegrity(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test import
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_import(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test entity templates
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_template(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test template field
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_template_field(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test instance field
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_instance(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test field instance field
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_instance_field(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test systag
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_systag(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test customer
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_customer(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test location
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_location(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test custags
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_custag(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test entity tag
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_entitytag(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test entitydescription
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_entitydescription(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

-- test fileinstance
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext  
		INTO failedtestcount, successtestcount, failedtest, passedtext, failedtext 
		FROM entity.func_test_entityfileinstance(failedtestcount, successtestcount, failedtest, passedtext, failedtext) as foo;

return query
	select failedtestcount, successtestcount, failedtest, passedtext, failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_entity() FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_entity() TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_entity() TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_entity() TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_entitydescription(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_entitydescription(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    next_start timestamp with time zone;
	failedtest boolean;
	failedtestcount bigint;
	successtestcount bigint;	
	failedtext text;
	passedtext text;

Begin

/*
select * from entity.func_test_entitydescription(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
    next_start = clock_timestamp();
	failedtest = test_failedtest;
	failedtestcount = test_failedtestcount;
	successtestcount = test_successtestcount;	
	failedtext = test_failedtext;
	passedtext = test_passedtext;

	
-- Create Section for entity description tests
----------------------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'section','entity description tests',next_start,true ) as foo;


-- all descriptions all customers
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all descriptions all customers',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_min(null, null, null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_min(null, null, null,null, null, null,null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_full(null, null, null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_full(null, null, null,null, null, null,null,null)) > 0)  ) as foo ;

-- all descriptions for an owner
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all descriptions for an owner',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_min(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, null, null,null, null, null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null,  null,null,null, null, null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_full(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, null, null,null, null, null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null,  null,null,null, null, null,null)) > 0)  ) as foo;

-- description for an entitydescriptionuuid
-------------------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','description for an entitydescriptionuuid',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_min(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', ''f42f8873-37a0-450e-97c8-c223955b2f02'', null,null, null,null, null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', 'f42f8873-37a0-450e-97c8-c223955b2f02', null,null, null, null,null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_full(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', ''f42f8873-37a0-450e-97c8-c223955b2f02'', null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', 'f42f8873-37a0-450e-97c8-c223955b2f02', null,null, null,null, null,null)) > 0)  ) as foo;

-- all descriptions for a template
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all descriptions for a template',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_min(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, ''2de8bf04-15bd-4df9-b5bc-4eb7fbb8e37e'', null, null,null, null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, '2de8bf04-15bd-4df9-b5bc-4eb7fbb8e37e',null, null, null,null,null)) > 0)  ) as foo;

-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_full(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, ''2de8bf04-15bd-4df9-b5bc-4eb7fbb8e37e'',null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, '2de8bf04-15bd-4df9-b5bc-4eb7fbb8e37e',null, null, null,null,null)) > 0)  ) as foo;

-- all descriptions for a field
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all descriptions for a field',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_min(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, null,''3b477e48-82d7-43fa-a8a4-757d4d5ad457'', null,null, null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,'3b477e48-82d7-43fa-a8a4-757d4d5ad457',null, null, null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entitydescription_read_full(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, null,''3b477e48-82d7-43fa-a8a4-757d4d5ad457'', null,null, null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entitydescription_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,'3b477e48-82d7-43fa-a8a4-757d4d5ad457', null,null, null,null)) > 0)  ) as foo;


return query
	select failedtestcount, successtestcount, failedtest, passedtext, failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_entitydescription(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_entitydescription(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_entitydescription(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_entitydescription(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_entityfileinstance(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_entityfileinstance(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    next_start timestamp with time zone;
	failedtest boolean;
	failedtestcount bigint;
	successtestcount bigint;	
	failedtext text;
	passedtext text;

Begin

/*
select * from entity.func_test_entityfileinstance(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
    next_start = clock_timestamp();
	failedtest = test_failedtest;
	failedtestcount = test_failedtestcount;
	successtestcount = test_successtestcount;	
	failedtext = test_failedtext;
	passedtext = test_passedtext;

	
-- Create Section for entity description tests
----------------------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'section','entity file instance tests',next_start,true ) as foo;

-- all file instances
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all file instances',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_min(null, null, null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_min(null, null, null,null, null, null,null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_full(null, null, null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_full(null, null, null,null, null, null,null,null)) > 0)  ) as foo ;

-- all file instances for an owner
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all file instances for an owner',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_min(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,null, null, null,null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_full(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,null, null, null,null,null)) > 0)  ) as foo ;

-- all file instances for a fileinstanceuuid
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all file instances for a fileinstanceuuid',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_min(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', ''b19d4a6d-151b-4924-88c8-da66b64f0658'', null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', 'b19d4a6d-151b-4924-88c8-da66b64f0658', null,null, null, null,null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_full(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', ''b19d4a6d-151b-4924-88c8-da66b64f0658'', null,null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', 'b19d4a6d-151b-4924-88c8-da66b64f0658', null,null, null, null,null,null)) > 0)  ) as foo ;

-- all file instances for an instanceuuid
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all file instances for an owner',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_min(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, ''87fc6238-1c3d-4f34-8a38-609855ab94ab'',null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, '87fc6238-1c3d-4f34-8a38-609855ab94ab',null, null, null,null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_full(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, ''87fc6238-1c3d-4f34-8a38-609855ab94ab'',null, null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, '87fc6238-1c3d-4f34-8a38-609855ab94ab',null, null, null,null,null)) > 0)  ) as foo ;

-- all file instances for a fieldinstanceuuid
----------------------------------
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'test','all file instances for a fieldinstanceuuid',next_start,true  ) as foo;
-- min test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_min(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, null,''6d29bc9a-f37f-43e4-81c0-b34a940ae1f9'', null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_min('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,'6d29bc9a-f37f-43e4-81c0-b34a940ae1f9', null, null,null,null)) > 0)  ) as foo;
-- full test
SELECT foo.failedtestcount, foo.successtestcount, foo.failedtest, foo.passedtext, foo.failedtext, foo.next_start
	into failedtestcount, successtestcount, failedtest, passedtext, failedtext, next_start
FROM entity.util_test_createlog(failedtestcount,successtestcount,failedtest,passedtext,failedtext,
		'sql','((select count(*) from entity.crud_entityfileinstance_read_full(''e69fbc64-df87-4c0b-9cbf-bc87774947c7'', null, null,''6d29bc9a-f37f-43e4-81c0-b34a940ae1f9'', null, null,null,null)) > 0)',
		next_start, ((select count(*) from entity.crud_entityfileinstance_read_full('e69fbc64-df87-4c0b-9cbf-bc87774947c7', null, null,'6d29bc9a-f37f-43e4-81c0-b34a940ae1f9', null, null,null,null)) > 0)  ) as foo ;



return query
	select failedtestcount, successtestcount, failedtest, passedtext, failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_entityfileinstance(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_entityfileinstance(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_entityfileinstance(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_entityfileinstance(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_entitytag(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_entitytag(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_entitytag(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n\n';
test_failedtext = test_failedtext||E'\n\n';
test_passedtext = test_passedtext||E'testing entity tags\n-------\n'||E'  all customers all entitytags\n  -------\n';
test_failedtext = test_failedtext||E'testing entity tags\n-------\n'||E'  all customers all entitytags\n  -------\n';

if (select count(*) from entity.crud_entitytag_read_min(null,null,null,null, null, true, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) entity.crud_entitytag_read_min(null,null,null,null, null, true, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_min(null,null,null,null, null, true, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from entity.crud_entitytag_read_full(null,null,null,null, null, true, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) entity.crud_entitytag_read_full(null,null,null,null, null, true, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_full(null,null,null,null, null, true, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- specific tag
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  specific tag\n  -------\n';
test_failedtext = test_failedtext||E'  specific tag\n  -------\n';

-- specific tag

if (select count(*) from entity.crud_entitytag_read_min('ccda3933-c740-40ec-9a2b-a9f1a7d4db28','8cd49ef4-2b70-410b-85aa-4b67f617066a',null,null, null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) entity.crud_entitytag_read_min(''ccda3933-c740-40ec-9a2b-a9f1a7d4db28'',''8cd49ef4-2b70-410b-85aa-4b67f617066a'',null,null, null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') = 1  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_min(''ccda3933-c740-40ec-9a2b-a9f1a7d4db28'',''8cd49ef4-2b70-410b-85aa-4b67f617066a'',null,null, null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')= 1  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from entity.crud_entitytag_read_full('ccda3933-c740-40ec-9a2b-a9f1a7d4db28','8cd49ef4-2b70-410b-85aa-4b67f617066a',null,null, null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) entity.crud_entitytag_read_full(''ccda3933-c740-40ec-9a2b-a9f1a7d4db28'',''8cd49ef4-2b70-410b-85aa-4b67f617066a'',null,null, null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') = 1  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_full(''ccda3933-c740-40ec-9a2b-a9f1a7d4db28'',''8cd49ef4-2b70-410b-85aa-4b67f617066a'',null,null, null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') = 1  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- all tags for a specific instance
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  all tags for a specific instance\n  -------\n';
test_failedtext = test_failedtext||E'  all tags for a specific instance\n  -------\n';

if (select count(*) from entity.crud_entitytag_read_min('ccda3933-c740-40ec-9a2b-a9f1a7d4db28',null,'d57f7b9c-fe72-463a-9cc9-1cb03ad4a812',null, null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) entity.crud_entitytag_read_min(''ccda3933-c740-40ec-9a2b-a9f1a7d4db28'',null,''d57f7b9c-fe72-463a-9cc9-1cb03ad4a812'',null, null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_min(''ccda3933-c740-40ec-9a2b-a9f1a7d4db28'',null,''d57f7b9c-fe72-463a-9cc9-1cb03ad4a812'',null, null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from entity.crud_entitytag_read_full('ccda3933-c740-40ec-9a2b-a9f1a7d4db28',null,'d57f7b9c-fe72-463a-9cc9-1cb03ad4a812',null, null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) entity.crud_entitytag_read_full(''ccda3933-c740-40ec-9a2b-a9f1a7d4db28'',null,''d57f7b9c-fe72-463a-9cc9-1cb03ad4a812'',null, null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_full(''ccda3933-c740-40ec-9a2b-a9f1a7d4db28'',null,''d57f7b9c-fe72-463a-9cc9-1cb03ad4a812'',null, null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- all instances for a template
test_passedtext = test_passedtext||E'\n  all instances for a template\n  -------\n';
test_failedtext = test_failedtext||E'\n  all instances for a template\n  -------\n';

if (select count(*) from entity.crud_entitytag_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytag_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null,''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null,''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0   Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytag_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null,''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0   Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null,''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0 Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- all tags for a template no instances
test_passedtext = test_passedtext||E'\n  all tags for a template no instances\n  -------\n';
test_failedtext = test_failedtext||E'\n  all tags for a template no instances\n  -------\n';

if (select count(*) from (select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as foo) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from (select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null,null,null,null,''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) > 0 as foo)   Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from (select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null,null,null,null,''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) > 0 as foo)   Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from (select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null,'0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) as foo) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from (select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null,null,null,null,''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) > 0 as foo)   Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from (select distinct entitytagcustagentityuuid from entity.crud_entitytag_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null,null,null,null,''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) > 0 as foo)   Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- all instances for a tag
test_passedtext = test_passedtext||E'\n  all instances for a tag\n  -------\n';
test_failedtext = test_failedtext||E'\n  all instances for a tag\n  -------\n';

if (select count(*) from entity.crud_entitytag_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, null, 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytag_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null, null, ''e7e8223d-3480-42b5-9fc6-9dee59667fa3'', false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null, null, ''e7e8223d-3480-42b5-9fc6-9dee59667fa3'', false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0   Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, null, 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytag_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null, null, ''e7e8223d-3480-42b5-9fc6-9dee59667fa3'', false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0   Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null, null, ''e7e8223d-3480-42b5-9fc6-9dee59667fa3'', false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0 Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- all instances for a template and a tag
test_passedtext = test_passedtext||E'\n  all instances for a template and a tag\n  -------\n';
test_failedtext = test_failedtext||E'\n  all instances for a template and a tag\n  -------\n';

if (select count(*) from entity.crud_entitytag_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, '0b9f3142-e7ed-4f78-8504-ccd2eb505075', 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytag_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null, ''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', ''e7e8223d-3480-42b5-9fc6-9dee59667fa3'', false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null, ''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', ''e7e8223d-3480-42b5-9fc6-9dee59667fa3'', false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0   Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

if (select count(*) from entity.crud_entitytag_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null,null, '0b9f3142-e7ed-4f78-8504-ccd2eb505075', 'e7e8223d-3480-42b5-9fc6-9dee59667fa3', false, null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytag_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null, ''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', ''e7e8223d-3480-42b5-9fc6-9dee59667fa3'', false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0   Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytag_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null,null, ''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', ''e7e8223d-3480-42b5-9fc6-9dee59667fa3'', false, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'') > 0 Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_entitytag(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_entitytag(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_entitytag(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_entitytag(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_import(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_import(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	temptext text;
Begin

/*
call entity.import_entity('all time');

select * from entity.func_test_import(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n\n';
test_failedtext = test_failedtext||E'\n\n';
test_passedtext = test_passedtext||E'testing import success\n-------\n'||E'  all customers imported\n  -------\n';
test_failedtext = test_failedtext||E'testing import success\n-------\n'||E'  all customers imported\n  -------\n';

if (select count(*) from customer tcust
		left join (select * from entity.crud_customer_read_full(null,null, null, true,null,null, null, null)) ecust
			on tcust.customerid = ecust.customerid 
		where ecust.customerid isnull) < 1
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from customer tcust left join (select * from entity.crud_customer_read_full(null,null, null, true, null,null, null,null)) ecust on tcust.customerid = ecust.customerid where ecust.customerid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from customer tcust left join (select * from entity.crud_customer_read_full(null,null, null, true,null,null, null, null)) ecust on tcust.customerid = ecust.customerid where ecust.customerid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- locations imported
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  all locations imported\n  -------\n';
test_failedtext = test_failedtext||E'  all locations imported\n  -------\n';

if (select count(*)  
		from location tloc
			left join (select * from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) eloc
						on tloc.locationid = eloc.locationid 
		where eloc.locationid isnull) = 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from location tloc left join (select * from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) eloc on tloc.locationid = eloc.locationid where eloc.locationid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from location tloc left join (select * from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) eloc on tloc.locationid = eloc.locationid where eloc.locationid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text; 
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- systag imported
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  all systag imported\n  -------\n';
test_failedtext = test_failedtext||E'  all systag imported\n  -------\n';

if (select count(*)  
		from systag tloc
			left join (select * from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) eloc
						on tloc.systagid = eloc.systagid 
		where eloc.systagid isnull) = 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from systag tloc left join (select * from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) eloc on tloc.systagid = eloc.systagid where eloc.systagid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from systag tloc left join (select * from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) eloc on tloc.systagid = eloc.systagid where eloc.systagid isnull ) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- custag imported
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  all custag imported\n  -------\n';
test_failedtext = test_failedtext||E'  all custag imported\n  -------\n';

if (select count(*)  
		from custag tloc
			left join (select * from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) eloc
						on tloc.custagid = eloc.custagid 
		where eloc.custagid isnull) = 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from custag tloc left join (select * from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) eloc on tloc.custagid = eloc.custagid where eloc.custagid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from custag tloc left join (select * from entity.crud_custag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) eloc on tloc.custagid = eloc.custagid where eloc.custagid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- enttag imported from location
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  all enttags imported from location\n  -------\n';
test_failedtext = test_failedtext||E'  all enttags imported from location\n  -------\n';

if (select count(*)  
	from location tloc
		join (select * from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) eloc
			on tloc.locationid = eloc.locationid 
		left join (select * from entity.crud_entitytag_read_full(null, null,null,null, null, true,  true,true,true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) tag
			on tag.entitytagentityinstanceentityuuid = eloc.locationentityuuid
	where tag.entitytaguuid isnull) = 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from location tloc join (select * from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) eloc on tloc.locationid = eloc.locationid left join (select * from entity.crud_entitytag_read_full(null, null,null,null, null, true, true,true,true, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) tag on tag.entitytagentityinstanceentityuuid = eloc.locationentityuuid where tag.entitytaguuid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from location tloc join (select * from entity.crud_location_read_full(null, null,null,null, null, true, null, null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) eloc on tloc.locationid = eloc.locationid left join (select * from entity.crud_entitytag_read_full(null, null,null,null, null, true,true,true,true, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')) tag on tag.entitytagentityinstanceentityuuid = eloc.locationentityuuid where tag.entitytaguuid isnull) = 0  Time: '||(clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- duplicates imported
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  duplicates imported\n  -------\n';
test_failedtext = test_failedtext||E'  duplicates imported\n  -------\n';

if (select count(*) 
	from entity.entityinstance
	group by entityinstanceoriginalid,entityinstancetype
	having count(*) > 1) isNull
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.entityinstance group by entityinstanceoriginalid,entityinstancetype having count(*) > 1) eloc on tloc.custagid = eloc.custagid where eloc.custagid isnull) isNull  Time: '||(clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.entityinstance group by entityinstanceoriginalid,entityinstancetype having count(*) > 1) eloc on tloc.custagid = eloc.custagid where eloc.custagid isnull) isNull  Time: '||(clock_timestamp()-fact_end)::text;  
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_import(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_import(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_import(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_import(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_instance(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_instance(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	fact_start timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_instance(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'testing entity instances\n-------\n'||E'  testing all customers all entities all tags\n  -------\n';
test_failedtext = test_failedtext||E'testing entity instances\n-------\n'||E'  testing all customers all entities all tags\n  -------\n';

if (select count(*) from entity.crud_entityinstance_read_min(null,null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityinstance_read_min(null,null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityinstance_read_min(null,null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;

fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityinstance_read_full(null,null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- specific customer all entities all tags
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customer all entities all tags\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customer all entities all tags\n  -------\n';
if (select count(*) from entity.crud_entityinstance_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityinstance_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityinstance_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityinstance_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityinstance_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityinstance_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- specific instance
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific instance\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific instance\n  -------\n';
if (select count(*) from entity.crud_entityinstance_read_min('d7995576-8354-4aea-b052-1ce61052bd2e','0ce5be8d-2bec-4219-be97-07dc154b2e3b','24855715-9228-4f41-bfe6-493f4c374a6e','2ab5461d-ad96-4560-a36d-d0fa53bce0f0','0b9f3142-e7ed-4f78-8504-ccd2eb505075','67af22cb-3183-4e6e-8542-7968f744965a',false,'f3fe9cae-c21e-4dba-9a10-008cfa6dca39',null, null,null, null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',''0ce5be8d-2bec-4219-be97-07dc154b2e3b'',''24855715-9228-4f41-bfe6-493f4c374a6e'',''2ab5461d-ad96-4560-a36d-d0fa53bce0f0'',''0b9f3142-e7ed-4f78-8504-ccd2eb505075'',''67af22cb-3183-4e6e-8542-7968f744965a'',false,''f3fe9cae-c21e-4dba-9a10-008cfa6dca39'',null, null,null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',''0ce5be8d-2bec-4219-be97-07dc154b2e3b'',''24855715-9228-4f41-bfe6-493f4c374a6e'',''2ab5461d-ad96-4560-a36d-d0fa53bce0f0'',''0b9f3142-e7ed-4f78-8504-ccd2eb505075'',''67af22cb-3183-4e6e-8542-7968f744965a'',false,''f3fe9cae-c21e-4dba-9a10-008cfa6dca39'',null, null,null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityinstance_read_full('d7995576-8354-4aea-b052-1ce61052bd2e','0ce5be8d-2bec-4219-be97-07dc154b2e3b','24855715-9228-4f41-bfe6-493f4c374a6e','2ab5461d-ad96-4560-a36d-d0fa53bce0f0','0b9f3142-e7ed-4f78-8504-ccd2eb505075','67af22cb-3183-4e6e-8542-7968f744965a',false,'f3fe9cae-c21e-4dba-9a10-008cfa6dca39',null, null,null, null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',''0ce5be8d-2bec-4219-be97-07dc154b2e3b'',''24855715-9228-4f41-bfe6-493f4c374a6e'',''2ab5461d-ad96-4560-a36d-d0fa53bce0f0'',''0b9f3142-e7ed-4f78-8504-ccd2eb505075'',''67af22cb-3183-4e6e-8542-7968f744965a'',false,''f3fe9cae-c21e-4dba-9a10-008cfa6dca39'',null, null,null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',''0ce5be8d-2bec-4219-be97-07dc154b2e3b'',''24855715-9228-4f41-bfe6-493f4c374a6e'',''2ab5461d-ad96-4560-a36d-d0fa53bce0f0'',''0b9f3142-e7ed-4f78-8504-ccd2eb505075'',''67af22cb-3183-4e6e-8542-7968f744965a'',false,''f3fe9cae-c21e-4dba-9a10-008cfa6dca39'',null, null,null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- specific parent
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific parent\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific parent\n  -------\n';
if (select count(*) from entity.crud_entityinstance_read_min('d7995576-8354-4aea-b052-1ce61052bd2e',null, '24855715-9228-4f41-bfe6-493f4c374a6e',null,null,null,false,null,null,null,null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null, ''24855715-9228-4f41-bfe6-493f4c374a6e'',null,null,null,false,null,null,null,null,null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'',null, ''24855715-9228-4f41-bfe6-493f4c374a6e'',null,null,null,false,null,null,null,null,null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityinstance_read_full('d7995576-8354-4aea-b052-1ce61052bd2e',null, '24855715-9228-4f41-bfe6-493f4c374a6e',null,null,null,false,null,null,null,null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null, ''24855715-9228-4f41-bfe6-493f4c374a6e'',null,null,null,false,null,null,null,null,null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'',null, ''24855715-9228-4f41-bfe6-493f4c374a6e'',null,null,null,false,null,null,null,null,null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- specific cornerstone
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific cornerstone\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific cornerstone\n  -------\n';
if (select count(*) from entity.crud_entityinstance_read_min('d7995576-8354-4aea-b052-1ce61052bd2e', null, null, '2ab5461d-ad96-4560-a36d-d0fa53bce0f0', null, null, false, null, null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, ''2ab5461d-ad96-4560-a36d-d0fa53bce0f0'', null, null, false, null, null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, ''2ab5461d-ad96-4560-a36d-d0fa53bce0f0'', null, null, false, null, null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityinstance_read_full('d7995576-8354-4aea-b052-1ce61052bd2e', null, null, '2ab5461d-ad96-4560-a36d-d0fa53bce0f0', null, null, false, null, null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, ''2ab5461d-ad96-4560-a36d-d0fa53bce0f0'', null, null, false, null, null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, ''2ab5461d-ad96-4560-a36d-d0fa53bce0f0'', null, null, false, null, null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- specific template
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific template\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific template\n  -------\n';
if (select count(*) from entity.crud_entityinstance_read_min(	'd7995576-8354-4aea-b052-1ce61052bd2e', null, null, null, '0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null, null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_min(	''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, null, ''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, null, null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_min(	''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, null, ''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, null, null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityinstance_read_full(	'd7995576-8354-4aea-b052-1ce61052bd2e', null, null, null, '0b9f3142-e7ed-4f78-8504-ccd2eb505075', null, false, null, null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_full(	''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, null, ''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, null, null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_full(	''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, null, ''0b9f3142-e7ed-4f78-8504-ccd2eb505075'', null, false, null, null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- specific tag
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific tag\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific tag\n  -------\n';
if (select count(*) from entity.crud_entityinstance_read_min('d7995576-8354-4aea-b052-1ce61052bd2e', null, null, null, null, null, false,'f3fe9cae-c21e-4dba-9a10-008cfa6dca39', null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, null, null, null, false,''f3fe9cae-c21e-4dba-9a10-008cfa6dca39'', null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_min(''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, null, null, null, false,''f3fe9cae-c21e-4dba-9a10-008cfa6dca39'', null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityinstance_read_full('d7995576-8354-4aea-b052-1ce61052bd2e', null, null, null, null, null, false,'f3fe9cae-c21e-4dba-9a10-008cfa6dca39', null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  (select count(*) from entity.crud_entityinstance_read_full''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, null, null, null, false,''f3fe9cae-c21e-4dba-9a10-008cfa6dca39'', null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  (select count(*) from entity.crud_entityinstance_read_full(''d7995576-8354-4aea-b052-1ce61052bd2e'', null, null, null, null, null, false,''f3fe9cae-c21e-4dba-9a10-008cfa6dca39'', null, null, null, null))> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_instance(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_instance(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_instance(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_instance(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_instance_field(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_instance_field(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	fact_start timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_instance_field(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'testing field instances\n-------\n'||E'  testing all customers all fields\n  -------\n';
test_failedtext = test_failedtext||E'testing field instances\n-------\n'||E'  testing all customers all fields\n  -------\n';

if (select count(*) from entity.crud_entityfieldinstance_read_min(null,null,null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfieldinstance_read_min(null,null,null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfieldinstance_read_min(null,null,null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;

fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfieldinstance_read_full(null,null,null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customer all fields\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customer all fields\n  -------\n';
if (select count(*) from entity.crud_entityfieldinstance_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfieldinstance_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfieldinstance_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfieldinstance_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,true,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfieldinstance_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfieldinstance_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,true,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific entity instance\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific entity instance\n  -------\n';
if (select count(*) from entity.crud_entityfieldinstance_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', 'b6b8b170-954d-47cf-8d84-d925babd0987', null, false, null, null, null,null )) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfieldinstance_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', ''b6b8b170-954d-47cf-8d84-d925babd0987'', null, false, null, null, null,null )> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfieldinstance_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', ''b6b8b170-954d-47cf-8d84-d925babd0987'', null, false, null, null, null,null )> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfieldinstance_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61', 'b6b8b170-954d-47cf-8d84-d925babd0987', null, false, null, null,null, null )) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfieldinstance_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', ''b6b8b170-954d-47cf-8d84-d925babd0987'', null, false, null, null, null,null )> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfieldinstance_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', ''b6b8b170-954d-47cf-8d84-d925babd0987'', null, false, null, null,null, null )> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific field instance\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific field instance\n  -------\n';
if (select count(*) from entity.crud_entityfieldinstance_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', 'b6b8b170-954d-47cf-8d84-d925babd0987', 	'28e66975-b0d8-4420-ad44-8a4173e4e64f',false, null, null, 	null,null )) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfieldinstance_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', ''b6b8b170-954d-47cf-8d84-d925babd0987'', 	''28e66975-b0d8-4420-ad44-8a4173e4e64f'',false, null,null, null, 	null )= 1  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfieldinstance_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', ''b6b8b170-954d-47cf-8d84-d925babd0987'', 	''28e66975-b0d8-4420-ad44-8a4173e4e64f'',false, null,null, null, 	null )= 1  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfieldinstance_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61', 'b6b8b170-954d-47cf-8d84-d925babd0987', 	'28e66975-b0d8-4420-ad44-8a4173e4e64f',false, null, null, null,	null )) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfieldinstance_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', ''b6b8b170-954d-47cf-8d84-d925babd0987'', 	''28e66975-b0d8-4420-ad44-8a4173e4e64f'',false, null,null, null, 	null )= 1  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfieldinstance_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', ''b6b8b170-954d-47cf-8d84-d925babd0987'', 	''28e66975-b0d8-4420-ad44-8a4173e4e64f'',false, null,null, null, 	null )= 1  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_instance_field(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_instance_field(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_instance_field(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_instance_field(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_location(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_location(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_location(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'testing location\n-------\n'||E'  testing all customers all locations all tags\n  -------\n';
test_failedtext = test_failedtext||E'testing location\n-------\n'||E'  testing all customers all locations all tags\n  -------\n';
if (select count(*) from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_full(null,null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customer all locations all tags\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customer all locations all tags\n  -------\n';
if (select count(*) from entity.crud_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,true,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,true,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customer all locations specific tags\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customer all locations specific tags\n  -------\n';
if (select count(*) from entity.crud_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,true,'1aefd363-45aa-4986-80e9-e8e212059a85',null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,true,null,null,null,''1aefd363-45aa-4986-80e9-e8e212059a85'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,true,null,null,null,''1aefd363-45aa-4986-80e9-e8e212059a85'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null,null,true,'1aefd363-45aa-4986-80e9-e8e212059a85',null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,true,null,null,null,''1aefd363-45aa-4986-80e9-e8e212059a85'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null,true,null,null,null,''1aefd363-45aa-4986-80e9-e8e212059a85'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific parent\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific parent\n  -------\n';
if (select count(*) from entity.crud_location_read_min('92eba0ba-b271-40d0-8d64-6de19b3df6f7',null,'36a3c4ef-07ce-4295-9132-8c323099dcc4',null,false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_min(''92eba0ba-b271-40d0-8d64-6de19b3df6f7'',null,''36a3c4ef-07ce-4295-9132-8c323099dcc4'',null,false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_min(''92eba0ba-b271-40d0-8d64-6de19b3df6f7'',null,''36a3c4ef-07ce-4295-9132-8c323099dcc4'',null,false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_location_read_full('92eba0ba-b271-40d0-8d64-6de19b3df6f7',null,'36a3c4ef-07ce-4295-9132-8c323099dcc4',null,false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_full(''92eba0ba-b271-40d0-8d64-6de19b3df6f7'',null,''36a3c4ef-07ce-4295-9132-8c323099dcc4'',null,false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_full(''92eba0ba-b271-40d0-8d64-6de19b3df6f7'',null,''36a3c4ef-07ce-4295-9132-8c323099dcc4'',null,false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''. 1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific cornerstone\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific cornerstone\n  -------\n';
if (select count(*) from entity.crud_location_read_min('58f4032b-d614-4f7d-97e7-e20240205229',null,null,'dceec0cf-f626-4775-807a-3bacc70de8eb',false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_min(''58f4032b-d614-4f7d-97e7-e20240205229'',null,null,''dceec0cf-f626-4775-807a-3bacc70de8eb'',false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_min(''58f4032b-d614-4f7d-97e7-e20240205229'',null,null,''dceec0cf-f626-4775-807a-3bacc70de8eb'',false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_location_read_full('58f4032b-d614-4f7d-97e7-e20240205229',null,null,'dceec0cf-f626-4775-807a-3bacc70de8eb',false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_full(''58f4032b-d614-4f7d-97e7-e20240205229'',null,null,''dceec0cf-f626-4775-807a-3bacc70de8eb'',false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_full(''58f4032b-d614-4f7d-97e7-e20240205229'',null,null,''dceec0cf-f626-4775-807a-3bacc70de8eb'',false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific locations specific tags\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific locations specific tags\n  -------\n';
if (select count(*) from entity.crud_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','af4dc39d-7d4a-46a4-9ad0-980c23bff933',null,null,false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',null,null,false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',null,null,false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','af4dc39d-7d4a-46a4-9ad0-980c23bff933',null,null,false,null,null,null,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',null,null,false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',null,null,false,null,null,null,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_location(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_location(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_location(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_location(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_systag(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_systag(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_systag(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'testing systags\n-------\n'||E'  testing all customers all systags\n  -------\n';
test_failedtext = test_failedtext||E'testing systags\n-------\n'||E'  testing all customers all systags\n  -------\n';
if (select count(*) from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_full(null,null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'  testing specific customer all systags\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customer all systags\n  -------\n';
if (select count(*) from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'  testing all systags for a parent\n  -------\n';
test_failedtext = test_failedtext||E'  testing all systags for a parent\n  -------\n';
if (select count(*) from entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'  testing systag fail scenario for parent\n  -------\n';
test_failedtext = test_failedtext||E'  testing systag fail scenario for parent\n  -------\n';
if (select count(*) from entity.crud_systag_read_min(null,null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_min(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_min(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_systag_read_full(null,null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_full(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_full(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'  testing specific systags\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific systags\n  -------\n';
if (select count(*) from entity.crud_systag_read_min(null, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_min(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''=1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_min(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''=1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_systag_read_full(null, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,null,null, null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_systag_read_full(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'' = 1)  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_systag_read_full(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,null,null, null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'' = 1)  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_systag(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_systag(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_systag(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_systag(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_template(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_template(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	fact_start timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_template(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'testing entity templates\n-------\n'||E'  testing all customers all templates\n  -------\n';
test_failedtext = test_failedtext||E'testing entity templates\n-------\n'||E'  testing all customers all templates\n  -------\n';

if (select count(*) from entity.crud_entitytemplate_read_min(null, null, null,null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_read_min(null, null, null,null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_read_min(null, null, null,null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_read_full(null, null, null,null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_read_full(null, null, null,null, null,null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_read_full(null, null, null,null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customer all templates\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customer all templates\n  -------\n';
if (select count(*) from entity.crud_entitytemplate_read_min(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_read_full(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null,null, null, null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customer specific entity template\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customer specific entity template\n  -------\n';
if (select count(*) from entity.crud_entitytemplate_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','957df2f9-051f-4af5-95ee-ea3760fbb83b',	null,null, null,null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null,null, null,null)= 1  Time: '|| (clock_timestamp()-fact_end)::text;
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null,null, null,null)= 1  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','957df2f9-051f-4af5-95ee-ea3760fbb83b',	null,null, null,null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null,null, null,null)= 1  Time:'|| (clock_timestamp()-fact_end)::text;
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null,null, null,null)= 1  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  negative test - empty or wrong cutomer returns no templates\n  -------\n';
test_failedtext = test_failedtext||E'  negative test - empty or wrong cutomer returns no templates\n  -------\n';
if (select count(*) from entity.crud_entitytemplate_read_min(null,'957df2f9-051f-4af5-95ee-ea3760fbb83b',	null,null, null,null)) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_read_min(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',	null,null, null,null)= 0  Time: '|| (clock_timestamp()-fact_end)::text;	
		test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_read_min(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',	null)= 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_read_full(null,'957df2f9-051f-4af5-95ee-ea3760fbb83b',	null,null, null,null)) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_read_full(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null,null, null,null)= 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_read_full(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null,null, null,null)= 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_template(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_template(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_template(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_template(bigint,bigint,boolean,text,text) TO graphql;

-- Type: FUNCTION ; Name: entity.func_test_template_field(bigint,bigint,boolean,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.func_test_template_field(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text)
 LANGUAGE plpgsql
AS $function$
Declare
    fact_end timestamp with time zone;
	temptext text;
Begin

/*
select * from entity.func_test_template_field(
	0::bigint, 
	0::bigint, 
	false, 
	'', 
	''
	)
*/

 -- Start the timer on this function
	temptext = '';

fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'testing entity fields\n-------\n'||E'  testing all customers all template all fields\n  -------\n';
test_failedtext = test_failedtext||E'testing entity fields\n-------\n'||E'  testing all customers all template all fields\n  -------\n';

if (select count(*) from entity.crud_entityfield_read_min(null, null, null,null, null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_min(null, null, null,null, null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*)from entity.crud_entityfield_read_min(null, null, null,null, null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfield_read_full(null, null, null,null, null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_full(null, null, null,null, null, null,null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*)from entity.crud_entityfield_read_full(null, null, null,null, null, null,null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_field_read_full(null, null, null,null, null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_field_read_full(null, null, null,null, null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*)from entity.crud_entitytemplate_field_read_full(null, null, null,null, null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customer all systags\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customer all systags\n  -------\n';
if (select count(*) from entity.crud_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null, null, null,null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,null, null, null, null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,null, null, null, null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,null, null, null, null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null,null, null, null, null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,null, null, null, null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null,null, null, null, null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customers specific template all fields\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customers specific template all fields\n  -------\n';
if (select count(*) from entity.crud_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null, null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null, null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)> 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null, null, null,null)) > 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)> 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  testing specific customers specific template specific fields\n  -------\n';
test_failedtext = test_failedtext||E'  testing specific customers specific template specific fields\n  -------\n';
if (select count(*) from entity.crud_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 1  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 1  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 1  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 1  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)) = 1
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 1  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 1  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
test_passedtext = test_passedtext||E'  negative tests - empty or wrong cutomer returns nothing\n  -------\n';
test_failedtext = test_failedtext||E'  negative tests - empty or wrong cutomer returns nothing\n  -------\n';
if (select count(*) from entity.crud_entityfield_read_min(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null, null, null,null)) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_min(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_min(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfield_read_min(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_min(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_min(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfield_read_full(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null, null, null,null)) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entityfield_read_full(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entityfield_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entityfield_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_field_read_full(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null, null, null,null)) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_field_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_field_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null, null, null,null)= 0  Time:'|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();
test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';
if (select count(*) from entity.crud_entitytemplate_field_read_full(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null, null, null,null)) = 0
	Then test_passedtext = test_passedtext||'     Pass:  select count(*) from entity.crud_entitytemplate_field_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 0  Time: '|| (clock_timestamp()-fact_end)::text;	
			test_successtestcount = test_successtestcount + 1;
	Else test_failedtext = test_failedtext||'     Fail:  select count(*) from entity.crud_entitytemplate_field_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null, null, null,null)= 0  Time: '|| (clock_timestamp()-fact_end)::text;
		test_failedtest = true;
		test_failedtestcount = test_failedtestcount + 1;
End If;
fact_end = clock_timestamp();

test_passedtext = test_passedtext||E'\n';
test_failedtext = test_failedtext||E'\n';

return query
	select test_failedtestcount, test_successtestcount,test_failedtest, test_passedtext, test_failedtext;

End;

$function$;


REVOKE ALL ON FUNCTION entity.func_test_template_field(bigint,bigint,boolean,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_template_field(bigint,bigint,boolean,text,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.func_test_template_field(bigint,bigint,boolean,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.func_test_template_field(bigint,bigint,boolean,text,text) TO graphql;

-- Type: PROCEDURE ; Name: entity.import_entity(text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.import_entity(IN intervaltype text)
 LANGUAGE plpgsql
AS $procedure$
Declare
    fact_start timestamp with time zone;
Begin

 -- Start the timer on this function
    fact_start = clock_timestamp();
	
  if exists(select 1 from pg_namespace where nspname = 'datawarehouse') then
    if  (select dwrunfactimport from datawarehouse.dw_logginglevels) = false
      Then 
        if  (select dwlogginglevel2 from datawarehouse.dw_logginglevels) = true
          Then   
                  call datawarehouse.insert_tendy_tracker(0, 2517, 12496, 980, 844, 20770, 18068, 20771, 20769, fact_start);
            return;
        end if;
    end if;
  end if;

	call entity.import_entity_systag(intervaltype);
	call entity.import_entity_customer(intervaltype);
	call entity.import_entity_location(intervaltype);
	call entity.import_entity_custag(intervaltype);
	call entity.import_workresultinstanceentityvalue(intervaltype);

  if exists(select 1 from pg_namespace where nspname = 'datawarehouse') then
    -- Insert into the tendy tracker
    if (select dwlogginglevel2 from datawarehouse.dw_logginglevels) = false
    Then
        Return;
    end if;

    if intervaltype = '5 minute'
    Then
        call datawarehouse.insert_tendy_tracker(0, 2517, 12496, 980, 844, 20770, 18068, 20771, 20769, fact_start);
        Return;
    end if;

    if intervaltype = '1 hour'
    Then
        call datawarehouse.insert_tendy_tracker(0, 2518, 12496, 980, 844, 20774, 18068, 20775, 20773, fact_start);
        Return;
    end if;

    call datawarehouse.insert_tendy_tracker(0, 2519, 12496, 980, 844, 20778, 18068, 20779, 20777, fact_start);
  end if;

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.import_entity(text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity(text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity(text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.import_entity(text) TO graphql;

-- Type: PROCEDURE ; Name: entity.import_entity_custag(text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.import_entity_custag(IN intervaltype text)
 LANGUAGE plpgsql
AS $procedure$
Declare
   location_start timestamp with time zone;
	maxdate timestamp with time zone;
	insertdate timestamp with time zone;
	tempenglishentityuuid uuid;
	temptendrelenitytuuid uuid;
	tempentitytemplateuuid uuid;
	tempentitytemplatetypeuuid uuid;
	
Begin

tempenglishentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
temptendrelenitytuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
tempentitytemplateuuid = (select entitytemplateuuid from entity.entitytemplate where entitytemplatename = 'Customer Tag');
tempentitytemplatetypeuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer Tag');

-- Start the timer on this function
location_start = clock_timestamp();
maxdate = 	(select max(custagmodifieddate) 
				from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid));
insertdate = 
	case when intervaltype = '5 minute' and maxdate notNull
			Then (select (max(custagmodifieddate)- interval '1 hour') 
					from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid))
		when intervaltype = '1 hour' and maxdate notNull
			Then (select (max(custagmodifieddate)- interval '2 hour') 
					from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid))			
		Else '01/01/1900'
	end;	

-- insert the custag

INSERT INTO entity.entityinstance(
	entityinstanceoriginalid, 
	entityinstanceoriginaluuid, 
	entityinstanceownerentityuuid, 
	entityinstanceparententityuuid,	
	entityinstanceentitytemplateentityuuid,  -- templateentityuuid
	entityinstancetypeentityuuid,  -- template type 
	entityinstancecreateddate, 
	entityinstancemodifieddate, 
	entityinstancestartdate, 
	entityinstanceenddate, 
	entityinstanceexternalid, 
	entityinstanceexternalsystemuuid, -- deprecate
	entityinstanceexternalsystementityuuid,
	entityinstancemodifiedbyuuid, 
	entityinstancerefid,
	entityinstancerefuuid,
	entityinstancecornerstoneorder,
	entityinstanceentitytemplatename,
	entityinstancetype,
	entityinstancenameuuid,
	entityinstancedeleted, 
	entityinstancedraft			
	)
Select
	tag.custagid,
	tag.custaguuid,
	(select entityinstanceuuid from entity.entityinstance 
		where entityinstanceoriginalid = tag.custagcustomerid 
			and entityinstanceentitytemplatename = 'Customer'),
	parent.entityinstanceuuid, -- parent id
	tempentitytemplateuuid,
	tempentitytemplatetypeuuid,
	tag.custagcreateddate,
	tag.custagmodifieddate, 
	tag.custagstartdate, 
	tag.custagenddate, 
	tag.custagexternalid,
	null,  -- deprecate	
	sys.custagentityuuid as custagexternalsystementityuuid,	
	(select workerinstanceuuid from workerinstance where workerinstanceid = tag.custagmodifiedby),
	tag.custagrefid, 
	tag.custagrefuuid,	
	tag.custagorder::integer,
	'Customer Tag',
	tag.custagtype,
	(select languagemasteruuid from languagemaster where languagemasterid = tag.custagnameid),
	false,
	false	
from custag tag
	inner join entity.entityinstance parent
		on tag.custagsystagid = parent.entityinstanceoriginalid
			and parent.entityinstanceentitytemplatename = 'System Tag'	
	left join entity.entityinstance ent
		on tag.custagid = ent.entityinstanceoriginalid
			and ent.entityinstancetypeentityuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer Tag')
	left join (select * from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid)) as sys
		on sys.custagid = tag.custagexternalsystemid
where ent.entityinstanceuuid isNull 
	and tag.custagmodifieddate > insertdate
	and tag.custagmodifieddate < (now() - interval '10 minutes');

-- cornerstone

update entity.entityinstance
set entityinstancecornerstoneentityuuid = entityinstanceuuid
where entityinstanceentitytemplatename in ('Customer Tag') 
	and entityinstancecornerstoneentityuuid isNull;

-- custagdisplayname

insert into public.languagemaster
    (languagemastercustomerid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
	 languagemasterrefuuid,
     languagemastermodifiedby)
select
	custagcustomerid,
	20,
    custagtype,	
	ent.entityinstanceuuid||'-custagdisplayname',
	337
from entity.entityinstance ent
	inner join custag
		on custagid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'Customer Tag'
			and custagmodifieddate > insertdate
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'custagdisplayname'	
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancevaluelanguagemasteruuid, 
	entityfieldinstancevaluelanguagetypeentityuuid, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	entityinstanceuuid,
	entityinstanceownerentityuuid,
	languagemastersource,
	languagemasteruuid,
	(select entityinstanceuuid from entity.entityinstance 
		where entityinstanceoriginaluuid in 
				(select custaguuid from custag 
				where custagid in (languagemastersourcelanguagetypeid))),
	custagcreateddate,
	custagmodifieddate,
	entityfielduuid,
	entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance
	inner join custag
		on custagid = entityinstanceoriginalid
			and entityinstanceentitytemplatename = 'Customer Tag'
			and custagmodifieddate > insertdate
	inner join entity.entitytemplate
		on entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'custagdisplayname'
	inner join languagemaster
		on languagemasterrefuuid = entityinstanceuuid||'-custagdisplayname'
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

-- custagabbreviationentityuuid

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	ent.entityinstanceuuid,
	ent.entityinstanceownerentityuuid,
	abb.entityinstanceuuid::text,
	loc.custagcreateddate,
	loc.custagmodifieddate,
	entityfielduuid,
	ent.entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance ent
	inner join custag loc
		on loc.custagid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'Customer Tag'
			and custagmodifieddate > insertdate
	left join entity.entityinstance abb
		on loc.custagabbreviationid = abb.entityinstanceoriginalid
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'custagabbreviationentityuuid'
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

------------
-- update any modified custags

-------  TRIM THIS TABLE TO NEEDED DATA.  RIGHT NOW I GRAB EVERYTHING ------

create temp table cusmodified  as
(select cus.*,
	ent.languagetranslationtypeentityuuid as languagetranslationtypeentityuuid, 
	ent.custagid as ent_custagid, 
	ent.custaguuid as ent_custaguuid, 
	ent.custagentityuuid as ent_custagentityuuid, 
	ent.custagcustomerid as ent_custagcustomerid, 
	ent.custagcustomeruuid as ent_custagcustomeruuid, 
	ent.custagcustomerentityuuid as ent_custagcustomerentityuuid, 
	ent.custagnameuuid as ent_custagnameuuid, 
	ent.custagdisplaynameuuid as ent_custagdisplaynameuuid, 
	ent.custagtype as ent_custagtype, 
	ent.custagcreateddate as ent_custagcreateddate, 
	ent.custagmodifieddate as ent_custagmodifieddate, 
	ent.custagstartdate as ent_custagstartdate, 
	ent.custagenddate as ent_custagenddate, 
	ent.custagexternalid as ent_custagexternalid, 
	ent.custagexternalsystementityuuid as ent_custagexternalsystementityuuid, 
	ent.custagmodifiedbyuuid as ent_custagmodifiedbyuuid, 
	ent.custagabbreviationentityuuid as ent_custagabbreviationentityuuid, 
	ent.custagparententityuuid as ent_custagparententityuuid, 
	ent.custagorder as ent_custagorder 
from custag cus 
		inner join (select * 
			from entity.crud_custag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid)) as ent
				on cus.custagid = ent.custagid
where cus.custagmodifieddate <> ent.custagmodifieddate
		and cus.custagmodifieddate > insertdate
		);

if (select count(*) from cusmodified) > 0
	then

		-- custagname
	
		update languagemaster
		set languagemastersource = custagtype,
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION',
			languagemastermodifieddate = now()
		from cusmodified 
		where languagemasteruuid = ent_custagnameuuid;

		-- custagdisplayname
		
		update languagemaster
		set languagemastersource = custagtype,
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION',
			languagemastermodifieddate = now()
		from cusmodified 
		where languagemasteruuid = ent_custagdisplaynameuuid;

		
		-- custagabbreviationentityuuid

		update entity.entityfieldinstance efi
		set entityfieldinstancevalue = abb.entityinstanceuuid::text,
			entityfieldinstancemodifieddate = custagmodifieddate	
		from cusmodified cusmod
			inner join entity.entityfieldinstance efiabb
				on efiabb.entityfieldinstanceentityinstanceentityuuid = ent_custagentityuuid
					and efiabb.entityfieldinstanceentityfieldname = 'custagabbreviationentityuuid'
			left join entity.entityinstance abb
				on cusmod.custagabbreviationid = abb.entityinstanceoriginalid
					and abb.entityinstanceentitytemplatename = 'Customer Tag'
		where  efi.entityfieldinstanceuuid = efiabb.entityfieldinstanceuuid;		

-- entity
		update entity.entityinstance ent
		set 
			entityinstanceownerentityuuid = cust.entityinstanceuuid,
			entityinstancecreateddate = cusmod.custagcreateddate, 
			entityinstancemodifieddate = cusmod.custagmodifieddate, 
			entityinstancestartdate = cusmod.custagstartdate, 
			entityinstanceenddate = cusmod.custagenddate, 
			entityinstanceexternalid = cusmod.custagexternalid, 
			entityinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = cusmod.custagmodifiedby),
			entityinstancetype = cusmod.custagtype
		from cusmodified cusmod
			inner join entity.entityinstance cust
				on cusmod.custagcustomerid = cust.entityinstanceoriginalid
					and cust.entityinstanceentitytemplatename = 'Customer'
		where cusmod.ent_custaguuid = ent.entityinstanceoriginaluuid;

end if;

drop table cusmodified;


/*
if  (select dwlogginglevel4 from datawarehouse.dw_logginglevels) = false
	Then Return;
end if;

call datawarehouse.insert_tendy_tracker(0, 2521, 12496, 811, 844, 20786, 18068, 20787,20785, customer_start);
*/

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.import_entity_custag(text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity_custag(text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity_custag(text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.import_entity_custag(text) TO graphql;

-- Type: PROCEDURE ; Name: entity.import_entity_customer(text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.import_entity_customer(IN intervaltype text)
 LANGUAGE plpgsql
AS $procedure$
Declare
   customer_start timestamp with time zone;
	maxdate timestamp with time zone;
	updatedate timestamp with time zone;
	insertdate timestamp with time zone;
	englishuuid uuid;
   
Begin

englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';

-- Start the timer on this function
	customer_start = clock_timestamp();
	maxdate = 	(select max(customermodifieddate) 
					from entity.crud_customer_read_min(null,null, null, true,null,null, null, null));

	updatedate = 
		case
			when intervaltype = '5 minute' and maxdate notNull
				Then (select (max(customermodifieddate)- interval '2 hours') 
						from entity.crud_customer_read_min(null,null, null, true,null,null, null, null))
			when intervaltype = '1 hour' and maxdate notNull
				Then (select (max(customermodifieddate)- interval '1 day') 
						from entity.crud_customer_read_min(null,null, null, true,null,null, null, null))			
			Else '01/01/1900'
		end;

	insertdate = 
		case
			when intervaltype = '5 minute' and maxdate notNull
				Then (select (max(customermodifieddate)- interval '1 hour') 
						from entity.crud_customer_read_min(null,null, null, true,null,null, null, null))
			when intervaltype = '1 hour' and maxdate notNull
				Then (select (max(customermodifieddate)- interval '2 hour') 
						from entity.crud_customer_read_min(null,null, null, true,null,null, null, null))			
			Else '01/01/1900'
		end;

	INSERT INTO entity.entityinstance(
		entityinstanceoriginalid, 
		entityinstanceoriginaluuid, 
		entityinstanceownerentityuuid, 
		entityinstanceentitytemplateentityuuid, 
		entityinstancetypeentityuuid, 
		entityinstancecreateddate, 
		entityinstancemodifieddate, 
		entityinstancestartdate, 
		entityinstanceenddate, 
		entityinstanceexternalid, 
		entityinstancemodifiedbyuuid, 
		entityinstancerefid,
		entityinstanceentitytemplatename,
		entityinstancetype,
		entityinstanceexternalsystementityuuid,
		entityinstancenameuuid
		)
	SELECT 
		cust.customerid, 
		cust.customeruuid, 
		null,
		(select entitytemplateuuid from entity.entitytemplate where entitytemplatename = 'Customer'),  -- Flip these to the function in the future
		(select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer'),  -- Flip these to the function in the future
		cust.customercreateddate, 
		cust.customermodifieddate,
		cust.customerstartdate, 
		cust.customerenddate, 
		cust.customerexternalid, 
		(select workerinstanceuuid from workerinstance where workerinstanceid = cust.customermodifiedby),
		cust.customerrefid,
		'Customer',
		customername,
		sys.systagentityuuid,
		(select languagemasteruuid from languagemaster where languagemasterid = customernamelanguagemasterid)
	FROM public.customer cust
		left join entity.entityinstance
			on cust.customerid = entityinstanceoriginalid
				and entityinstancetypeentityuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer')  -- Flip these to the function in the future
		left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as sys
			on sys.systagid = cust.customerexternalsystemid
	where entityinstanceuuid isNull 
		and cust.customermodifieddate > insertdate
		and cust.customermodifieddate < now() - interval '10 minutes';

-- add in the corect customerentity uuid.  It references self.  

	update entity.entityinstance
	set entityinstanceownerentityuuid = entityinstanceuuid
	where entityinstanceownerentityuuid isNull
		and entityinstanceentitytemplatename = 'Customer';

	update entity.entityinstance
	set  entityinstanceparententityuuid = entityinstanceuuid
	where entityinstanceparententityuuid isNull
		and entityinstanceentitytemplatename = 'Customer';

	update entity.entityinstance
	set entityinstancecornerstoneentityuuid = entityinstanceuuid
	where entityinstancecornerstoneentityuuid isNull
		and entityinstanceentitytemplatename = 'Customer';

-- displayname

	insert into public.languagemaster
	    (languagemastercustomerid,
	     languagemastersourcelanguagetypeid,
	     languagemastersource,
		 languagemasterrefuuid,
	     languagemastermodifiedby)
	select
		cust.customerid,
		20,
	    cust.customername,	
		entityinstanceuuid||'-customerdisplayname',
		337
	from entity.entityinstance
		inner join customer cust
			on customerid = entityinstanceoriginalid
				and entityinstancetypeentityuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer')  -- Flip these to the function in the future
				and cust.customermodifieddate > insertdate
				and cust.customermodifieddate < now() - interval '15 minutes'
		inner join entity.entitytemplate
			on entityinstanceentitytemplateentityuuid = entitytemplateuuid
		inner join entity.entityfield
			on entityfieldentitytemplateentityuuid = entitytemplateuuid	
				and entityfieldname = 'customerdisplayname'
		left join entity.entityfieldinstance
			on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
				and entityfieldinstanceentityfieldentityuuid = entityfielduuid
	where entityfieldinstanceuuid isNull;
	
	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagemasteruuid, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	select 
		entityinstanceuuid,
		entityinstanceownerentityuuid,
		customername,
		languagemasteruuid,
		(select systagentityuuid
			from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
			where systagid = 20 ),  -- Maybe just replace this with the UUID
		customercreateddate,
		customermodifieddate,
		entityfielduuid,
		entitytemplatemodifiedbyuuid,
		entityfieldname
	from entity.entityinstance
		inner join customer
			on customerid = entityinstanceoriginalid
				and entityinstancetypeentityuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer') -- Flip these to the function in the future
				and customermodifieddate > insertdate
				and customermodifieddate < now() - interval '15 minutes'
		inner join entity.entitytemplate
			on entityinstanceentitytemplateentityuuid = entitytemplateuuid
		inner join entity.entityfield
			on entityfieldentitytemplateentityuuid = entitytemplateuuid	
				and entityfieldname = 'customerdisplayname'		
		inner join languagemaster
			on languagemasterrefuuid = entityinstanceuuid||'-customerdisplayname'
		left join entity.entityfieldinstance
			on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
				and entityfieldinstanceentityfieldentityuuid = entityfielduuid
	where entityfieldinstanceuuid isNull;

-- customerlanguagetypeuuid

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	select 
		entityinstanceuuid,
		entityinstanceownerentityuuid,
		(select systaguuid 
			from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid) 
			where systagid = customerlanguagetypeid),
		(select systagentityuuid
			from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
			where systagid = 20 ),  -- Maybe just replace this with the UUID
		customercreateddate,
		customermodifieddate,
		entityfielduuid,
		entitytemplatemodifiedbyuuid,
		entityfieldname
	from entity.entityinstance
		inner join customer
			on customerid = entityinstanceoriginalid
				and entityinstancetypeentityuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer')  -- Flip these to the function in the future
				and customermodifieddate > insertdate
				and customermodifieddate < now() - interval '15 minutes'
		inner join entity.entitytemplate
			on entityinstanceentitytemplateentityuuid = entitytemplateuuid
		inner join entity.entityfield
			on entityfieldentitytemplateentityuuid = entitytemplateuuid	
				and entityfieldname = 'customerlanguagetypeentityuuid'
		left join entity.entityfieldinstance
			on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
				and entityfieldinstanceentityfieldentityuuid = entityfielduuid
	where entityfieldinstanceuuid isNull;

-- customertypeuuid

	INSERT INTO entity.entityfieldinstance(
		entityfieldinstanceentityinstanceentityuuid, 
		entityfieldinstanceownerentityuuid, 
		entityfieldinstancevalue, 
		entityfieldinstancevaluelanguagetypeentityuuid, 
		entityfieldinstancecreateddate, 
		entityfieldinstancemodifieddate, 
		entityfieldinstanceentityfieldentityuuid, 
		entityfieldinstancemodifiedbyuuid,
		entityfieldinstanceentityfieldname)
	select 
		entityinstanceuuid,
		entityinstanceownerentityuuid,
		(select systagentityuuid
			from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
			where systaguuid = customertypeuuid ),
		(select systagentityuuid
			from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
			where systagid = 20 ),  
		customercreateddate,
		customermodifieddate,
		entityfielduuid,
		entitytemplatemodifiedbyuuid,
		entityfieldname
	from entity.entityinstance
		inner join customer
			on customerid = entityinstanceoriginalid
				and entityinstancetypeentityuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'Customer')  -- Flip these to the function in the future
				and customermodifieddate > insertdate
				and customermodifieddate < now() - interval '15 minutes'
		inner join entity.entitytemplate
			on entityinstanceentitytemplateentityuuid = entitytemplateuuid
		inner join entity.entityfield
			on entityfieldentitytemplateentityuuid = entitytemplateuuid	
				and entityfieldname = 'customertypeuuid'		
		left join entity.entityfieldinstance
			on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
				and entityfieldinstanceentityfieldentityuuid = entityfielduuid
	where entityfieldinstanceuuid isNull;

-- update any modified customers
	
	if (select count(*) 
		from customer cust 
			inner join (select * from entity.crud_customer_read_min(null,null, null, true,null,null, null, null)) as ent
				on cust.customerid = ent.customerid
					and cust.customermodifieddate > updatedate
					and cust.customermodifieddate < now() - interval '10 minutes'
		where cust.customermodifieddate <> ent.customermodifieddate) > 0
	then
		-- create list of modified customers
		create temp table custmodified  as 
			(select cust.*, 
				ent.customerid as ent_customerid, 
				ent.customeruuid as ent_customeruuid, 
				ent.customerentityuuid as ent_customerentityuuid, 
				ent.customernameuuid as ent_customernameuuid, 
				ent.customerdisplaynameuuid as ent_customerdisplaynameuuid, 
				ent.customertypeentityuuid as ent_customertypeentityuuid, 
				ent.customercreateddate as ent_customercreateddate, 
				ent.customermodifieddate as ent_customermodifieddate, 
				ent.customerstartdate as ent_customerstartdate, 
				ent.customerenddate as ent_customerenddate, 
				ent.customermodifiedbyuuid as ent_customermodifiedbyuuid, 
				ent.customerexternalid as ent_customerexternalid, 
				ent.customerexternalsystementityuuid as ent_customerexternalsystementityuuid, 
				ent.customerlanguagetypeentityuuid as ent_customerlanguagetypeentityuuid 
	  		from customer cust 
				inner join (select * from entity.crud_customer_read_min(null,null, null, true,null,null, null, null)) as ent
					on cust.customerid = ent.customerid
						and cust.customermodifieddate > updatedate
						and cust.customermodifieddate < now() - interval '15 minutes'
			where cust.customermodifieddate <> ent.customermodifieddate);

	-- customerlanguagetypeuuid
		update entity.entityfieldinstance
		set entityfieldinstancevalue = (select systagentityuuid
										from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
										where systagid = customerlanguagetypeid )::text,
			entityfieldinstancemodifieddate = customermodifieddate
		from custmodified cust 
		where  entityfieldinstanceentityinstanceentityuuid = cust.ent_customerentityuuid
			and entityfieldinstanceentityfieldname = 'customerlanguagetypeuuid';

	-- customertypeuuid
		update entity.entityfieldinstance
		set entityfieldinstancevalue = (select systagentityuuid
										from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)
										where systaguuid = customertypeuuid )::text,
			entityfieldinstancemodifieddate = customermodifieddate
		from custmodified cust 
		where  entityfieldinstanceentityinstanceentityuuid = cust.ent_customerentityuuid
			and entityfieldinstanceentityfieldname = 'customertypeuuid';

	-- entity
		update entity.entityinstance
		set entityinstancemodifieddate = customermodifieddate,
			entityinstanceenddate = customerenddate,
			entityinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = customermodifiedby)  -- Eventually migrate to entity model
		from custmodified cust 
		where entityinstanceuuid = cust.ent_customerentityuuid
			and entityinstanceentitytemplatename = 'Customer';

	drop table custmodified;

end if;

  if exists(select 1 from pg_namespace where nspname = 'datawarehouse') then
    if  (select dwlogginglevel4 from datawarehouse.dw_logginglevels) = false
      Then Return;
    end if;

    call datawarehouse.insert_tendy_tracker(0, 2520, 12496, 811, 844, 20782, 18068, 20783,20781, customer_start);
  end if;


End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.import_entity_customer(text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity_customer(text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity_customer(text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.import_entity_customer(text) TO graphql;

-- Type: PROCEDURE ; Name: entity.import_entity_location(text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.import_entity_location(IN intervaltype text)
 LANGUAGE plpgsql
AS $procedure$
Declare
   location_start timestamp with time zone;
	maxdate timestamp with time zone;
--	updatedate timestamp with time zone;
	insertdate timestamp with time zone;
	englishuuid uuid;
	
Begin

	englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	
-- Start the timer on this function
	location_start = clock_timestamp();
	maxdate = 	(select max(locationmodifieddate) 
					from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid));

	insertdate = 
		case
			when intervaltype = '5 minute' and maxdate notNull
				Then (select (max(locationmodifieddate)- interval '1 hour') 
						from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid))
			when intervaltype = '1 hour' and maxdate notNull
				Then (select (max(locationmodifieddate)- interval '2 hour') 
						from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid))			
			Else '01/01/1900'
		end;	

--------- move parent and cornerstone joins to left then reset them if they are null to self.  

INSERT INTO entity.entityinstance(
	entityinstanceoriginalid, 
	entityinstanceoriginaluuid, 
	entityinstanceownerentityuuid, 
	entityinstanceparententityuuid,
	entityinstancecornerstoneentityuuid,
	entityinstancecornerstoneorder,
	entityinstancescanid,
	entityinstanceentitytemplateentityuuid, 
	entityinstancetypeentityuuid, 
	entityinstancecreateddate, 
	entityinstancemodifieddate, 
	entityinstancestartdate, 
	entityinstanceenddate, 
	entityinstanceexternalid, 
	entityinstanceexternalsystementityuuid,
	entityinstancemodifiedbyuuid, 
	entityinstancerefid,
	entityinstancerefuuid,
	entityinstanceentitytemplatename,
	entityinstancetype,
	entityinstancenameuuid
	)
SELECT 
	loc.locationid,
	loc.locationuuid,
	(select entityinstanceuuid from entity.entityinstance 
		where entityinstanceoriginalid = loc.locationcustomerid 
			and entityinstanceentitytemplatename = 'Customer'),
	parent.locationentityuuid,
	corner.locationentityuuid,	
	loc.locationcornerstoneorder::integer,
	loc.locationscanid,	
	(select entitytemplateuuid from entity.entitytemplate where entitytemplatescanid = 'Location'),
	(select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatescanid = 'Location'),
	loc.locationcreateddate, 
	loc.locationmodifieddate, 	
	loc.locationstartdate, 
	loc.locationenddate, 
	loc.locationexternalid, 
	sys.systagentityuuid,
	(select workerinstanceuuid from workerinstance where workerinstanceid = locationcreatedby), 
	loc.locationrefid, 
	loc.locationrefuuid,
	'Location',
	(select languagemastersource from languagemaster where languagemasterid = locationnameid),
	(select languagemasteruuid from languagemaster where languagemasterid = locationnameid)
FROM public.location loc
	left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid)) parent
		on parent.locationid = loc.locationparentid
	left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid)) corner
		on corner.locationid = loc.locationcornerstoneid
	left join (select * from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid)) existing
		on existing.locationid = loc.locationid
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,englishuuid)) as sys
		on sys.systagid = loc.locationexternalsystemid
where existing.locationentityuuid isNull 
	and loc.locationmodifieddate > insertdate
	and loc.locationmodifieddate < (now() - interval '10 minutes');

-- set parent and cornerstone to self if they are null

update entity.entityinstance
	set entityinstanceparententityuuid = entityinstanceuuid
	where entityinstanceparententityuuid isNull
		and entityinstanceentitytemplatename = 'Location';

update entity.entityinstance
	set entityinstancecornerstoneentityuuid = entityinstanceuuid
	where entityinstancecornerstoneentityuuid isNull
		and entityinstanceentitytemplatename = 'Location';		

-- locationdisplayname

insert into public.languagemaster
    (languagemastercustomerid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
	 languagemasterrefuuid,
     languagemastermodifiedby)
select
	locationcustomerid,
	20,
    locationlookupname,	
	ent.entityinstanceuuid||'-locationdisplayname',
	337
from entity.entityinstance ent
	inner join location
		on locationid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'Location'
			and locationmodifieddate > insertdate
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'locationdisplayname'
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancevaluelanguagemasteruuid, 
	entityfieldinstancevaluelanguagetypeentityuuid, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	entityinstanceuuid,
	entityinstanceownerentityuuid,
	languagemastersource,
	languagemasteruuid,
	(select entityinstanceuuid from entity.entityinstance 
		where entityinstanceoriginalid in 
								(select languagemastersourcelanguagetypeid 
									from languagemaster where languagemasterid = locationnameid)
			and entityinstanceentitytemplatename = 'System Tag'),
	locationcreateddate,
	locationmodifieddate,
	entityfielduuid,
	entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance
	inner join location
		on locationid = entityinstanceoriginalid
			and entityinstanceentitytemplatename = 'Location'
			and locationmodifieddate > insertdate
	inner join entity.entitytemplate
		on entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'locationdisplayname'
	inner join languagemaster
		on languagemasterrefuuid = entityinstanceuuid||'-locationdisplayname'
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

-- locationtimezone

insert into public.languagemaster
    (languagemastercustomerid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
	 languagemasterrefuuid,
     languagemastermodifiedby,
	 languagemasterstatus)
select
	locationcustomerid,
	20,
    locationtimezone,	
	ent.entityinstanceuuid||'-locationtimezone',
	337,
	'NEVER_TRANSLATE'
from entity.entityinstance ent
	inner join location
		on locationid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'Location'
			and locationmodifieddate > insertdate
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'locationtimezone' 
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancevaluelanguagemasteruuid, 
	entityfieldinstancevaluelanguagetypeentityuuid, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	entityinstanceuuid,
	entityinstanceownerentityuuid,
	languagemastersource,
	languagemasteruuid,
	(select entityinstanceuuid from entity.entityinstance 
		where entityinstanceoriginalid in 
								(select languagemastersourcelanguagetypeid 
									from languagemaster where languagemasterid = locationnameid)
			and entityinstanceentitytemplatename = 'System Tag'),
	locationcreateddate,
	locationmodifieddate,
	entityfielduuid,
	entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance
	inner join location
		on locationid = entityinstanceoriginalid
			and entityinstanceentitytemplatename = 'Location'
			and locationmodifieddate > insertdate
	inner join entity.entitytemplate
		on entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'locationtimezone'
	inner join languagemaster
		on languagemasterrefuuid = entityinstanceuuid||'-locationtimezone'  
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

-- locationlatitude

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	ent.entityinstanceuuid,
	ent.entityinstanceownerentityuuid,
	loc.locationlatitude::text,
	loc.locationcreateddate,
	loc.locationmodifieddate,
	entityfielduuid,
	ent.entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance ent
	inner join location loc
		on loc.locationid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'Location'
			and locationmodifieddate > insertdate
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'locationlatitude'  
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

-- locationlongitude

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	ent.entityinstanceuuid,
	ent.entityinstanceownerentityuuid,
	loc.locationlatitude::text,
	loc.locationcreateddate,
	loc.locationmodifieddate,
	entityfielduuid,
	ent.entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance ent
	inner join location loc
		on loc.locationid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'Location'
			and locationmodifieddate > insertdate
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'locationlongitude' 
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

-- locationradius

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	ent.entityinstanceuuid,
	ent.entityinstanceownerentityuuid,
	loc.locationlatitude::text,
	loc.locationcreateddate,
	loc.locationmodifieddate,
	entityfielduuid,
	ent.entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance ent
	inner join location loc
		on loc.locationid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'Location'
			and locationmodifieddate > insertdate
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'locationradius'  
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

--	locationcategoryid 

INSERT INTO entity.entitytag(
	entitytagownerentityuuid, 
	entitytagentityinstanceentityuuid,
	entitytagentitytemplateentityuuid,
	entitytagcreateddate, 
	entitytagmodifieddate, 
	entitytagstartdate, 
	entitytagenddate, 
	entitytagmodifiedbyuuid,
	entitytagcustagentityuuid)
select 
	ent.entityinstanceownerentityuuid,
	ent.entityinstanceuuid,
	ent.entityinstanceentitytemplateentityuuid,
	loc.locationcreateddate,
	loc.locationmodifieddate,
	loc.locationstartdate,
	loc.locationenddate,
	ent.entityinstancemodifiedbyuuid,
	eitag.entityinstanceuuid
from entity.entityinstance ent
	inner join location loc
		on loc.locationid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'Location'  
			and locationmodifieddate > insertdate
	inner join entity.entityinstance eitag
		on loc.locationcategoryid = eitag.entityinstanceoriginalid
			and eitag.entityinstanceentitytemplatename = 'Customer Tag'
	left join entity.entitytag tag
		on  tag.entitytagentityinstanceentityuuid = ent.entityinstanceuuid
			and eitag.entityinstanceoriginalid = (select custagid from custag where custagid = loc.locationcategoryid)
where entitytaguuid isNull;

-- update any modified locations

-------  TRIM THIS TABLE TO NEEDED DATA>  RIGHT NOW I GRAB EVERYTHING ------

create temp table locmodified  as
(select loc.*,
	ent.languagetranslationtypeentityuuid as ent_languagetranslationtypeuuid, 
	ent.locationid as ent_locationid, 
	ent.locationuuid as ent_locationuuid, 
	ent.locationownerentityuuid as ent_locationownerentityuuid,
	ent.locationparententityuuid as ent_locationparententityuuid, 
	ent.locationcornerstoneentityuuid as ent_locationcornerstoneentityuuid, 
	ent.locationentityuuid as ent_locationentityuuid, 
	ent.locationcustomerid as ent_locationcustomerid, 	
	ent.locationcustomeruuid as ent_locationcustomeruuid, 
	ent.locationcustomerentityuuid as ent_locationcustomerentityuuid, 
	ent.locationnameuuid as ent_locationnameuuid, 
	ent.locationdisplaynameuuid as ent_locationdisplaynameuuid, 
	ent.locationscanid as ent_locationscanid, 
	ent.locationcreateddate as ent_locationcreateddate, 
	ent.locationmodifieddate as ent_locationmodifieddate, 
	ent.locationmodifiedbyuuid as ent_locationmodifiedbyuuid, 
	ent.locationstartdate as ent_locationstartdate, 
	ent.locationenddate as ent_locationenddate, 
	ent.locationexternalid as ent_locationexternalid, 
	ent.locationexternalsystementityuuid as ent_locationexternalsystementityuuid, 	
	ent.locationcornerstoneorder as ent_locationcornerstoneorder, 
	ent.locationlatitude as ent_locationlatitude, 
	ent.locationlongitude as ent_locationlongitude, 
	ent.locationradius as ent_locationradius, 
	ent.locationtimezone as ent_locationtimezone, 
	ent.locationtagentityuuid as ent_locationtagentityuuid 
from view_location loc 
		inner join (select * 
					from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid)) as ent
			on loc.locationid = ent.locationid
				and languagetranslationtypeid = 20
	where loc.locationmodifieddate <> ent.locationmodifieddate);

if (select count(*) from locmodified) > 0
	then
		
		-- locationdisplayname
		
		update languagemaster
		set languagemastersource = locationfullname,
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION',
			languagemastermodifieddate = now()
		from locmodified 
		where languagemasteruuid = ent_locationdisplaynameuuid;
		
		-- locationtimezone
		
		update entity.entityfieldinstance
		set entityfieldinstancevalue = locationtimezone,
			entityfieldinstancemodifieddate = locationmodifieddate
		from locmodified loc
		where entityfieldinstanceentityinstanceentityuuid = loc.ent_locationentityuuid
			and entityfieldinstanceentityfieldname = 'locationtimezone';

		update languagemaster
		set languagemastersource = loc.locationtimezone,
			languagemasterstatus = 'NEVER_TRANSLATE',
			languagemastermodifieddate = now()
		from locmodified loc
			inner join entity.entityfieldinstance efitz
				on efitz.entityfieldinstanceentityinstanceentityuuid = loc.ent_locationentityuuid
					and efitz.entityfieldinstanceentityfieldname = 'locationtimezone'
		where languagemasteruuid = efitz.entityfieldinstancevaluelanguagemasteruuid;		
		

		-- locationlatitude
		
		update entity.entityfieldinstance
		set entityfieldinstancevalue = locationlatitude::text,
			entityfieldinstancemodifieddate = locationmodifieddate
		from locmodified loc
		where entityfieldinstanceentityinstanceentityuuid = loc.ent_locationentityuuid
			and entityfieldinstanceentityfieldname = 'locationlatitude';
		
		
		-- locationlongitude
		
		update entity.entityfieldinstance
		set entityfieldinstancevalue = locationlongitude::text,
			entityfieldinstancemodifieddate = locationmodifieddate
		from locmodified loc
		where entityfieldinstanceentityinstanceentityuuid = loc.ent_locationentityuuid
			and entityfieldinstanceentityfieldname = 'locationlongitude';
		
		-- locationradius
		
		update entity.entityfieldinstance
		set entityfieldinstancevalue = locationradius::text,
			entityfieldinstancemodifieddate = locationmodifieddate
		from locmodified loc
		where entityfieldinstanceentityinstanceentityuuid = loc.ent_locationentityuuid
			and entityfieldinstanceentityfieldname = 'locationradius';
		

		--	locationcategoryid 

		update entity.entitytag
		set --entitytagcustaguuid = (select custaguuid from custag where custagid = loc.locationcategoryid),
			entitytagmodifieddate = locationmodifieddate,
			entitytagcustagentityuuid = eitag.entityinstanceuuid
		from locmodified loc
			inner join entity.entityinstance eitag
				on loc.locationcategoryid = eitag.entityinstanceoriginalid
					and eitag.entityinstanceentitytemplatename = 'Customer Tag'
		where entitytagentityinstanceentityuuid = loc.ent_locationentityuuid;
		
		-- entity

		update entity.entityinstance
		set entityinstancemodifieddate = loc.locationmodifieddate,
			entityinstanceenddate = loc.locationenddate,
			entityinstancecornerstoneorder = loc.locationcornerstoneorder::integer,
			entityinstancescanid = loc.locationscanid,
			entityinstanceparententityuuid = parent.locationentityuuid,
			entityinstancecornerstoneentityuuid = corner.locationentityuuid,
			entityinstancetype = (select languagemastersource from languagemaster where languagemasterid = loc.locationnameid)
		from locmodified loc
			inner join (select * from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid)) parent
				on parent.locationid = loc.locationparentid
			inner join (select * from entity.crud_location_read_min(null,null,null,null,true,null,null,null,null,englishuuid)) corner
				on corner.locationid = loc.locationcornerstoneid			
		where entityinstanceuuid = loc.ent_locationentityuuid
			and entityinstanceentitytemplatename = 'Location';
		
end if;

drop table locmodified;

  if exists(select 1 from pg_namespace where nspname = 'datawarehouse') then
    if  (select dwlogginglevel4 from datawarehouse.dw_logginglevels) = false
      Then Return;
    end if;

    call datawarehouse.insert_tendy_tracker(0, 2521, 12496, 811, 844, 20786, 18068, 20787,20785, customer_start);
  end if;


End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.import_entity_location(text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity_location(text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity_location(text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.import_entity_location(text) TO graphql;

-- Type: PROCEDURE ; Name: entity.import_entity_systag(text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.import_entity_systag(IN intervaltype text)
 LANGUAGE plpgsql
AS $procedure$
Declare
   location_start timestamp with time zone;
	maxdate timestamp with time zone;
--	updatedate timestamp with time zone;
	insertdate timestamp with time zone;
	tempenglishentityuuid uuid;
	temptendrelenitytuuid uuid;
	tempentitytemplateuuid uuid;
	tempentitytemplatetypeuuid uuid;	
Begin

tempenglishentityuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
temptendrelenitytuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
tempentitytemplateuuid = (select entitytemplateuuid from entity.entitytemplate where entitytemplatename = 'System Tag');
tempentitytemplatetypeuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'System Tag');

-- Start the timer on this function
	location_start = clock_timestamp();
	maxdate = 	(select max(systagmodifieddate) 
					from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid));

	insertdate = 
		case
			when intervaltype = '5 minute' and maxdate notNull
				Then (select (max(systagmodifieddate)- interval '1 hour') 
						from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid))
			when intervaltype = '1 hour' and maxdate notNull
				Then (select (max(systagmodifieddate)- interval '2 hour') 
						from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid))			
			Else '01/01/1900'
		end;	

--------------------------------------		

INSERT INTO entity.entityinstance(
	entityinstanceoriginalid, 
	entityinstanceoriginaluuid, 
	entityinstanceownerentityuuid, 
	entityinstanceparententityuuid,
	entityinstanceentitytemplateentityuuid, 
	entityinstancetypeentityuuid, 
	entityinstancecreateddate, 
	entityinstancemodifieddate, 
	entityinstancestartdate, 
	entityinstanceenddate, 
	entityinstanceexternalid, 
	entityinstanceexternalsystemuuid,
	entityinstanceexternalsystementityuuid,
	entityinstancemodifiedbyuuid, 
	entityinstancerefid,
	entityinstancerefuuid,
	entityinstancecornerstoneorder,
	entityinstanceentitytemplatename,
	entityinstancetype,
	entityinstancenameuuid,
	entityinstancedeleted, 
	entityinstancedraft	
	)
Select
	tag.systagid,
	tag.systaguuid,
	(select entityinstanceuuid from entity.entityinstance 
		where entityinstanceoriginalid = 0 
			and entityinstanceentitytemplatename = 'Customer'),
	parent.entityinstanceuuid,		
	tempentitytemplateuuid,
	tempentitytemplatetypeuuid,
	tag.systagcreateddate,
	tag.systagmodifieddate, 
	tag.systagstartdate, 
	tag.systagenddate, 
	tag.systagexternalid,
	null,
	sys.systagentityuuid as systagexternalsystementityuuid,	
	(select workerinstanceuuid from workerinstance where workerinstanceid = tag.systagmodifiedby),
	tag.systagrefid, 
	tag.systagrefuuid,	
	tag.systagorder::integer,
	'System Tag',
	tag.systagtype,
	(select languagemasteruuid from languagemaster where languagemasterid = tag.systagnameid),
	false,
	false	
from systag tag
	inner join entity.entityinstance parent
		on tag.systagparentid = parent.entityinstanceoriginalid
			and parent.entityinstanceentitytemplatename = 'System Tag'
	left join entity.entityinstance instanceexists
		on tag.systagid = instanceexists.entityinstanceoriginalid
			and instanceexists.entityinstancetypeentityuuid = (select entitytemplatetypeentityuuid from entity.entitytemplate where entitytemplatename = 'System Tag')
	left join (select * from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid)) as sys
		on sys.systagid = tag.systagexternalsystemid
where instanceexists.entityinstanceuuid isNull 
	and tag.systagmodifieddate > insertdate
	and tag.systagmodifieddate < (now() - interval '10 minutes') ;

-- set cornerstone

update entity.entityinstance
set entityinstancecornerstoneentityuuid = entityinstanceuuid
where entityinstanceentitytemplatename in ('System Tag') 
	and entityinstancecornerstoneentityuuid isNull;

-- systagdisplayname

insert into public.languagemaster
    (languagemastercustomerid,
     languagemastersourcelanguagetypeid,
     languagemastersource,
	 languagemasterrefuuid,
     languagemastermodifiedby)
select
	systagcustomerid,
	20,
    systagtype,	
	ent.entityinstanceuuid||'-systagdisplayname',
	337
from entity.entityinstance ent
	inner join systag
		on systagid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'System Tag'
			and systagmodifieddate > insertdate
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'systagdisplayname'
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancevaluelanguagemasteruuid, 
	entityfieldinstancevaluelanguagetypeentityuuid, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	entityinstanceuuid,
	entityinstanceownerentityuuid,
	languagemastersource,
	languagemasteruuid,
	(select entityinstanceuuid from entity.entityinstance 
		where entityinstanceoriginaluuid in 
				(select systaguuid from systag 
				where systagid in (languagemastersourcelanguagetypeid))),
	systagcreateddate,
	systagmodifieddate,
	entityfielduuid,
	entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance
	inner join systag
		on systagid = entityinstanceoriginalid
			and entityinstanceentitytemplatename = 'System Tag'
			and systagmodifieddate > insertdate
	inner join entity.entitytemplate
		on entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'systagdisplayname'
	inner join languagemaster
		on languagemasterrefuuid = entityinstanceuuid||'-systagdisplayname'
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;

-- systagabbreviationentityuuid

INSERT INTO entity.entityfieldinstance(
	entityfieldinstanceentityinstanceentityuuid, 
	entityfieldinstanceownerentityuuid, 
	entityfieldinstancevalue, 
	entityfieldinstancecreateddate, 
	entityfieldinstancemodifieddate, 
	entityfieldinstanceentityfieldentityuuid, 
	entityfieldinstancemodifiedbyuuid,
	entityfieldinstanceentityfieldname)
select 
	ent.entityinstanceuuid,
	ent.entityinstanceownerentityuuid,
	abb.entityinstanceuuid,
	loc.systagcreateddate,
	loc.systagmodifieddate,
	entityfielduuid,
	ent.entityinstancemodifiedbyuuid,
	entityfieldname
from entity.entityinstance ent
	inner join systag loc
		on loc.systagid = ent.entityinstanceoriginalid
			and ent.entityinstanceentitytemplatename = 'System Tag'
			and systagmodifieddate > insertdate
	left join entity.entityinstance abb
		on loc.systagabbreviationid = abb.entityinstanceoriginalid
	inner join entity.entitytemplate
		on ent.entityinstanceentitytemplateentityuuid = entitytemplateuuid
	inner join entity.entityfield
		on entityfieldentitytemplateentityuuid = entitytemplateuuid	
			and entityfieldname = 'systagabbreviationentityuuid'
	left join entity.entityfieldinstance
		on entityfieldinstanceentityinstanceentityuuid = ent.entityinstanceuuid
			and entityfieldinstanceentityfieldentityuuid = entityfielduuid
where entityfieldinstanceuuid isNull;


-- update any modified systags

-------  TRIM THIS TABLE TO NEEDED DATA.  RIGHT NOW I GRAB EVERYTHING ------

create temp table sysmodified  as
(select sys.*,
	ent.languagetranslationtypeentityuuid as languagetranslationtypeentityuuid, 
	ent.systagid as ent_systagid, 
	ent.systaguuid as ent_systaguuid, 
	ent.systagentityuuid as ent_systagentityuuid, 
	ent.systagcustomerid as ent_systagcustomerid, 
	ent.systagcustomeruuid as ent_systagcustomeruuid, 
	ent.systagcustomerentityuuid as ent_systagcustomerentityuuid, 
	ent.systagnameuuid as ent_systagnameuuid, 
	ent.systagdisplaynameuuid as ent_systagdisplaynameuuid, 
	ent.systagtype as ent_systagtype, 
	ent.systagcreateddate as ent_systagcreateddate, 
	ent.systagmodifieddate as ent_systagmodifieddate, 
	ent.systagstartdate as ent_systagstartdate, 
	ent.systagenddate as ent_systagenddate, 
	ent.systagexternalid as ent_systagexternalid, 
	ent.systagexternalsystementityuuid as ent_systagexternalsystementityuuid, 
	ent.systagmodifiedbyuuid as ent_systagmodifiedbyuuid, 
	ent.systagabbreviationentityuuid as ent_systagabbreviationentityuuid, 
	ent.systagparententityuuid as ent_systagparententityuuid, 
	ent.systagorder as ent_systagorder 
from systag sys 
		inner join (select * 
			from entity.crud_systag_read_min(null,null,null, null, true,null,null, null,tempenglishentityuuid)) as ent
				on sys.systagid = ent.systagid
where sys.systagmodifieddate <> ent.systagmodifieddate
		and sys.systagmodifieddate > insertdate);

if (select count(*) from sysmodified) > 0
	then

		-- systagname
	
		update languagemaster
		set languagemastersource = systagtype,
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION',
			languagemastermodifieddate = now()
		from sysmodified 
		where languagemasteruuid = ent_systagnameuuid;
		
		-- systagdisplayname
		
		update languagemaster
		set languagemastersource = systagtype,
			languagemasterstatus = 'NEEDS_COMPLETE_RETRANSLATION',
			languagemastermodifieddate = now()
		from sysmodified 
		where languagemasteruuid = ent_systagdisplaynameuuid;

			
		-- systagabbreviationentityuuid

		update entity.entityfieldinstance efi
		set entityfieldinstancevalue = abb.entityinstanceuuid::text,
			entityfieldinstancemodifieddate = systagmodifieddate	
		from sysmodified sysmod
			inner join entity.entityfieldinstance efiabb
				on efiabb.entityfieldinstanceentityinstanceentityuuid = ent_systagentityuuid
					and efiabb.entityfieldinstanceentityfieldname = 'systagabbreviationentityuuid'
			left join entity.entityinstance abb
				on sysmod.systagparentid = abb.entityinstanceoriginalid   
					and abb.entityinstanceentitytemplatename = 'System Tag'
		where  efi.entityfieldinstanceuuid = efiabb.entityfieldinstanceuuid;		

		-- entity
			update entity.entityinstance ent
			set 
				entityinstanceownerentityuuid = cust.entityinstanceuuid,
				entityinstancecreateddate = sysmod.systagcreateddate, 
				entityinstancemodifieddate = sysmod.systagmodifieddate, 
				entityinstancestartdate = sysmod.systagstartdate, 
				entityinstanceenddate = sysmod.systagenddate, 
				entityinstanceexternalid = sysmod.systagexternalid, 
				entityinstancemodifiedbyuuid = (select workerinstanceuuid from workerinstance where workerinstanceid = sysmod.systagmodifiedby),
				entityinstancetype = sysmod.systagtype
			from sysmodified sysmod
				inner join entity.entityinstance cust
					on sysmod.systagcustomerid = cust.entityinstanceoriginalid
						and cust.entityinstanceentitytemplatename = 'Customer'
			where sysmod.ent_systaguuid = ent.entityinstanceoriginaluuid;

end if;

drop table sysmodified;



/*
if  (select dwlogginglevel4 from datawarehouse.dw_logginglevels) = false
	Then Return;
end if;

call datawarehouse.insert_tendy_tracker(0, 2521, 12496, 811, 844, 20786, 18068, 20787,20785, customer_start);
*/

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.import_entity_systag(text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity_systag(text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_entity_systag(text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.import_entity_systag(text) TO graphql;

-- Type: PROCEDURE ; Name: entity.import_workresultinstanceentityvalue(text); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.import_workresultinstanceentityvalue(IN intervaltype text)
 LANGUAGE plpgsql
AS $procedure$
Declare
   location_start timestamp with time zone;
	maxdate timestamp with time zone;
--	updatedate timestamp with time zone;
	startdate timestamp with time zone;

Begin

-- Start the timer on this function
	location_start = clock_timestamp();

	maxdate = (select (max(workinstancemodifieddate)) from workinstance);

	startdate = 
		case 
			when intervaltype = '5 minute' and maxdate notNull 
				Then (select (max(workinstancemodifieddate) - interval '130 minute') as startdate from workinstance)
			when intervaltype = '1 hour' and maxdate notNull 
				Then (select (max(workinstancemodifieddate) - interval '8 hour') as startdate from workinstance)
			Else '01/01/1900'
		end;	



update public.workresultinstance wri1
set workresultinstanceentityvalue = entityinstanceuuid
from (select * 
		from public.workresultinstance wri2
			inner join public.workresult	
				on wri2.workresultinstanceworkresultid = workresultid
					and workresultentitytypeid = 852
					and (wri2.workresultinstancevalue notNull 
							and coalesce (wri2.workresultinstancevalue,'') <> '')
					and wri2.workresultinstanceentityvalue isNull
					and wri2.workresultinstancemodifieddate > startdate
			inner join entity.entityinstance
				on wri2.workresultinstancevalue::bigint = entityinstanceoriginalid
					and entityinstanceentitytemplatename = 'Location') as foo
where foo.workresultinstanceid = wri1.workresultinstanceid;

/*
if  (select dwlogginglevel4 from datawarehouse.dw_logginglevels) = false
	Then Return;
end if;

call datawarehouse.insert_tendy_tracker(0, 2521, 12496, 811, 844, 20786, 18068, 20787,20785, customer_start);
*/

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.import_workresultinstanceentityvalue(text) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_workresultinstanceentityvalue(text) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.import_workresultinstanceentityvalue(text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.import_workresultinstanceentityvalue(text) TO graphql;

-- Type: PROCEDURE ; Name: entity.test_entity(); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.test_entity()
 LANGUAGE plpgsql
AS $procedure$
Declare
    fact_start timestamp with time zone;
    fact_end timestamp with time zone;	
	failedtest boolean;
Begin

 -- Start the timer on this function
    fact_start = clock_timestamp();
	failedtest = false;
-- Need to add full versions
-- call entity.test_entity()

-- entity templates
RAISE NOTICE  E'testing entity templates\n-------\n';

RAISE NOTICE  E'testing all customers all templates\n-------';

if (select count(*) from entity.func_entitytemplate_read_min(null, null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(null, null, null)> 0  Time: %', (clock_timestamp()-fact_start)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(null, null, null)> 0  Time: %', (clock_timestamp()-fact_start)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_read_full(null, null, null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_read_full(null, null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_read_full(null, null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer all templates\n-------';

if (select count(*) from entity.func_entitytemplate_read_min(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_read_full(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer specific entity template\n-------';

if (select count(*) from entity.func_entitytemplate_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','957df2f9-051f-4af5-95ee-ea3760fbb83b',	null)) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','957df2f9-051f-4af5-95ee-ea3760fbb83b',	null)) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 1  Time: %\n', (clock_timestamp()-fact_end)::text;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 1  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'negative test - empty or wrong cutomer returns no templates\n-------';

if (select count(*) from entity.func_entitytemplate_read_min(null,'957df2f9-051f-4af5-95ee-ea3760fbb83b',	null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',	null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',	null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_read_full(null,'957df2f9-051f-4af5-95ee-ea3760fbb83b',	null)) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_read_full(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_read_full(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

-- Entity Fields
RAISE NOTICE  E'testing entity fields\n-------\n';

RAISE NOTICE  E'testing all customers all template all fields\n-------';

if (select count(*) from entity.func_entityfield_read_min(null, null, null,null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(null, null, null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*)from entity.func_entityfield_read_min(null, null, null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full(null, null, null,null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(null, null, null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*)from entity.func_entityfield_read_full(null, null, null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full(null, null, null,null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(null, null, null,null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*)from entity.func_entitytemplate_field_read_full(null, null, null,null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing all customers all template all fields\n-------';

-- specific customer no entity template no field
if (select count(*) from entity.func_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customers specific template all fields\n-------';

-- specific entity template
if (select count(*) from entity.func_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %\n\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customers specific template specific fields\n-------';

if (select count(*) from entity.func_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'negative tests - empty or wrong cutomer returns nothing\n-------';

if (select count(*) from entity.func_entityfield_read_min(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_min(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

-- Systags
RAISE NOTICE  E'testing systags\n-------\n';

RAISE NOTICE  E'testing all customers all systags\n-------';

if (select count(*) from entity.func_systag_read_min(null,null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full(null,null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer all systags\n-------';

if (select count(*) from entity.func_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing all systags for a parent\n-------';

if (select count(*) from entity.func_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing systag fail scenario for parent\n-------';

if (select count(*) from entity.func_systag_read_min(null,null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full(null,null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific systags\n-------';

if (select count(*) from entity.func_systag_read_min(null, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''=1)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''=1)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full(null, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'' = 1)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'' = 1)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'\ntesting customer\n-------\n';

RAISE NOTICE  E'testing specific customer\n-------';

if (select count(*) from entity.func_customer_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',false, null)) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_customer_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null)= 1  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_customer_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_customer_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',false, null)) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_customer_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null)=1  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_customer_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null)=1  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing all customers\n-------';

if (select count(*) from entity.func_customer_read_min(null,true, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_customer_read_min(null,true, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_customer_read_min(null,true, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_customer_read_full(null,true, null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_customer_read_full(null,true, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_customer_read_full(null,true, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing location\n-------\n';

RAISE NOTICE  E'testing all customers all locations all tags\n-------';
if (select count(*) from entity.func_location_read_min(null,null,true,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_location_read_min(null,null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_location_read_min(null,null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_location_read_full(null,null,true,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_location_read_full(null,null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_location_read_full(null,null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer all locations all tags\n-------';
if (select count(*) from entity.func_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,true,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,true,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer all locations specific tags\n-------';
if (select count(*) from entity.func_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,true,'c557ca4c-184a-4958-a49a-260ca6f6ee07','bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,''c557ca4c-184a-4958-a49a-260ca6f6ee07'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,''c557ca4c-184a-4958-a49a-260ca6f6ee07'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,true,'c557ca4c-184a-4958-a49a-260ca6f6ee07','bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,''c557ca4c-184a-4958-a49a-260ca6f6ee07'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,''c557ca4c-184a-4958-a49a-260ca6f6ee07'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific locations specific tags\n-------';
if (select count(*) from entity.func_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','af4dc39d-7d4a-46a4-9ad0-980c23bff933',false,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',false,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',false,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','af4dc39d-7d4a-46a4-9ad0-980c23bff933',false,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',false,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',false,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

-- custags  
RAISE NOTICE  E'testing custags\n-------\n';

RAISE NOTICE  E'testing all customers all custags \n-------';
if (select count(*) from entity.func_custag_read_min(null,null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full(null,null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customers all custags \n-------';
if (select count(*) from entity.func_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing all custags for a parent\n-------';
if (select count(*) from entity.func_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing fail scenario for parent\n-------';
if (select count(*) from entity.func_custag_read_min(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific custags\n-------';
if (select count(*) from entity.func_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing fail for custags\n-------';
if (select count(*) from entity.func_custag_read_min(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
End If;
fact_end = clock_timestamp();

if failedtest = true
	then RAISE NOTICE E'Fail:  At least one test failed  Time: %\n', (clock_timestamp()-fact_start)::text;
	else RAISE NOTICE E'Pass:  All tests passed  Time: %\n', (clock_timestamp()-fact_start)::text;
end if;

/*

if (select count(*) from entity.func_entitytemplate_read_min(null, null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(null, null, null)';	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(null, null, null)';
		failedtest = true;
End If;

-- Insert into the tendy tracker

    if (select dwlogginglevel2 from datawarehouse.dw_logginglevels) = false
    Then
        Return;
    end if;

    if intervaltype = '5 minute'
    Then
        call datawarehouse.insert_tendy_tracker(0, 2517, 12496, 980, 844, 20770, 18068, 20771, 20769, fact_start);
        Return;
    end if;

    if intervaltype = '1 hour'
    Then
        call datawarehouse.insert_tendy_tracker(0, 2518, 12496, 980, 844, 20774, 18068, 20775, 20773, fact_start);
        Return;
    end if;

    call datawarehouse.insert_tendy_tracker(0, 2519, 12496, 980, 844, 20778, 18068, 20779, 20777, fact_start);

    commit;
*/
End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.test_entity() FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.test_entity() TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.test_entity() TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.test_entity() TO graphql;

-- Type: PROCEDURE ; Name: entity.test_entity_create(boolean,bigint); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.test_entity_create(IN create_newcustomer boolean, IN create_modifiedby bigint, OUT create_failedtest boolean, OUT create_failedtestcount integer, OUT create_successtestcount integer, OUT create_passedtext text, OUT create_failedtext text)
 LANGUAGE plpgsql
AS $procedure$
Declare
    fact_start timestamp with time zone;
    fact_end timestamp with time zone;	
	temptext text;
	testmastercustomeruuid text;
	testmastercustomerentityuuid uuid;
	testsubcustomeruuid text;
	testsubcustomerentityuuid uuid;
	testsub2customeruuid text;
	testsub2customerentityuuid uuid;
	testsub4customeruuid text;
	testsub4customerentityuuid uuid;
	testsiteuuid uuid;
	testlocationuuid uuid;
	testlocation2uuid uuid;
	englishuuid uuid;
	spanishuuid uuid;
	billinguuid uuid;
	testcount integer;
	testsystagid bigint;
	testsystaguuid text;
	testsystagentityuuid uuid;	
	testcustagid bigint;
	testcustaguuid text;
	testcustagentityuuid uuid;	
	testsystagparentuuid uuid;
	tendreluuid uuid;
	testparentsystagid bigint;
	testparentsystaguuid text;
	testparentsystagentityuuid uuid;	
	testcustagparentuuid uuid;
	tendreltestuuid uuid;
	testtendrelcustagparentuuid uuid;
	testparentcustagid bigint;
	testparentcustaguuid text;
	testparentcustagentityuuid uuid;	
	testentitytemplateuuid uuid;
	testlocationcategoryuuid uuid;
	testentityfielduuid uuid;
	testentityfiel2duuid uuid;	
	testentityfieldtypeuuid uuid;
	testentitywidgettypeuuid uuid;
	testentitydescriptionuuid uuid;
	testentityinstanceuuid uuid;
	testentityfieldinstanceuuid uuid;
	testentityfileinstanceuuid uuid;
	
Begin
--  call entity.test_create( true, 337, null,null,null,null,null)
--  call entity.test_create( false, 337, null,null,null,null,null)

 -- Start the timer on this function
    fact_start = clock_timestamp();
	create_failedtest = false;
	temptext = '';
	create_failedtext = '';
	create_passedtext = '';
	create_failedtestcount = 0;
	create_successtestcount = 0;	
	englishuuid = 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9';
	spanishuuid = '6893da1e-96fa-4412-a340-5795219476cd';
	billinguuid = 'c486a0d3-7c44-4129-9629-53920de84215';
	tendreluuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61';
	testsystagparentuuid = '30f65cf5-97a0-4e3d-a518-056521bf4f3d';  -- old systemid we don't use
	testcustagparentuuid = 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba';
	tendreltestuuid = '70f200bd-1c92-481d-9f5c-e6cf6cd92cd0';
	testtendrelcustagparentuuid = 'a4cec370-72ed-4717-b1c7-1fcd01c866b2';
	testlocationcategoryuuid = 'bb05d944-f7ba-4e40-b1d7-f2e3c0608c4c';
	testentityfieldtypeuuid = '2de2bbde-6319-4886-a58d-bf9d369fc677';
	testentitywidgettypeuuid = '0bf3e80c-ff85-4f5a-9586-56519dca4d2e';
	
	

------------------------
-- create customer test
------------------------
if create_newcustomer = true  
	then  
		-- Create Master Account - Pass logic
		call entity.crud_customer_create(
			'Test Account (Master)'||clock_timestamp()::text, -- IN create_customername text,
			testmastercustomeruuid, -- OUT create_customeruuid text,
			testmastercustomerentityuuid, -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
			null, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
			null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
			('Bill'||clock_timestamp())::text, -- IN create_customerbillingid text,
			billinguuid, --	IN create_customerbillingsystemid uuid,
			null,
			null,
			ARRAY[englishuuid], -- IN create_languagetypeuuids uuid[],
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testmastercustomerentityuuid isNull 
			then create_failedtext = create_failedtext||'Create Master Account - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Master Account - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;
		
		-- Create English Sub Account - Pass logic
		if 	testmastercustomerentityuuid notNull 
			then 
				call entity.crud_customer_create(
					'Test English Account (Sub)'||clock_timestamp()::text, -- IN create_customername text,
					testsubcustomeruuid , -- OUT create_customeruuid text,
					testsubcustomerentityuuid  , -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
					testmastercustomerentityuuid, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
					null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
					('Bill'||clock_timestamp())::text, -- IN create_customerbillingid text,
					billinguuid, --	IN create_customerbillingsystemid uuid,
					null,
					null,
					ARRAY[englishuuid], -- IN create_languagetypeuuids uuid[],
					create_modifiedby );
				fact_end = 	clock_timestamp();
		end if;

		-- update the test score for pass and fail	
		if 	testsubcustomerentityuuid isNull 
			then create_failedtext = create_failedtext||'Create English Sub Account - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create English Sub Account - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

		-- Create Spanish Sub Account - Pass logic
		if 	testsubcustomerentityuuid notNull 
			then 
				call entity.crud_customer_create(
					'Test Spanish Account (Sub)'||clock_timestamp()::text, -- IN create_customername text,
					testsub2customeruuid  , -- OUT create_customeruuid text,
					testsub2customerentityuuid   , -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
					testmastercustomerentityuuid, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
					null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
					('Bill'||clock_timestamp())::text, -- IN create_customerbillingid text,
					billinguuid, --	IN create_customerbillingsystemid uuid,
					null,
					null,
					ARRAY[spanishuuid], -- IN create_languagetypeuuids uuid[],
					create_modifiedby );
				fact_end = 	clock_timestamp();
		end if;

		-- update the test score for pass and fail	
		if 	testsub2customerentityuuid isNull 
			then create_failedtext = create_failedtext||'Create Spanish Sub Account - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Spanish Sub Account - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

		-- Create Account - Fail logic
		if 	testmastercustomerentityuuid notNull 
			then 
				call entity.crud_customer_create(
					null, -- IN create_customername text,
					testsub4customeruuid  , -- OUT create_customeruuid text,
					testsub4customerentityuuid   , -- OUT create_customerentityuuid uuid, -- added this.  Need to handle it.	
					testmastercustomerentityuuid, -- IN create_customerparentuuid uuid,  -- added this.  Need to handle it.
					null, -- IN create_customerowner uuid,  -- added this.  Need to handle it.
					('Bill'||clock_timestamp())::text, -- IN create_customerbillingid text,
					billinguuid, --	IN create_customerbillingsystemid uuid,
					null,
					null,
					ARRAY[englishuuid], -- IN create_languagetypeuuids uuid[],
					create_modifiedby );
				fact_end = 	clock_timestamp();
		end if;

		-- update the test score for pass and fail	
		if 	testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Create Account No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Account No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;		

	-- customer delete tests
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer');
		
		if 	testsub2customerentityuuid notNull 
			then 
				call entity.crud_customer_delete(
					null, -- IN create_customerownerentityuuid uuid,
					testsub2customerentityuuid , -- IN create_customerentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer') and testsub2customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Customer Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Customer Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no customer entity isNull
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer');
		
		if 	testsub2customerentityuuid notNull 
			then 
				call entity.crud_customer_delete(
					testsub2customerentityuuid, -- IN create_customerownerentityuuid uuid,
					null, -- IN create_customerentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer') and testsub2customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Customer Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Customer Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and customer combo do not exist
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer');
		
		if 	testsub2customerentityuuid notNull 
			then 
				call entity.crud_customer_delete(
					testsubcustomerentityuuid, -- IN create_customerownerentityuuid uuid,
					testsub2customerentityuuid, -- IN create_customerentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer')  and testsub2customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Customer Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Customer Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and customer combo 
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer');
		
		if 	testsub2customerentityuuid notNull 
			then 
				call entity.crud_customer_delete(
					testsub2customerentityuuid, -- IN create_customerownerentityuuid uuid,
					testsub2customerentityuuid, -- IN create_customerentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer') and testsub2customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Customer Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Customer Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the customer
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = testsub2customerentityuuid;

end if;

------------------------
-- create location tests
------------------------

if testsub4customerentityuuid isnull and create_newcustomer = false
	then testsub4customerentityuuid = 'f02b1c6c-394a-4634-b8c3-fb5abc16b8d7';
	else testsub4customerentityuuid = testsub2customerentityuuid;
end if;

		-- New site new location type no parent no cornerstone
		call entity.crud_location_create(
			testsub4customerentityuuid, --create_locationownerentityuuid
			null,	--create_locationparententityuuid
			null,   --create_locationcornerstoneentityuuid
			null, --create_locationcornerstoneorder 
			null, -- create_locationtaguuid,
			'locationtag'||clock_timestamp(),  -- create_locationtag
			'sitename'||clock_timestamp(),  -- create_locationname
			'sitedisplayname'||clock_timestamp(), -- locationdisplayname 
			'sitescanid'||clock_timestamp(), -- locationscanid	
			'America/Los_Angeles',  -- locationtimezone
			englishuuid, -- languagetypeuuid  
			null,  -- locationexternalid
			null, -- locationexternalsystemuuid
			null, -- locationlatitude 
			null, -- locationlongitude
			null, -- locationradius
			null,
			null,
			testsiteuuid, -- OUT create_locationentityuuid
			create_modifiedby);
		fact_end = 	clock_timestamp();
		
		-- update the test score for pass and fail		
		if 	testsiteuuid isNull 
			then create_failedtext = create_failedtext||'Create Site - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Site - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;
		
-- New location existing parent new location tag
		call entity.crud_location_create(
			testsub4customerentityuuid, --create_locationownerentityuuid
			testsiteuuid,	--create_locationparententityuuid
			null,   --create_locationcornerstoneentityuuid
			null, --create_locationcornerstoneorder 
			null, -- create_locationtaguuid,
			'locationsubtag'||clock_timestamp(),  -- create_locationtag
			'locationname'||clock_timestamp(),  -- create_locationname
			'locationdisplayname'||clock_timestamp(), -- locationdisplayname 
			'locationscanid'||clock_timestamp(), -- locationscanid	
			'America/Los_Angeles',  -- locationtimezone
			englishuuid, -- languagetypeuuid  
			null,  -- locationexternalid
			null, -- locationexternalsystemuuid
			null, -- locationlatitude 
			null, -- locationlongitude
			null, -- locationradius
			null,
			null,
			testlocationuuid, -- OUT create_locationentityuuid
			create_modifiedby::bigint);	
		fact_end = 	clock_timestamp();
		
		-- update the test score for pass and fail		
		if 	testlocationuuid isNull 
			then create_failedtext = create_failedtext||'Create Location - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Location - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- Create Location - Fail logic
		call entity.crud_location_create(
			testsub4customerentityuuid, --create_locationownerentityuuid
			testsiteuuid,	--create_locationparententityuuid
			null,   --create_locationcornerstoneentityuuid
			null, --create_locationcornerstoneorder 
			null, -- create_locationtaguuid,
			'locationsubtag'||clock_timestamp(),  -- create_locationtag
			null,  -- create_locationname
			'locationdisplayname'||clock_timestamp(), -- locationdisplayname 
			'locationscanid'||clock_timestamp(), -- locationscanid	
			'America/Los_Angeles',  -- locationtimezone
			englishuuid, -- languagetypeuuid  
			null,  -- locationexternalid
			null, -- locationexternalsystemuuid
			null, -- locationlatitude 
			null, -- locationlongitude
			null, -- locationradius
			null,
			null,
			testlocation2uuid, -- OUT create_locationentityuuid
			create_modifiedby::bigint);	
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testlocation2uuid notNull 
			then create_failedtext = create_failedtext||'Create Location No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Location No Name Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- location delete tests
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Location');
		
		if 	testlocationuuid notNull 
			then 
				call entity.crud_location_delete(
					null, -- IN create_locationownerentityuuid uuid,
					testlocationuuid, -- IN create_locationentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Location') and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Location Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Location Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no location entity isNull
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Location');
		
		if 	testlocationuuid notNull 
			then 
				call entity.crud_location_delete(
					testsub4customerentityuuid, -- IN create_locationownerentityuuid uuid,
					null, -- IN create_locationentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Location') and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Location Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Location Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and customer combo do not exist
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Location');
		
		if 	testlocationuuid notNull 
			then 
				call entity.crud_location_delete(
					tendreluuid, -- IN create_locationownerentityuuid uuid,
					testlocationuuid, -- IN create_locationentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Location')  and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Location Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Location Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and customer combo 
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Location');
						
		if 	testlocationuuid notNull 
			then 
				call entity.crud_location_delete(
					testsub4customerentityuuid, -- IN create_locationownerentityuuid uuid,
					testlocationuuid, -- IN create_locationentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Location') and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Location Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Location Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the location
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = testlocationuuid;

---------------
-- Test Systags
---------------

		-- If systag isNull then it should do nothing
		call entity.crud_systag_create(
			tendreluuid, --create_systagownerentityuuid
			testsystagparentuuid, --create_systagparententityuuid
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			null,  -- create_systag
			englishuuid, -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null, 
			null, 
			testsystagid , -- OUT create_systagid
			testsystaguuid , -- OUT create_systaguuid text,
			testsystagentityuuid , -- OUT create_systagentityuuid uuid
			create_modifiedby);
		fact_end = 	clock_timestamp();
		
		-- update the test score for pass and fail		
		if 	testsystagentityuuid notNull 
			then create_failedtext = create_failedtext||'Create Systag No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Systag No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- If systag is a duplicate then return an error
		call entity.crud_systag_create(
			tendreluuid, --create_systagownerentityuuid
			testsystagparentuuid, --create_systagparententityuuid
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			'Microsoft',  -- create_systag
			englishuuid, -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null, 
			null, 
			testsystagid , -- OUT create_systagid
			testsystaguuid , -- OUT create_systaguuid text,
			testsystagentityuuid , -- OUT create_systagentityuuid uuid
			create_modifiedby);
		fact_end = 	clock_timestamp();
		
		if 	testsystagentityuuid notNull 
			then create_failedtext = create_failedtext||'Create Systag Duplicate - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Systag Duplicate - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- Create a Parent Tag	
		call entity.crud_systag_create(
			tendreluuid, --create_systagownerentityuuid
			null,	--create_systagparententityuuid
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			'parentsystag'||clock_timestamp(),  -- create_systag
			englishuuid, -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null,
			null,
			testparentsystagid , -- OUT create_systagid
			testparentsystaguuid , -- OUT create_systaguuid text,
			testparentsystagentityuuid , -- OUT create_systagentityuuid uuid
			create_modifiedby);

		if 	testparentsystagentityuuid isNull 
			then create_failedtext = create_failedtext||'Create Parent Tag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Parent Tag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- Create a Sub Tag	

		call entity.crud_systag_create(
			tendreluuid, --create_systagownerentityuuid
			testparentsystagentityuuid,	--create_systagparententityuuid  -- use the rertun from the previous test.  
			null,   --create_systagcornerstoneentityuuid
			null, --create_systagcornerstoneorder 
			'subsystag'||clock_timestamp(),  -- create_systag
			englishuuid, -- create_languagetypeuuid  
			null,  -- 	create_systagexternalid text,
			null, -- create_systagexternalsystemuuid
			null,
			null,
			testsystagid, -- OUT create_systagid
			testsystaguuid, -- OUT create_systaguuid text,
			testsystagentityuuid, -- OUT create_systagentityuuid uuid
			create_modifiedby);

		if 	testsystagentityuuid isNull 
			then create_failedtext = create_failedtext||'Create Parent Tag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Parent Tag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;
		
	-- System Tag delete tests
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'System Tag');
		
		if 	testsystagentityuuid notNull 
			then 
				call entity.crud_systag_delete(
					null, -- IN create_systagownerentityuuid uuid,
					testsystagentityuuid, -- IN create_systagentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'System Tag') and tendreluuid notNull 
			then create_failedtext = create_failedtext||'System Tag Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'System Tag Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no System Tag entity isNull
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'System Tag');
		
		if 	testsystagentityuuid notNull 
			then 
				call entity.crud_systag_delete(
					tendreluuid, -- IN create_systagownerentityuuid uuid,
					null, -- IN create_systagentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'System Tag') and tendreluuid notNull 
			then create_failedtext = create_failedtext||'System Tag Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'System Tag Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and System Tag combo do not exist
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'System Tag');
		
		if 	testsystagentityuuid notNull 
			then 
				call entity.crud_systag_delete(
					testsub4customerentityuuid, -- IN create_systagownerentityuuid uuid,
					testsystagentityuuid, -- IN create_systagentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'System Tag')  and tendreluuid notNull 
			then create_failedtext = create_failedtext||'System Tag Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'System Tag Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and System Tag combo 
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'System Tag');
						
		if 	testsystagentityuuid notNull 
			then 
				call entity.crud_systag_delete(
					tendreluuid, -- IN create_systagownerentityuuid uuid,
					testsystagentityuuid, -- IN create_systagentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'System Tag') and tendreluuid notNull 
			then create_failedtext = create_failedtext||'System Tag Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'System Tag Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the System Tag
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = testsystagentityuuid;	

if testsub4customerentityuuid isnull and create_newcustomer = false
	then testsub4customerentityuuid = 'f02b1c6c-394a-4634-b8c3-fb5abc16b8d7';
end if;

---------------
-- Test Custag
---------------

		-- If Custag isNull then it should do nothing
			call entity.crud_custag_create(
				testsub4customerentityuuid, --create_custagownerentityuuid
				testcustagparentuuid, --create_custagparententityuuid
				null,   --create_custagcornerstoneentityuuid
				null, --create_custagcornerstoneorder 
				null,  -- create_custag
				englishuuid, -- create_languagetypeuuid  
				null,  -- 	create_custagexternalid text,
				null, -- create_custagexternalsystemuuid
				null, 
				null, 
				testcustagid , -- OUT create_systagid
				testcustaguuid , -- OUT create_systaguuid text,
				testcustagentityuuid , -- OUT create_systagentityuuid uuid
				create_modifiedby);
			fact_end = 	clock_timestamp();
				
		-- update the test score for pass and fail		
		if 	testcustagentityuuid notNull 
			then create_failedtext = create_failedtext||'Create Custag No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Custag No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- If custag is a duplicate then return an error
			call entity.crud_custag_create(
				tendreltestuuid, --create_custagownerentityuuid
				testtendrelcustagparentuuid, --create_custagparententityuuid
				null,   --create_custagcornerstoneentityuuid
				null, --create_custagcornerstoneorder 
				'Ship',  -- create_custag
				englishuuid, -- create_languagetypeuuid  
				null,  -- 	create_custagexternalid text,
				null, -- create_custagexternalsystemuuid
				null, 
				null, 
				testcustagid , -- OUT create_systagid
				testcustaguuid , -- OUT create_systaguuid text,
				testcustagentityuuid , -- OUT create_systagentityuuid uuid
				create_modifiedby);
		
		if 	testcustagentityuuid notNull 
			then create_failedtext = create_failedtext||'Create Custag Duplicate - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Custag Duplicate - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- custag to a systag 	

			call entity.crud_custag_create(
				tendreltestuuid, --create_custagownerentityuuid
				testtendrelcustagparentuuid, --create_custagparententityuuid
				null,   --create_custagcornerstoneentityuuid
				null, --create_custagcornerstoneorder 
				'custag'||clock_timestamp(),  -- create_custag
				englishuuid, -- create_languagetypeuuid  
				null,  -- 	create_custagexternalid text,
				null, -- create_custagexternalsystemuuid
				null, 
				null, 
				testcustagid , -- OUT create_systagid
				testcustaguuid , -- OUT create_systaguuid text,
				testcustagentityuuid , -- OUT create_systagentityuuid uuid
				create_modifiedby);

		if 	testcustagentityuuid isNull 
			then create_failedtext = create_failedtext||'Create a custag to a systag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create a custag to a systag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- custag that is the start of a tree 

		call entity.crud_custag_create(
				tendreltestuuid, --create_custagownerentityuuid
				null,	--create_custagparententityuuid
				null,   --create_custagcornerstoneentityuuid
				null, --create_custagcornerstoneorder 
				'parentcustag'||clock_timestamp(),  -- create_custag
				englishuuid, -- create_languagetypeuuid  
				null,  -- 	create_custagexternalid text,
				null, -- create_custagexternalsystemuuid
				null, 
				null, 
				testparentcustagid, -- OUT create_systagid
				testparentcustaguuid, -- OUT create_systaguuid text,
				testparentcustagentityuuid, -- OUT create_systagentityuuid uuid
				create_modifiedby);

		if 	testparentcustagentityuuid isNull 
			then create_failedtext = create_failedtext||'Create a parent custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create a parent custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

		testcustagid = null;
		testcustaguuid = null;
		testcustagentityuuid = null;
		
		call entity.crud_custag_create(
				tendreltestuuid, --create_custagownerentityuuid
				testparentcustagentityuuid,	--create_custagparententityuuid  -- use the rertun from the previous test.  
				null,   --create_custagcornerstoneentityuuid
				null, --create_custagcornerstoneorder 
				'subcustag'||clock_timestamp(),  -- create_custag
				englishuuid, -- create_languagetypeuuid  
				null,  -- 	create_custagexternalid text,
				null, -- create_custagexternalsystemuuid
				null, 
				null, 
				testcustagid , -- OUT create_systagid
				testcustaguuid , -- OUT create_systaguuid text,
				testcustagentityuuid , -- OUT create_systagentityuuid uuid
				create_modifiedby);

		if 	testcustagentityuuid isNull 
			then create_failedtext = create_failedtext||'Create a custag to a custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create a custag to a custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;		

	-- Customer Tag delete tests
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer Tag');
		
		if 	testcustagentityuuid notNull 
			then 
				call entity.crud_custag_delete(
					null, -- IN create_custagownerentityuuid uuid,
					testcustagentityuuid, -- IN create_custagentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer Tag') and tendreltestuuid notNull 
			then create_failedtext = create_failedtext||'Customer Tag Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Customer Tag Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no Customer Tag entity isNull
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer Tag');
		
		if 	testcustagentityuuid notNull 
			then 
				call entity.crud_custag_delete(
					tendreltestuuid, -- IN create_custagownerentityuuid uuid,
					null, -- IN create_custagentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer Tag') and tendreltestuuid notNull 
			then create_failedtext = create_failedtext||'Customer Tag Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Customer Tag Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and Customer Tag combo do not exist
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer Tag');
		
		if 	testcustagentityuuid notNull 
			then 
				call entity.crud_custag_delete(
					tendreluuid, -- IN create_custagownerentityuuid uuid,
					testcustagentityuuid, -- IN create_custagentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer Tag')  and tendreltestuuid notNull 
			then create_failedtext = create_failedtext||'Customer Tag Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Customer Tag Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and Customer Tag combo 
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer Tag');
						
		if 	testcustagentityuuid notNull 
			then 
				call entity.crud_custag_delete(
					tendreltestuuid, -- IN create_custagownerentityuuid uuid,
					testcustagentityuuid, -- IN create_custagentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceentitytemplatename = 'Customer Tag') and tendreltestuuid notNull 
			then create_failedtext = create_failedtext||'Customer Tag Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Customer Tag Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the Customer Tag
		update entity.entityinstance
		set entityinstancedeleted = false
		where entityinstanceuuid = testcustagentityuuid;	

if testsub4customerentityuuid isnull and create_newcustomer = false
	then testsub4customerentityuuid = 'f02b1c6c-394a-4634-b8c3-fb5abc16b8d7';
end if;

------------------------------------------------------------------------------------------------

-----------------------
-- Test Entity Template
-----------------------

		-- no enity name
		call entity.crud_entitytemplate_create(
			null,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
			null,  -- merged site and parent.  Set to self if no parent sent in.
			null,  -- default is 1.
			null, -- Used to be only locations had a location category. 
			null,  -- If a tag is sent in that does not exist then we create one at the template level.
			null,  -- Name of the template 
			false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
			null, -- create_entitytemplatescanid text,  
			null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
			null, -- create_entitytemplateexternalid text,
			null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
			null,-- create_entitytemplatedeleted boolean,
			null,-- create_entitytemplatedraft boolean,
			testentitytemplateuuid, -- create_entitytemplateentityuuid uuid,
			create_modifiedby); -- IN create_modifiedbyid bigint
		fact_end = 	clock_timestamp();
		
		-- update the test score for pass and fail		
		if 	testentitytemplateuuid notNull 
			then create_failedtext = create_failedtext||'Create Entity Template No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Entity Template No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

-- no owner no parent no templatetaguuid no tag no languagetype - lazy init
		call entity.crud_entitytemplate_create(
			null,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
			null,  -- merged site and parent.  Set to self if no parent sent in.
			null,  -- default is 1.
			null, -- Used to be only locations had a location category.
			null,  -- If a tag is sent in that does not exist then we create one at the template level.
			'entitytemplate'||clock_timestamp()::text,  -- Name of the template 
			true, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
			'scanid'||clock_timestamp()::text, -- create_entitytemplatescanid text,  
			null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
			null, -- create_entitytemplateexternalid text,
			null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
			null,-- create_entitytemplatedeleted boolean,
			null,-- create_entitytemplatedraft boolean,
			testentitytemplateuuid, -- create_entitytemplateentityuuid uuid,
			create_modifiedby); -- IN create_modifiedbyid bigint
		fact_end = 	clock_timestamp();
					
		-- update the test score for pass and fail		
		if 	testentitytemplateuuid isNull 
			then create_failedtext = create_failedtext||'Create Entity Template lazy init - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Entity Template No Name - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;		

-- invalid owner  -- not a customer (error)

		testentitytemplateuuid = null;

	call entity.crud_entitytemplate_create(
		englishuuid,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
		null,  -- merged site and parent.  Set to self if no parent sent in.
		null,  -- default is 1.
		null, -- Used to be only locations had a location category.
		null,  -- If a tag is sent in that does not exist then we create one at the template level.
		'entitytemplate'||clock_timestamp()::text,  -- Name of the template 
		false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
		'scanid'||clock_timestamp()::text, -- create_entitytemplatescanid text,  
		null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
		null, -- create_entitytemplateexternalid text,
		null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
		null,-- create_entitytemplatedeleted boolean,
		null,-- create_entitytemplatedraft boolean,
		testentitytemplateuuid, -- create_entitytemplateentityuuid uuid,
		create_modifiedby); 
		
		-- update the test score for pass and fail		
		if 	testentitytemplateuuid notNull 
			then create_failedtext = create_failedtext||'Create Entity Template invalid owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Entity Template invalid owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- valid owner
		
		call entity.crud_entitytemplate_create(
			null,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
			null,  -- merged site and parent.  Set to self if no parent sent in.
			null,  -- default is 1.
			null, -- Used to be only locations had a location category.
			null,  -- If a tag is sent in that does not exist then we create one at the template level.
			'entitytemplate'||clock_timestamp()::text,  -- Name of the template 
			true, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
			'scanid'||clock_timestamp()::text, -- create_entitytemplatescanid text,  
			null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
			null, -- create_entitytemplateexternalid text,
			null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
			null,-- create_entitytemplatedeleted boolean,
			null,-- create_entitytemplatedraft boolean,
			testentitytemplateuuid, -- create_entitytemplateentityuuid uuid,
			create_modifiedby); -- IN create_modifiedbyid bigint
		fact_end = 	clock_timestamp();
					
		-- update the test score for pass and fail		
		if 	testentitytemplateuuid isNull 
			then create_failedtext = create_failedtext||'Create Entity Template valid owner - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Entity Template valid owner - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;		

	-- invalid owner  -- not a customer (error)

		testentitytemplateuuid = null;

		call entity.crud_entitytemplate_create(
			englishuuid,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
			null,  -- merged site and parent.  Set to self if no parent sent in.
			null,  -- default is 1.
			null, -- Used to be only locations had a location category.
			null,  -- If a tag is sent in that does not exist then we create one at the template level.
			'entitytemplate'||clock_timestamp()::text,  -- Name of the template 
			false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
			'scanid'||clock_timestamp()::text, -- create_entitytemplatescanid text,  
			null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
			null, -- create_entitytemplateexternalid text,
			null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
			null,-- create_entitytemplatedeleted boolean,
			null,-- create_entitytemplatedraft boolean,
			testentitytemplateuuid, -- create_entitytemplateentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();
		
		-- update the test score for pass and fail		
		if 	testentitytemplateuuid notNull 
			then create_failedtext = create_failedtext||'Create Entity Template invalid owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Entity Template invalid owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

-- invalid taguuid (becomes null) with valid tag name
		testentitytemplateuuid = null;
		
		call entity.crud_entitytemplate_create(
			testsub4customerentityuuid,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
			null,  -- merged site and parent.  Set to self if no parent sent in.
			null,  -- default is 1.
			'00014b06-73b8-464b-8881-0ef9dfb7b712', -- Used to be only locations had a location category.
			'TestTag'||clock_timestamp()::text,  -- If a tag is sent in that does not exist then we create one at the template level.
			'entitytemplate'||clock_timestamp()::text,  -- Name of the template 
			false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
			'scanid'||clock_timestamp()::text, -- create_entitytemplatescanid text,  
			null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
			null, -- create_entitytemplateexternalid text,
			null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
			null,-- create_entitytemplatedeleted boolean,
			null,-- create_entitytemplatedraft boolean,
			testentitytemplateuuid, -- create_entitytemplateentityuuid uuid,
			create_modifiedby); 
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentitytemplateuuid isNull 
			then create_failedtext = create_failedtext||'Create Entity Template invalid taguuid (becomes null) with valid tag name - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Entity Template invalid taguuid (becomes null) with valid tag name - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	
		
-- valid taguuid

		testentitytemplateuuid = null;

		call entity.crud_entitytemplate_create(
			testsub4customerentityuuid,  -- This used to be customer.  Should be sent in from the auth token. Default is cust 0.   
			null,  -- merged site and parent.  Set to self if no parent sent in.
			null,  -- default is 1.
			testlocationcategoryuuid, -- Used to be only locations had a location category.
			null,  -- If a tag is sent in that does not exist then we create one at the template level.
			'entitytemplate'||clock_timestamp()::text,  -- Name of the template 
			false, -- Mainly for entities that tendrel wants to govern.  customers cannot create this.  
			'scanid'||clock_timestamp()::text, -- create_entitytemplatescanid text,  
			null, -- create_languagetypeuuid uuid,  -- language the name/display name is in
			null, -- create_entitytemplateexternalid text,
			null,-- create_entitytemplateexternalsystemuuid uuid,  -- system tag for external system
			null,-- create_entitytemplatedeleted boolean,
			null,-- create_entitytemplatedraft boolean,
			testentitytemplateuuid, -- create_entitytemplateentityuuid uuid,
			create_modifiedby); 
		fact_end = 	clock_timestamp();

		if 	testentitytemplateuuid isNull 
			then create_failedtext = create_failedtext||'Create Entity Template valid taguuid - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Entity Template valid taguuid - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- Entity Template delete tests
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entitytemplate 
					where entitytemplatedeleted = true
						and entitytemplateuuid = testentitytemplateuuid);
		
		if 	testentitytemplateuuid notNull 
			then 
				call entity.crud_entitytemplate_delete(
					null, -- IN create_entitytemplateownerentityuuid uuid,
					testentitytemplateuuid, -- IN create_entitytemplateentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entitytemplate 
					where entitytemplatedeleted = true
						and entitytemplateuuid = testentitytemplateuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Template Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Template Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no Customer Tag entity isNull
		testcount = (select count(*) 
					from entity.entitytemplate 
					where entitytemplatedeleted = true
						and entitytemplateuuid = testentitytemplateuuid);
		
		if 	testentitytemplateuuid notNull 
			then 
				call entity.crud_entitytemplate_delete(
					testsub4customerentityuuid, -- IN create_entitytemplateownerentityuuid uuid,
					null, -- IN create_entitytemplateentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entitytemplate 
					where entitytemplatedeleted = true
						and entitytemplateuuid = testentitytemplateuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Template Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Template Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and Entity Template combo do not exist
		testcount = (select count(*) 
					from entity.entitytemplate 
					where entitytemplatedeleted = true
						and entitytemplateuuid = testentitytemplateuuid);

		if 	testentitytemplateuuid notNull 
			then 
				call entity.crud_entitytemplate_delete(
					tendreluuid, -- IN create_entitytemplateownerentityuuid uuid,
					testentitytemplateuuid, -- IN create_entitytemplateentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entitytemplate 
					where entitytemplatedeleted = true
						and entitytemplateuuid = testentitytemplateuuid)  and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Template Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Template Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and Entity Template combo 
		testcount = (select count(*) 
					from entity.entitytemplate 
					where entitytemplatedeleted = true
						and entitytemplateuuid = testentitytemplateuuid);
						
		if 	testentitytemplateuuid notNull 
			then 
				call entity.crud_entitytemplate_delete(
					testsub4customerentityuuid, -- IN create_entitytemplateownerentityuuid uuid,
					testentitytemplateuuid, -- IN create_entitytemplateentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entitytemplate 
					where entitytemplatedeleted = true
						and entitytemplateuuid = testentitytemplateuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Template Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Template Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the Entity Template
		update entity.entitytemplate
		set entitytemplatedeleted = false
		where entitytemplateuuid = testentitytemplateuuid;	

--------------------
-- test entity field
--------------------
		-- no field name
		call entity.crud_entityfield_create(
			null, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			null, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			null, -- IN create_entityfieldname text,
			null, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfielduuid notNull 
			then create_failedtext = create_failedtext||'Create Field No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field No Name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- no template
		call entity.crud_entityfield_create(
			null, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			null, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			null, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);	
		fact_end = 	clock_timestamp();
		
		if 	testentityfielduuid notNull 
			then create_failedtext = create_failedtext||'Create Field no template - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field  no template - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- invalid customer valid template
		call entity.crud_entityfield_create(
			englishuuid, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			testentitytemplateuuid, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			null, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();
		
		if 	testentityfielduuid notNull 
			then create_failedtext = create_failedtext||'Create Field invalid customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field  invalid customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- valid customer valid template invalid combo
		call entity.crud_entityfield_create(
			tendreluuid, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			testentitytemplateuuid, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			null, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();

		if 	testentityfielduuid notNull 
			then create_failedtext = create_failedtext||'Create Field  - template invalid combo - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field  - template invalid combo - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- invalid field type
		call entity.crud_entityfield_create(
			testsub4customerentityuuid, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			testentitytemplateuuid, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			'b07bf96e-0a35-4b01-bcc0-863dc7b3db0c', -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();

		if 	testentityfielduuid notNull 
			then create_failedtext = create_failedtext||'Create Field  - invalid field type - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field  - invalid field type - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- invalid entity type
		call entity.crud_entityfield_create(
			testsub4customerentityuuid, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			testentitytemplateuuid, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			testentityfieldtypeuuid, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			'7bbaa455-1965-4171-95f1-ee9f22a98f10', -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();

		if 	testentityfielduuid notNull 
			then create_failedtext = create_failedtext||'Create Field  - invalid entity type - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field  - invalid entity type - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- invalid format type

		call entity.crud_entityfield_create(
			testsub4customerentityuuid, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			testentitytemplateuuid, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			testentityfieldtypeuuid, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			'f90d618d-5de7-4126-8c65-0afb700c6c61', -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();

		if 	testentityfielduuid notNull 
			then create_failedtext = create_failedtext||'Create Field  - invalid format type - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field  - invalid format type - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- invalid widget type

		call entity.crud_entityfield_create(
			testsub4customerentityuuid, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			testentitytemplateuuid, -- IN create_entityfieldtemplateentityuuid uuid,
			null, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			testentityfieldtypeuuid, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			null, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			'4f13599f-8766-4589-b80f-77ff00819380', -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();

		if 	testentityfielduuid notNull 
			then create_failedtext = create_failedtext||'Create Field  - invalid widget type - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field  - invalid widget type - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- valid insert-- existing widget. 

		call entity.crud_entityfield_create(
			testsub4customerentityuuid, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			testentitytemplateuuid, -- IN create_entityfieldtemplateentityuuid uuid,
			5, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			testentityfieldtypeuuid, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			'Test', -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			null, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			testentitywidgettypeuuid, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			null, -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfielduuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();

		if 	testentityfielduuid isNull 
			then create_failedtext = create_failedtext||'Create Field valid insert-- existing widget - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field valid insert-- existing widget - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

--  valid insert-- new widget-format		

		call entity.crud_entityfield_create(
			testsub4customerentityuuid, -- IN create_entityfieldownerentityuuid uuid,    
			null, -- IN create_entityfieldparententityuuid uuid, -- is self if null.  Otherwise it should be another entity field.  
			testentitytemplateuuid, -- IN create_entityfieldtemplateentityuuid uuid,
			5, -- IN create_entityfieldcornerstoneorder integer,
			'fieldname'||clock_timestamp()::text, -- IN create_entityfieldname text,
			testentityfieldtypeuuid, -- IN create_entityfieldtypeentityuuid uuid,  -- this is the field type like result.  Uses result.     
			null, -- IN create_entityfieldentityparenttypeentityuuid uuid, -- this is for sys/cus tag.  A way to get greater filtering. 
			null, -- IN create_entityfieldentitytypeentityuuid uuid,  -- this is the entity type
			'testvalue'||clock_timestamp()::text, -- IN create_entityfielddefaultvalue uuid, 
			null, -- IN create_entityfieldformatentityuuid uuid, 
			'format'||clock_timestamp()::text, -- IN create_entityfieldformatentityname text, 	-- not handled yet
			null, -- IN create_entityfieldwidgetentityuuid uuid,  	-- not handled yet
			'widget'||clock_timestamp()::text,  -- IN create_entityfieldwidgetentityname text, 
			null, -- IN create_entityfieldiscalculated boolean,  -- default is false
			null, -- IN create_entityfieldiseditable boolean,  -- default is true
			null, -- IN create_entityfieldisvisible boolean,  -- default is true
			null, -- IN create_entityfieldisrequired boolean,  -- default is false
			null, -- IN create_entityfieldisprimary boolean,  -- default is false
			null, -- IN create_entityfieldtranslate boolean, -- default is true
			null, -- IN create_entityfieldexternalid text,
			null, -- IN create_entityfieldexternalsystemuuid uuid,
			null, -- IN create_languagetypeuuid uuid,	
			null,-- create_entityfielddeleted boolean,
			null,-- create_entityfielddraft boolean,
			testentityfiel2duuid, -- OUT create_entityfieldentityuuid uuid,
			create_modifiedby);
		fact_end = 	clock_timestamp();

		if 	testentityfiel2duuid isNull 
			then create_failedtext = create_failedtext||'Create Field valid insert-- new widget-format - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create Field valid insert-- existing widget - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- Entity Field delete tests
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entityfield 
					where entityfielddeleted = true
						and entityfielduuid = testentityfielduuid);
		
		if 	testentityfielduuid notNull 
			then 
				call entity.crud_entityfield_delete(
					null, -- IN create_entityfieldownerentityuuid uuid,
					testentityfielduuid, -- IN create_entityfieldentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfield 
					where entityfielddeleted = true
						and entityfielduuid = testentityfielduuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Field Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Field Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no Customer Tag entity isNull
		testcount = (select count(*) 
					from entity.entityfield 
					where entityfielddeleted = true
						and entityfielduuid = testentityfielduuid);
		
		if 	testentityfielduuid notNull 
			then 
				call entity.crud_entityfield_delete(
					testsub4customerentityuuid, -- IN create_entityfieldownerentityuuid uuid,
					null, -- IN create_entityfieldentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfield 
					where entityfielddeleted = true
						and entityfielduuid = testentityfielduuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Field Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Field Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and Entity Field combo do not exist
		testcount = (select count(*) 
					from entity.entityfield 
					where entityfielddeleted = true
						and entityfielduuid = testentityfielduuid);
		
		if 	testentityfielduuid notNull 
			then 
				call entity.crud_entityfield_delete(
					tendreluuid, -- IN create_entityfieldownerentityuuid uuid,
					testentityfielduuid, -- IN create_entityfieldentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfield 
					where entityfielddeleted = true
						and entityfielduuid = testentityfielduuid)  and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Field Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Field Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and Entity Field combo 
		testcount = (select count(*) 
					from entity.entityfield 
					where entityfielddeleted = true
						and entityfielduuid = testentityfielduuid);
						
		if 	testentityfielduuid notNull 
			then 
				call entity.crud_entityfield_delete(
					testsub4customerentityuuid, -- IN create_entityfieldownerentityuuid uuid,
					testentityfielduuid, -- IN create_entityfieldentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entityfield 
					where entityfielddeleted = true
						and entityfielduuid = testentityfielduuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Field Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Field Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the Entity Field
		update entity.entityfield
		set entityfielddeleted  = false
		where entityfielduuid = testentityfielduuid;	

--------------------------------------------------------------------------------------

---------------------
-- entity description
---------------------

	-- bogus owner fail

		call entity.crud_entitydescription_create(
			englishuuid, --IN create_entitydescriptionownerentityuuid uuid,
			testentitytemplateuuid, --	IN create_entitytemplateentityuuid uuid,
			testentityfielduuid, --	IN create_entityfieldentityuuid uuid,
			'Test Description '||clock_timestamp()::text, --	IN create_entitydescriptionname text,
			null, --	IN create_entitydescriptionsoplink text,
			null, --	IN create_entitydescriptionfile text,
			null, --	IN create_entitydescriptionicon text,
			null, --	IN create_entitydescriptionmimetypeuuid uuid,
			null, --	IN create_languagetypeuuid uuid,
			null, --	IN create_entitydescriptiondeleted boolean,
			null, --	IN create_entitydescriptiondraft boolean,
			testentitydescriptionuuid, -- OUT create_entitydescriptionentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();
		
		-- update the test score for pass and fail		
		if 	testentitydescriptionuuid notNull 
			then create_failedtext = create_failedtext||'Create entity description bad owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create entity description bad owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- no field or template then error 
		call entity.crud_entitydescription_create(
			testsub4customerentityuuid, --IN create_entitydescriptionownerentityuuid uuid,
			null, --	IN create_entitytemplateentityuuid uuid,
			null, --	IN create_entityfieldentityuuid uuid,
			'Test Description '||clock_timestamp()::text, --	IN create_entitydescriptionname text,
			null, --	IN create_entitydescriptionsoplink text,
			null, --	IN create_entitydescriptionfile text,
			null, --	IN create_entitydescriptionicon text,
			null, --	IN create_entitydescriptionmimetypeuuid uuid,
			null, --	IN create_languagetypeuuid uuid,
			null, --	IN create_entitydescriptiondeleted boolean,
			null, --	IN create_entitydescriptiondraft boolean,
			testentitydescriptionuuid, -- OUT create_entitydescriptionentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();

		if 	testentitydescriptionuuid notNull 
			then create_failedtext = create_failedtext||'Create entity description no field or template - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create entity description no field or template - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- no descriptionname, soplink, file, or icon the error

		call entity.crud_entitydescription_create(
			testsub4customerentityuuid, --IN create_entitydescriptionownerentityuuid uuid,
			testentitytemplateuuid, --	IN create_entitytemplateentityuuid uuid,
			testentityfielduuid, --	IN create_entityfieldentityuuid uuid,
			null, --	IN create_entitydescriptionname text,
			null, --	IN create_entitydescriptionsoplink text,
			null, --	IN create_entitydescriptionfile text,
			null, --	IN create_entitydescriptionicon text,
			null, --	IN create_entitydescriptionmimetypeuuid uuid,
			null, --	IN create_languagetypeuuid uuid,
			null, --	IN create_entitydescriptiondeleted boolean,
			null, --	IN create_entitydescriptiondraft boolean,
			testentitydescriptionuuid, -- OUT create_entitydescriptionentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();

		if 	testentitydescriptionuuid notNull 
			then create_failedtext = create_failedtext||'Create entity description no descriptionname, soplink, file, or icon - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create entity description no descriptionname, soplink, file, or icon - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- add description to template

		call entity.crud_entitydescription_create(
			testsub4customerentityuuid, --IN create_entitydescriptionownerentityuuid uuid,
			testentitytemplateuuid, --	IN create_entitytemplateentityuuid uuid,
			null, --	IN create_entityfieldentityuuid uuid,
			'Test Description '||clock_timestamp()::text, --	IN create_entitydescriptionname text,
			null, --	IN create_entitydescriptionsoplink text,
			null, --	IN create_entitydescriptionfile text,
			null, --	IN create_entitydescriptionicon text,
			null, --	IN create_entitydescriptionmimetypeuuid uuid,
			null, --	IN create_languagetypeuuid uuid,
			null, --	IN create_entitydescriptiondeleted boolean,
			null, --	IN create_entitydescriptiondraft boolean,
			testentitydescriptionuuid, -- OUT create_entitydescriptionentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();

		if 	testentitydescriptionuuid isNull 
			then create_failedtext = create_failedtext||'Create entity description to template - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create entity description to template - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

		testentitydescriptionuuid = null;

	-- add description to field 
		call entity.crud_entitydescription_create(
			testsub4customerentityuuid, --IN create_entitydescriptionownerentityuuid uuid,
			null, --	IN create_entitytemplateentityuuid uuid,
			testentityfielduuid, --	IN create_entityfieldentityuuid uuid,
			'Test Description '||clock_timestamp()::text, --	IN create_entitydescriptionname text,
			null, --	IN create_entitydescriptionsoplink text,
			null, --	IN create_entitydescriptionfile text,
			null, --	IN create_entitydescriptionicon text,
			null, --	IN create_entitydescriptionmimetypeuuid uuid,
			null, --	IN create_languagetypeuuid uuid,
			null, --	IN create_entitydescriptiondeleted boolean,
			null, --	IN create_entitydescriptiondraft boolean,
			testentitydescriptionuuid, -- OUT create_entitydescriptionentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();

		if 	testentitydescriptionuuid isNull 
			then create_failedtext = create_failedtext||'Create entity description to field - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create entity description to field - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- Entity Description delete tests
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entitydescription 
					where entitydescriptiondeleted = true
						and entitydescriptionuuid = testentitydescriptionuuid);
		
		if 	testentitydescriptionuuid notNull 
			then 
				call entity.crud_entitydescription_delete(
					null, -- IN create_entitydescriptionownerentityuuid uuid,
					testentitydescriptionuuid, -- IN create_entitydescriptionentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entitydescription 
					where entitydescriptiondeleted = true
						and entitydescriptionuuid = testentitydescriptionuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Description Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Description Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no Customer Tag entity isNull
		testcount = (select count(*) 
					from entity.entitydescription 
					where entitydescriptiondeleted = true
						and entitydescriptionuuid = testentitydescriptionuuid);
		
		if 	testentitydescriptionuuid notNull 
			then 
				call entity.crud_entitydescription_delete(
					testsub4customerentityuuid, -- IN create_entitydescriptionownerentityuuid uuid,
					null, -- IN create_entitydescriptionentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entitydescription 
					where entitydescriptiondeleted = true
						and entitydescriptionuuid = testentitydescriptionuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Description Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Description Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and Entity Description combo do not exist
		testcount = (select count(*) 
					from entity.entitydescription 
					where entitydescriptiondeleted = true
						and entitydescriptionuuid = testentitydescriptionuuid);
		
		if 	testentitydescriptionuuid notNull 
			then 
				call entity.crud_entitydescription_delete(
					tendreluuid, -- IN create_entitydescriptionownerentityuuid uuid,
					testentitydescriptionuuid, -- IN create_entitydescriptionentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entitydescription 
					where entitydescriptiondeleted = true
						and entitydescriptionuuid = testentitydescriptionuuid)  and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Description Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Description Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and Entity Description combo 
		testcount = (select count(*) 
					from entity.entitydescription 
					where entitydescriptiondeleted = true
						and entitydescriptionuuid = testentitydescriptionuuid);
						
		if 	testentitydescriptionuuid notNull 
			then 
				call entity.crud_entitydescription_delete(
					testsub4customerentityuuid, -- IN create_entitydescriptionownerentityuuid uuid,
					testentitydescriptionuuid, -- IN create_entitydescriptionentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entitydescription 
					where entitydescriptiondeleted = true
						and entitydescriptionuuid = testentitydescriptionuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Description Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Description Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the Entity Description
		update entity.entitydescription
		set entitydescriptiondeleted  = false
		where entitydescriptionuuid = testentitydescriptionuuid;	

------------------
-- entity instance
------------------

	-- no entityinstanceownerentityuuid

		call entity.crud_entityinstance_create(
			null, -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			null, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create instance no owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance no owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- error - invalid entityinstanceownerentityuuid not a customer
		call entity.crud_entityinstance_create(	
			englishuuid, -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			null, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create instance bad owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance bad owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;		

	-- error - valid entityinstanceownerentityuuid no instance name or empty string
		call entity.crud_entityinstance_create(	
			testsub4customerentityuuid, -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'', -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create instance  no instance name or empty string - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance  no instance name or empty string - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;			

	-- error - valid entityinstanceownerentityuuid valid instance name no templateuuid no template name

		call entity.crud_entityinstance_create(	
			testsub4customerentityuuid, -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||clock_timestamp()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create instance  no templateuuid no template name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance  no templateuuid no template name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- template/owner mismatch
		
		call entity.crud_entityinstance_create(	
			tendreluuid, -- IN create_entityinstanceownerentityuuid uuid,
			testentitytemplateuuid, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||clock_timestamp()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create instance template/owner mismatch name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance  template/owner mismatch name - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- Template Lazy Init

		call entity.crud_entityinstance_create(	
			testsub4customerentityuuid, -- IN create_entityinstanceownerentityuuid uuid,
			null, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			'newtemplate'||clock_timestamp()::text, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||clock_timestamp()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid isNull 
			then create_failedtext = create_failedtext||'Create instance Template Lazy Init - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance  Template Lazy Init - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- known tempalte with a custag

		call entity.crud_entityinstance_create(	
			testsub4customerentityuuid, -- IN create_entityinstanceownerentityuuid uuid,
			testentitytemplateuuid, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			'c2d5ecdd-a657-4448-aef2-54467045134a', -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||clock_timestamp()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid isNull 
			then create_failedtext = create_failedtext||'Create instance known tempalte with a custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance  known tempalte with a custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;		

-- known tempalte with invalid custag
		call entity.crud_entityinstance_create(	
			testsub4customerentityuuid, -- IN create_entityinstanceownerentityuuid uuid,
			testentitytemplateuuid, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			englishuuid, -- IN create_entityinstancetaguuid uuid,
			null, -- IN create_entityinstancetag text,
			'instance'||clock_timestamp()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid isNull 
			then create_failedtext = create_failedtext||'Create instance known tempalte with invalid custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance  known tempalte with invalid custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

-- known tempalte lazy init custag
		call entity.crud_entityinstance_create(	
			testsub4customerentityuuid, -- IN create_entityinstanceownerentityuuid uuid,
			testentitytemplateuuid, -- IN create_entityinstanceentitytemplateentityuuid uuid,	
			null, -- IN create_entityinstanceentitytemplateentityname text,	
			null, -- IN create_entityinstanceparententityuuid uuid,    
			null, -- IN create_entityinstanceecornerstoneentityuuid uuid,  
			null, -- IN create_entityinstancecornerstoneorder integer,
			null, -- IN create_entityinstancetaguuid uuid,
			'newtag'||clock_timestamp()::text, -- IN create_entityinstancetag text,
			'instance'||clock_timestamp()::text, -- IN create_entityinstancename text,
			null, -- IN create_entityinstancescanid text,
			null, -- IN create_entityinstancetypeuuid uuid,
			null, -- IN create_entityinstanceexternalid text,
			null, -- IN create_entityinstanceexternalsystemuuid uuid,
			null, -- IN create_entityinstancedeleted boolean,
			null, -- IN create_entityinstancedraft boolean,
			testentityinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityinstanceuuid isNull 
			then create_failedtext = create_failedtext||'Create instance known tempalte lazy init custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create instance  known tempalte lazy init custag - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- Entity Description delete tests
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceuuid = testentityinstanceuuid);
		
		if 	testentityinstanceuuid notNull 
			then 
				call entity.crud_entityinstance_delete(
					null, -- IN create_entityinstanceownerentityuuid uuid,
					testentityinstanceuuid, -- IN create_entityinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceuuid = testentityinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity instance Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity instance Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no intnace isNull
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceuuid = testentityinstanceuuid);
		
		if 	testentityinstanceuuid notNull 
			then 
				call entity.crud_entityinstance_delete(
					testsub4customerentityuuid, -- IN create_entityinstanceownerentityuuid uuid,
					null, -- IN create_entityinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceuuid = testentityinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity instance Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity instance Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and Entity instance combo do not exist
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceuuid = testentityinstanceuuid);
		
		if 	testentityinstanceuuid notNull 
			then 
				call entity.crud_entityinstance_delete(
					tendreluuid, -- IN create_entityinstanceownerentityuuid uuid,
					testentityinstanceuuid, -- IN create_entityinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceuuid = testentityinstanceuuid)  and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity instance Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity instance Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and Entity instance combo 
		testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceuuid = testentityinstanceuuid);
						
		if 	testentityinstanceuuid notNull 
			then 
				call entity.crud_entityinstance_delete(
					testsub4customerentityuuid, -- IN create_entityinstanceownerentityuuid uuid,
					testentityinstanceuuid, -- IN create_entityinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entityinstance 
					where entityinstancedeleted = true
						and entityinstanceuuid = testentityinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity instance Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity instance Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the Entity instance
		update entity.entityinstance
		set entityinstancedeleted  = false
		where entityinstanceuuid = testentityinstanceuuid;	

------------------
-- entity field instance
------------------

	-- error if owner isNull or entityinstanceentityuuid isNull or fieldentityuuid isNull
		call entity.crud_entityfieldinstance_create(
			null,-- IN create_entityfieldinstanceownerentityuuid uuid,
			null,-- IN create_entityfieldinstanceentityinstanceentityuuid uuid,
			null,-- IN create_entityfieldinstanceentityfieldentityuuid uuid,
			'test value'||now()::text,-- IN create_entityfieldinstancevalue text,
			null,-- IN create_entityfieldinstanceentityfieldname text,
			null,-- IN create_entityfieldformatentityuuid uuid,
			null,-- IN create_entityfieldformatentityname text,
			null,-- IN create_entityfieldwidgetentityuuid uuid,
			null,-- IN create_entityfieldwidgetentityname text,
			null,-- IN create_entityfieldinstanceexternalid text,
			null,-- IN create_entityfieldinstanceexternalsystemuuid uuid,
			null,-- IN create_entityfieldinstancedeleted boolean,
			null,-- IN create_entityfieldinstancedraft boolean,
			testentityfieldinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfieldinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create field instance no owner or entityinstanceentityuuid or fieldentityuuid - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create field instance no owner or entityinstanceentityuuid or fieldentityuuid  - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	--  invalid customer
		call entity.crud_entityfieldinstance_create(
			englishuuid,-- IN create_entityfieldinstanceownerentityuuid uuid,
			testentityinstanceuuid,-- IN create_entityfieldinstanceentityinstanceentityuuid uuid,
			testentityfielduuid,-- IN create_entityfieldinstanceentityfieldentityuuid uuid,
			'test value'||now()::text,-- IN create_entityfieldinstancevalue text,
			null,-- IN create_entityfieldinstanceentityfieldname text,
			null,-- IN create_entityfieldformatentityuuid uuid,
			null,-- IN create_entityfieldformatentityname text,
			null,-- IN create_entityfieldwidgetentityuuid uuid,
			null,-- IN create_entityfieldwidgetentityname text,
			null,-- IN create_entityfieldinstanceexternalid text,
			null,-- IN create_entityfieldinstanceexternalsystemuuid uuid,
			null,-- IN create_entityfieldinstancedeleted boolean,
			null,-- IN create_entityfieldinstancedraft boolean,
			testentityfieldinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfieldinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create field instance invalid customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create field instance invalid customer  - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- invalid owner instance combo
		call entity.crud_entityfieldinstance_create(
			tendreluuid,-- IN create_entityfieldinstanceownerentityuuid uuid,
			testentityinstanceuuid,-- IN create_entityfieldinstanceentityinstanceentityuuid uuid,
			testentityfielduuid,-- IN create_entityfieldinstanceentityfieldentityuuid uuid,
			'test value'||now()::text,-- IN create_entityfieldinstancevalue text,
			null,-- IN create_entityfieldinstanceentityfieldname text,
			null,-- IN create_entityfieldformatentityuuid uuid,
			null,-- IN create_entityfieldformatentityname text,
			null,-- IN create_entityfieldwidgetentityuuid uuid,
			null,-- IN create_entityfieldwidgetentityname text,
			null,-- IN create_entityfieldinstanceexternalid text,
			null,-- IN create_entityfieldinstanceexternalsystemuuid uuid,
			null,-- IN create_entityfieldinstancedeleted boolean,
			null,-- IN create_entityfieldinstancedraft boolean,
			testentityfieldinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfieldinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create field instance invalid owner instance combo - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create field instance invalid owner instance combo  - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- valid field instance
		call entity.crud_entityfieldinstance_create(
			testsub4customerentityuuid,-- IN create_entityfieldinstanceownerentityuuid uuid,
			testentityinstanceuuid,-- IN create_entityfieldinstanceentityinstanceentityuuid uuid,
			testentityfielduuid,-- IN create_entityfieldinstanceentityfieldentityuuid uuid,
			'test value'||now()::text,-- IN create_entityfieldinstancevalue text,
			null,-- IN create_entityfieldinstanceentityfieldname text,
			null,-- IN create_entityfieldformatentityuuid uuid,
			null,-- IN create_entityfieldformatentityname text,
			null,-- IN create_entityfieldwidgetentityuuid uuid,
			null,-- IN create_entityfieldwidgetentityname text,
			null,-- IN create_entityfieldinstanceexternalid text,
			null,-- IN create_entityfieldinstanceexternalsystemuuid uuid,
			null,-- IN create_entityfieldinstancedeleted boolean,
			null,-- IN create_entityfieldinstancedraft boolean,
			testentityfieldinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			null, -- IN create_languagetypeuuid
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfieldinstanceuuid isNull 
			then create_failedtext = create_failedtext||'Create field instance - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create field instance - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- delete scripts 
	
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entityfieldinstance 
					where entityfieldinstancedeleted = true
						and entityfieldinstanceuuid = testentityfieldinstanceuuid);
		
		if 	testentityfieldinstanceuuid notNull 
			then 
		call entity.crud_entityfieldinstance_delete(
			null, -- IN create_entityfieldinstanceownerentityuuid uuid,
			testentityfieldinstanceuuid, -- IN create_entityfieldinstanceentityuuid uuid,	
			create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfieldinstance 
					where entityfieldinstancedeleted = true
						and entityfieldinstanceuuid = testentityfieldinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Field instance Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Field instance Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no intnace isNull
		testcount = (select count(*) 
					from entity.entityfieldinstance 
					where entityfieldinstancedeleted = true
						and entityfieldinstanceuuid = testentityfieldinstanceuuid);
		
		if 	testentityfieldinstanceuuid notNull 
			then 
				call entity.crud_entityfieldinstance_delete(
					testsub4customerentityuuid, -- IN create_entityfieldinstanceownerentityuuid uuid,
					null, -- IN create_entityfieldinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfieldinstance 
					where entityfieldinstancedeleted = true
						and entityfieldinstanceuuid = testentityfieldinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Field instance Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Field instance Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and Entity instance combo do not exist
		testcount = (select count(*) 
					from entity.entityfieldinstance 
					where entityfieldinstancedeleted = true
						and entityfieldinstanceuuid = testentityfieldinstanceuuid);
		
		if 	testentityfieldinstanceuuid notNull 
			then 
				call entity.crud_entityfieldinstance_delete(
					tendreluuid, -- IN create_entityfieldinstanceownerentityuuid uuid,
					testentityfieldinstanceuuid, -- IN create_entityfieldinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfieldinstance 
					where entityfieldinstancedeleted = true
						and entityfieldinstanceuuid = testentityfieldinstanceuuid)  and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Field instance Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Field instance Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and Entity instance combo 
		testcount = (select count(*) 
					from entity.entityfieldinstance 
					where entityfieldinstancedeleted = true
						and entityfieldinstanceuuid = testentityfieldinstanceuuid);
						
		if 	testentityfieldinstanceuuid notNull 
			then 
				call entity.crud_entityfieldinstance_delete(
					testsub4customerentityuuid, -- IN create_entityfieldinstanceownerentityuuid uuid,
					testentityfieldinstanceuuid, -- IN create_entityfieldinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entityfieldinstance 
					where entityfieldinstancedeleted = true
						and entityfieldinstanceuuid = testentityfieldinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity Field instance Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity Field instance Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the Field Entity instance
		update entity.entityfieldinstance
		set entityfieldinstancedeleted  = false
		where entityfieldinstanceuuid = testentityfieldinstanceuuid;	

-----------------------
-- entity file instance
-----------------------

	-- bogus owner isNull

		call entity.crud_entityfileinstance_create(
			englishuuid, -- IN create_entityfileinstanceownerentityuuid uuid,
			testentityinstanceuuid, -- IN create_entityfileinstanceentityentityinstanceentityuuid uuid,
			testentityfieldinstanceuuid, -- IN create_entityfileinstanceentityfieldinstanceentityuuid uuid,
			'storagelocation '||now()::text, -- IN create_entityfileinstancestoragelocation text,
			'c262c14c-7f33-4a51-b11a-b65892b59d0e', -- IN create_entityfileinstancemimetypeuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- IN create_entityfileinstancedeleted boolean,
			null, -- IN create_entityfileinstancedraft boolean,
			testentityfileinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfileinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create file instance bad owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create file instance bad owner  - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- no instance or  field instance then error 
		call entity.crud_entityfileinstance_create(
			testsub4customerentityuuid, -- IN create_entityfileinstanceownerentityuuid uuid,
			null, -- IN create_entityfileinstanceentityentityinstanceentityuuid uuid,
			null, -- IN create_entityfileinstanceentityfieldinstanceentityuuid uuid,
			'storagelocation '||now()::text, -- IN create_entityfileinstancestoragelocation text,
			'c262c14c-7f33-4a51-b11a-b65892b59d0e', -- IN create_entityfileinstancemimetypeuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- IN create_entityfileinstancedeleted boolean,
			null, -- IN create_entityfileinstancedraft boolean,
			testentityfileinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfileinstanceuuid notNull 
			then create_failedtext = create_failedtext||'Create file instance no instance or  field instance - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create file instance no instance or  field instance  - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- add File to instance
		call entity.crud_entityfileinstance_create(
			testsub4customerentityuuid, -- IN create_entityfileinstanceownerentityuuid uuid,
			testentityinstanceuuid, -- IN create_entityfileinstanceentityentityinstanceentityuuid uuid,
			null, -- IN create_entityfileinstanceentityfieldinstanceentityuuid uuid,
			'storagelocation '||now()::text, -- IN create_entityfileinstancestoragelocation text,
			'c262c14c-7f33-4a51-b11a-b65892b59d0e', -- IN create_entityfileinstancemimetypeuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- IN create_entityfileinstancedeleted boolean,
			null, -- IN create_entityfileinstancedraft boolean,
			testentityfileinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfileinstanceuuid isNull 
			then create_failedtext = create_failedtext||'Create file instance to instance - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create file instance to instance - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- add File to field instance
		call entity.crud_entityfileinstance_create(
			testsub4customerentityuuid, -- IN create_entityfileinstanceownerentityuuid uuid,
			testentityinstanceuuid, -- IN create_entityfileinstanceentityentityinstanceentityuuid uuid,
			testentityfieldinstanceuuid, -- IN create_entityfileinstanceentityfieldinstanceentityuuid uuid,
			'storagelocation '||now()::text, -- IN create_entityfileinstancestoragelocation text,
			'c262c14c-7f33-4a51-b11a-b65892b59d0e', -- IN create_entityfileinstancemimetypeuuid uuid,
			null, -- IN create_languagetypeuuid uuid,
			null, -- IN create_entityfileinstancedeleted boolean,
			null, -- IN create_entityfileinstancedraft boolean,
			testentityfileinstanceuuid, -- OUT create_entityinstanceentityuuid uuid,
			create_modifiedby );
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail		
		if 	testentityfileinstanceuuid isNull 
			then create_failedtext = create_failedtext||'Create file instance to field instance - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Create file instance to field instance - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;

	-- delete scripts 
	
	-- no owner isNull    
		testcount = (select count(*) 
					from entity.entityfileinstance 
					where entityfileinstancedeleted = true
						and entityfileinstanceuuid = testentityfileinstanceuuid);
		
		if 	testentityfileinstanceuuid notNull 
			then 
		call entity.crud_entityfileinstance_delete(
			null, -- IN create_entityfileinstanceownerentityuuid uuid,
			testentityfileinstanceuuid, -- IN create_entityfileinstanceentityuuid uuid,	
			create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfileinstance 
					where entityfileinstancedeleted = true
						and entityfileinstanceuuid = testentityfileinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity file instance Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity file instance Delete No Owner - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- no intnace isNull
		testcount = (select count(*) 
					from entity.entityfileinstance 
					where entityfileinstancedeleted = true
						and entityfileinstanceuuid = testentityfileinstanceuuid);
		
		if 	testentityfileinstanceuuid notNull 
			then 
				call entity.crud_entityfileinstance_delete(
					testsub4customerentityuuid, -- IN create_entityfileinstanceownerentityuuid uuid,
					null, -- IN create_entityfileinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfileinstance 
					where entityfileinstancedeleted = true
						and entityfileinstanceuuid = testentityfileinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity file instance Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity file instance Delete No Customer - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- owner and Entity instance combo do not exist
		testcount = (select count(*) 
					from entity.entityfileinstance 
					where entityfileinstancedeleted = true
						and entityfileinstanceuuid = testentityfileinstanceuuid);
		
		if 	testentityfileinstanceuuid notNull 
			then 
				call entity.crud_entityfileinstance_delete(
					tendreluuid, -- IN create_entityfileinstanceownerentityuuid uuid,
					testentityfileinstanceuuid, -- IN create_entityfileinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount <> (select count(*) 
					from entity.entityfileinstance 
					where entityfileinstancedeleted = true
						and entityfileinstanceuuid = testentityfileinstanceuuid)  and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity file instance Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity file instance Delete owner and customer combo do not exist - Fail logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

		-- valid owner and Entity instance combo 
		testcount = (select count(*) 
					from entity.entityfileinstance 
					where entityfileinstancedeleted = true
						and entityfileinstanceuuid = testentityfileinstanceuuid);
						
		if 	testentityfileinstanceuuid notNull 
			then 
				call entity.crud_entityfileinstance_delete(
					testsub4customerentityuuid, -- IN create_entityfileinstanceownerentityuuid uuid,
					testentityfileinstanceuuid, -- IN create_entityfileinstanceentityuuid uuid,	
					create_modifiedby);
		end if;
		fact_end = 	clock_timestamp();

		-- update the test score for pass and fail	
		if 	testcount = (select count(*) 
					from entity.entityfileinstance 
					where entityfileinstancedeleted = true
						and entityfileinstanceuuid = testentityfileinstanceuuid) and testsub4customerentityuuid notNull 
			then create_failedtext = create_failedtext||'Entity file instance Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_failedtest = true;
					create_failedtestcount = create_failedtestcount + 1;
			else create_passedtext = create_passedtext||'Entity file instance Delete valid owner and customer combo - Pass logic Time: '||(clock_timestamp()-fact_end)::text||E'\n';
					create_successtestcount = create_successtestcount + 1;
		end if;	

	-- reset the file Entity instance
		update entity.entityfileinstance
		set entityfileinstancedeleted  = false
		where entityfileinstanceuuid = testentityfileinstanceuuid;	

End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.test_entity_create(boolean,bigint) FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.test_entity_create(boolean,bigint) TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.test_entity_create(boolean,bigint) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.test_entity_create(boolean,bigint) TO graphql;

-- Type: PROCEDURE ; Name: entity.test_entity_withresults(); Owner: tendreladmin

CREATE OR REPLACE PROCEDURE entity.test_entity_withresults(OUT failedtestcount bigint, OUT successtestcount bigint, OUT failedtest boolean)
 LANGUAGE plpgsql
AS $procedure$
Declare
    fact_start timestamp with time zone;
    fact_end timestamp with time zone;	

Begin

 -- Start the timer on this function
    fact_start = clock_timestamp();
	failedtest = false;
	failedtestcount = 0;
	successtestcount = 0;	
-- Need to add full versions
-- call entity.test_entity_withresults(null,null,null)

-- entity templates
RAISE NOTICE  E'testing entity templates\n-------\n';

RAISE NOTICE  E'testing all customers all templates\n-------';

if (select count(*) from entity.func_entitytemplate_read_min(null, null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(null, null, null)> 0  Time: %', (clock_timestamp()-fact_start)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(null, null, null)> 0  Time: %', (clock_timestamp()-fact_start)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_read_full(null, null, null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_read_full(null, null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_read_full(null, null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer all templates\n-------';

if (select count(*) from entity.func_entitytemplate_read_min(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
		successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_read_full(	'f90d618d-5de7-4126-8c65-0afb700c6c61',null, null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
		successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer specific entity template\n-------';

if (select count(*) from entity.func_entitytemplate_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','957df2f9-051f-4af5-95ee-ea3760fbb83b',	null)) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','957df2f9-051f-4af5-95ee-ea3760fbb83b',	null)) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 1  Time: %\n', (clock_timestamp()-fact_end)::text;
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 1  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'negative test - empty or wrong cutomer returns no templates\n-------';

if (select count(*) from entity.func_entitytemplate_read_min(null,'957df2f9-051f-4af5-95ee-ea3760fbb83b',	null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',	null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
		successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',	null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_read_full(null,'957df2f9-051f-4af5-95ee-ea3760fbb83b',	null)) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_read_full(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_read_full(null,''957df2f9-051f-4af5-95ee-ea3760fbb83b'',null)= 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- Entity Fields
RAISE NOTICE  E'testing entity fields\n-------\n';

RAISE NOTICE  E'testing all customers all template all fields\n-------';

if (select count(*) from entity.func_entityfield_read_min(null, null, null,null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(null, null, null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*)from entity.func_entityfield_read_min(null, null, null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full(null, null, null,null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(null, null, null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*)from entity.func_entityfield_read_full(null, null, null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full(null, null, null,null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(null, null, null,null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*)from entity.func_entitytemplate_field_read_full(null, null, null,null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing all customers all template all fields\n-------';

-- specific customer no entity template no field
if (select count(*) from entity.func_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null, null, null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null, null, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customers specific template all fields\n-------';

-- specific entity template
if (select count(*) from entity.func_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %\n\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customers specific template specific fields\n-------';

if (select count(*) from entity.func_entityfield_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 1  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'negative tests - empty or wrong cutomer returns nothing\n-------';

if (select count(*) from entity.func_entityfield_read_min(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_min(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_min(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_min(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entityfield_read_full(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entityfield_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entityfield_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full(null,'b124da10-be8a-4d32-9f68-7f4e6e8b24e9',null,null)) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(null,''b124da10-be8a-4d32-9f68-7f4e6e8b24e9'',null,null)= 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_entitytemplate_field_read_full(null,null,'d15bb9c2-0601-4e4f-9009-c791a40be191',null)) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_entitytemplate_field_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_entitytemplate_field_read_full(null,null,''d15bb9c2-0601-4e4f-9009-c791a40be191'',null)= 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- Systags
RAISE NOTICE  E'testing systags\n-------\n';

RAISE NOTICE  E'testing all customers all systags\n-------';

if (select count(*) from entity.func_systag_read_min(null,null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'')> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full(null,null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer all systags\n-------';

if (select count(*) from entity.func_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing all systags for a parent\n-------';

if (select count(*) from entity.func_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing systag fail scenario for parent\n-------';

if (select count(*) from entity.func_systag_read_min(null,null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full(null,null,null, '86be74b7-40df-4c20-9467-d35fae610c52', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(null,null,null, ''86be74b7-40df-4c20-9467-d35fae610c52'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific systags\n-------';

if (select count(*) from entity.func_systag_read_min(null, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_systag_read_min(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''=1)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_systag_read_min(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''=1)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_systag_read_full(null, null, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_systag_read_full(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'' = 1)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_systag_read_full(null, null, ''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'' = 1)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'\ntesting customer\n-------\n';

RAISE NOTICE  E'testing specific customer\n-------';

if (select count(*) from entity.func_customer_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',false, null)) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_customer_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null)= 1  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_customer_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null)= 1  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_customer_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',false, null)) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_customer_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null)=1  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_customer_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',false, null)=1  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing all customers\n-------';

if (select count(*) from entity.func_customer_read_min(null,true, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_customer_read_min(null,true, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_customer_read_min(null,true, null)> 0  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_customer_read_full(null,true, null)) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_customer_read_full(null,true, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_customer_read_full(null,true, null)> 0  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing location\n-------\n';

RAISE NOTICE  E'testing all customers all locations all tags\n-------';
if (select count(*) from entity.func_location_read_min(null,null,true,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_location_read_min(null,null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_location_read_min(null,null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_location_read_full(null,null,true,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_location_read_full(null,null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_location_read_full(null,null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer all locations all tags\n-------';
if (select count(*) from entity.func_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,true,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,true,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customer all locations specific tags\n-------';
if (select count(*) from entity.func_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,true,'c557ca4c-184a-4958-a49a-260ca6f6ee07','bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,''c557ca4c-184a-4958-a49a-260ca6f6ee07'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,''c557ca4c-184a-4958-a49a-260ca6f6ee07'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,true,'c557ca4c-184a-4958-a49a-260ca6f6ee07','bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,''c557ca4c-184a-4958-a49a-260ca6f6ee07'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,true,''c557ca4c-184a-4958-a49a-260ca6f6ee07'',''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific locations specific tags\n-------';
if (select count(*) from entity.func_location_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61','af4dc39d-7d4a-46a4-9ad0-980c23bff933',false,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',false,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_location_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',false,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_location_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61','af4dc39d-7d4a-46a4-9ad0-980c23bff933',false,null,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',false,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_location_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',''af4dc39d-7d4a-46a4-9ad0-980c23bff933'',false,null,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

-- custags  
RAISE NOTICE  E'testing custags\n-------\n';

RAISE NOTICE  E'testing all customers all custags \n-------';
if (select count(*) from entity.func_custag_read_min(null,null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full(null,null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(null,null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific customers all custags \n-------';
if (select count(*) from entity.func_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, null, true,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, null, true,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing all custags for a parent\n-------';
if (select count(*) from entity.func_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61',null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) > 0 
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'',null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''> 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing fail scenario for parent\n-------';
if (select count(*) from entity.func_custag_read_min(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full(null,null,null, 'cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba', false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(null,null,null, ''cb3dfd1a-e2f6-4d69-9483-ef6b79cf2eba'', false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing specific custags\n-------';
if (select count(*) from entity.func_custag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61', null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 1
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(''f90d618d-5de7-4126-8c65-0afb700c6c61'', null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 1)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

RAISE NOTICE  E'testing fail for custags\n-------';
if (select count(*) from entity.func_custag_read_min(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_custag_read_min(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_custag_read_min(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();
if (select count(*) from entity.func_custag_read_full(null, null, '444d946c-1180-4eb2-ae52-a429d096b9f1', null, false,'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9')) = 0
	Then RAISE NOTICE E'Pass:  select count(*) from entity.func_custag_read_full(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;	
			successtestcount = successtestcount + 1;
	Else RAISE NOTICE E'Fail:  select count(*) from entity.func_custag_read_full(null, null, ''444d946c-1180-4eb2-ae52-a429d096b9f1'', null, false,''bcbe750d-1b3b-4e2b-82ec-448bb8b116f9''= 0)  Time: %\n', (clock_timestamp()-fact_end)::text;
		failedtest = true;
		failedtestcount = failedtestcount + 1;
End If;
fact_end = clock_timestamp();

if failedtest = true
	then RAISE NOTICE E'Fail:  At least one test failed  Time: %\n', (clock_timestamp()-fact_start)::text;
	else RAISE NOTICE E'Pass:  All tests passed  Time: %\n', (clock_timestamp()-fact_start)::text;
end if;

/*

if (select count(*) from entity.func_entitytemplate_read_min(null, null, null)) > 0
	Then RAISE NOTICE 'Pass:  select count(*) from entity.func_entitytemplate_read_min(null, null, null)';	
	Else RAISE NOTICE 'Fail:  select count(*) from entity.func_entitytemplate_read_min(null, null, null)';
		failedtest = true;
End If;

-- Insert into the tendy tracker

    if (select dwlogginglevel2 from datawarehouse.dw_logginglevels) = false
    Then
        Return;
    end if;

    if intervaltype = '5 minute'
    Then
        call datawarehouse.insert_tendy_tracker(0, 2517, 12496, 980, 844, 20770, 18068, 20771, 20769, fact_start);
        Return;
    end if;

    if intervaltype = '1 hour'
    Then
        call datawarehouse.insert_tendy_tracker(0, 2518, 12496, 980, 844, 20774, 18068, 20775, 20773, fact_start);
        Return;
    end if;

    call datawarehouse.insert_tendy_tracker(0, 2519, 12496, 980, 844, 20778, 18068, 20779, 20777, fact_start);

    commit;
*/
End;

$procedure$;


REVOKE ALL ON PROCEDURE entity.test_entity_withresults() FROM PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.test_entity_withresults() TO PUBLIC;
GRANT EXECUTE ON PROCEDURE entity.test_entity_withresults() TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON PROCEDURE entity.test_entity_withresults() TO graphql;

-- Type: FUNCTION ; Name: entity.util_test_createlog(bigint,bigint,boolean,text,text,text,text,timestamp with time zone,boolean); Owner: tendreladmin

CREATE OR REPLACE FUNCTION entity.util_test_createlog(test_failedtestcount bigint, test_successtestcount bigint, test_failedtest boolean, test_passedtext text, test_failedtext text, test_type text, test_text text, test_start timestamp with time zone, test_passed boolean)
 RETURNS TABLE(failedtestcount bigint, successtestcount bigint, failedtest boolean, passedtext text, failedtext text, next_start timestamp with time zone)
 LANGUAGE plpgsql
AS $function$
Declare
	failedtest boolean;
	failedtestcount bigint;
	successtestcount bigint;	
	failedtext text;
	passedtext text;
	
Begin

	failedtest = test_failedtest;
	failedtestcount = test_failedtestcount;
	successtestcount = test_successtestcount;	
	failedtext = test_failedtext;
	passedtext = test_passedtext;

if test_type = 'header' or  test_type = 'section' 
	then passedtext = passedtext||E'\n'||test_text||E'\n-------\n';
		failedtext = failedtext||E'\n'||test_text||E'\n-------\n';
end if;

if test_type = 'test'  
	then passedtext = passedtext||'  '||test_text||E'\n  -------\n';
		failedtext = failedtext||'  '||test_text||E'\n  -------\n';
end if;

if test_type = 'sql' and  test_passed = true
	then 
		passedtext = passedtext||'     Pass: '||test_text||' Time: '|| (clock_timestamp()-test_start)::text||E'\n';
		successtestcount = successtestcount + 1;
end if;

if test_type = 'sql' and  test_passed = false
	then 
		failedtext = failedtext||'     Fail: '||test_text||' Time: '|| (clock_timestamp()-test_start)::text||E'\n';
		failedtest = true;
		failedtestcount = failedtestcount + 1;		
end if;

return query
	select 	failedtestcount, successtestcount,failedtest ,passedtext, failedtext, clock_timestamp();

End;

$function$;


REVOKE ALL ON FUNCTION entity.util_test_createlog(bigint,bigint,boolean,text,text,text,text,timestamp with time zone,boolean) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION entity.util_test_createlog(bigint,bigint,boolean,text,text,text,text,timestamp with time zone,boolean) TO PUBLIC;
GRANT EXECUTE ON FUNCTION entity.util_test_createlog(bigint,bigint,boolean,text,text,text,text,timestamp with time zone,boolean) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION entity.util_test_createlog(bigint,bigint,boolean,text,text,text,text,timestamp with time zone,boolean) TO graphql;

-- Type: TABLE ; Name: runtime_upload_staging; Owner: tendreladmin

CREATE TABLE entity.runtime_upload_staging (
    uploaduuid uuid NOT NULL,
    uploadowneruuid uuid,
    uploadbatchid text,
    uploadrecordid text,
    uploadpreviousrecordid text,
    uploadparentuuid uuid,
    uploadparentname text,
    uploadlocationuuid uuid,
    uploadlocationname text,
    uploadstartdate timestamp with time zone,
    uploadenddate timestamp with time zone,
    uploadduration bigint,
    uploademployee text,
    uploademployeeid text,
    uploademployeetendreluuid text,
    uploadactivityuuid text,
    uploadactivityname text,
    uploadreasoncodeuuid text,
    uploadreasoncodename text,
    uploadunitrunoutput text,
    uploadunitrejectcount text,
    uploadresultuuid text,
    uploadresultname text,
    uploadunittypename text,
    uploadunittypeuuid uuid,
    uploadunitvalue text,
    uploadcreateddate timestamp with time zone,
    templateid bigint,
    customerid bigint,
    siteid bigint,
    locationid bigint,
    languageid bigint,
    uploadrunid text
);


ALTER TABLE entity.runtime_upload_staging ALTER uploaduuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.runtime_upload_staging ALTER uploadcreateddate SET DEFAULT now();

ALTER TABLE entity.runtime_upload_staging ADD CONSTRAINT uploaduuid_pkey PRIMARY KEY (uploaduuid);

GRANT INSERT ON entity.runtime_upload_staging TO authenticated;
GRANT SELECT ON entity.runtime_upload_staging TO authenticated;
GRANT UPDATE ON entity.runtime_upload_staging TO authenticated;
GRANT DELETE ON entity.runtime_upload_staging TO graphql;
GRANT INSERT ON entity.runtime_upload_staging TO graphql;
GRANT REFERENCES ON entity.runtime_upload_staging TO graphql;
GRANT SELECT ON entity.runtime_upload_staging TO graphql;
GRANT TRIGGER ON entity.runtime_upload_staging TO graphql;
GRANT TRUNCATE ON entity.runtime_upload_staging TO graphql;
GRANT UPDATE ON entity.runtime_upload_staging TO graphql;

-- Type: TABLE ; Name: entitydescription; Owner: tendreladmin

CREATE TABLE entity.entitydescription (
    entitydescriptionuuid uuid NOT NULL,
    entitydescriptionownerentityuuid uuid,
    entitydescriptionentitytemplateentityuuid uuid,
    entitydescriptionentityfieldentityduuid uuid,
    entitydescriptionname text,
    entitydescriptionsoplink text,
    entitydescriptionfile text,
    entitydescriptionicon text,
    entitydescriptionlanguagemasteruuid text,
    entitydescriptioncreateddate timestamp(3) with time zone NOT NULL,
    entitydescriptionmodifieddate timestamp(3) with time zone NOT NULL,
    entitydescriptionstartdate timestamp(3) with time zone,
    entitydescriptionenddate timestamp(3) with time zone,
    entitydescriptionexternalid text,
    entitydescriptionexternalsystementityuuid uuid,
    entitydescriptionrefid bigint,
    entitydescriptionrefuuid text,
    entitydescriptiondraft boolean NOT NULL,
    entitydescriptiondeleted boolean NOT NULL,
    entitydescriptionmimetypeuuid uuid,
    entitydescriptionmodifiedby text
);


ALTER TABLE entity.entitydescription ALTER entitydescriptionuuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.entitydescription ALTER entitydescriptioncreateddate SET DEFAULT now();
ALTER TABLE entity.entitydescription ALTER entitydescriptionmodifieddate SET DEFAULT now();
ALTER TABLE entity.entitydescription ALTER entitydescriptionstartdate SET DEFAULT now();
ALTER TABLE entity.entitydescription ALTER entitydescriptiondraft SET DEFAULT false;
ALTER TABLE entity.entitydescription ALTER entitydescriptiondeleted SET DEFAULT false;

ALTER TABLE entity.entitydescription ADD CONSTRAINT entitydescription_pkey PRIMARY KEY (entitydescriptionuuid);
ALTER TABLE entity.entitydescription ADD CONSTRAINT entitydescription_entityfield_fk FOREIGN KEY (entitydescriptionentityfieldentityduuid) REFERENCES entity.entityfield(entityfielduuid);
ALTER TABLE entity.entitydescription ADD CONSTRAINT entitydescription_entitytemplate_fk FOREIGN KEY (entitydescriptionentitytemplateentityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid);
ALTER TABLE entity.entitydescription ADD CONSTRAINT entitydescription_workdescriptionmimetypeuuid_fk FOREIGN KEY (entitydescriptionmimetypeuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

CREATE INDEX entitydescription_entitydescriptiondeleted_idx ON entity.entitydescription USING btree (entitydescriptiondeleted);
CREATE INDEX entitydescription_entitydescriptiondraft_idx ON entity.entitydescription USING btree (entitydescriptiondraft);
CREATE INDEX entitydescription_entitydescriptionenddate_idx ON entity.entitydescription USING btree (entitydescriptionenddate);
CREATE INDEX entitydescription_entitydescriptionentityfieldentityduuid_idx ON entity.entitydescription USING btree (entitydescriptionentityfieldentityduuid);
CREATE INDEX entitydescription_entitydescriptionentitytemplateentityuuid_idx ON entity.entitydescription USING btree (entitydescriptionentitytemplateentityuuid);
CREATE INDEX entitydescription_entitydescriptionlanguagemasteruuid_idx ON entity.entitydescription USING btree (entitydescriptionlanguagemasteruuid);
CREATE INDEX entitydescription_entitydescriptionmodifieddate_idx ON entity.entitydescription USING btree (entitydescriptionmodifieddate);
CREATE INDEX entitydescription_entitydescriptionname_idx ON entity.entitydescription USING btree (entitydescriptionname);
CREATE INDEX entitydescription_entitydescriptionownerentityuuid_idx ON entity.entitydescription USING btree (entitydescriptionownerentityuuid);
CREATE INDEX entitydescription_entitydescriptionstartdate_idx ON entity.entitydescription USING btree (entitydescriptionstartdate);

GRANT INSERT ON entity.entitydescription TO authenticated;
GRANT SELECT ON entity.entitydescription TO authenticated;
GRANT UPDATE ON entity.entitydescription TO authenticated;
GRANT DELETE ON entity.entitydescription TO graphql;
GRANT INSERT ON entity.entitydescription TO graphql;
GRANT REFERENCES ON entity.entitydescription TO graphql;
GRANT SELECT ON entity.entitydescription TO graphql;
GRANT TRIGGER ON entity.entitydescription TO graphql;
GRANT TRUNCATE ON entity.entitydescription TO graphql;
GRANT UPDATE ON entity.entitydescription TO graphql;

-- Type: TABLE ; Name: entityfield; Owner: tendreladmin

CREATE TABLE entity.entityfield (
    entityfielduuid uuid NOT NULL,
    entityfieldentitytemplateentityuuid uuid NOT NULL,
    entityfieldcreateddate timestamp(3) with time zone NOT NULL,
    entityfieldmodifieddate timestamp(3) with time zone,
    entityfieldstartdate timestamp(3) with time zone,
    entityfieldenddate timestamp(3) with time zone,
    entityfieldlanguagemasteruuid text,
    entityfieldorder bigint NOT NULL,
    entityfielddefaultvalue text,
    entityfieldiscalculated boolean NOT NULL,
    entityfieldiseditable boolean NOT NULL,
    entityfieldisvisible boolean NOT NULL,
    entityfieldisrequired boolean NOT NULL,
    entityfieldexternalid text,
    entityfieldmodifiedbyuuid text,
    entityfieldrefid bigint,
    entityfieldrefuuid text,
    entityfieldisprimary boolean NOT NULL,
    entityfieldtranslate boolean NOT NULL,
    entityfieldname text NOT NULL,
    entityfieldownerentityuuid uuid NOT NULL,
    entityfieldtypeentityuuid uuid NOT NULL,
    entityfieldparententityuuid uuid,
    entityfieldentitytypeentityuuid uuid,
    entityfieldentityparenttypeentityuuid uuid,
    entityfieldformatentityuuid uuid,
    entityfieldwidgetentityuuid uuid NOT NULL,
    entityfieldexternalsystementityuuid uuid,
    entityfielddeleted boolean NOT NULL,
    entityfielddraft boolean NOT NULL
);


ALTER TABLE entity.entityfield ALTER entityfielduuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.entityfield ALTER entityfieldcreateddate SET DEFAULT now();
ALTER TABLE entity.entityfield ALTER entityfieldmodifieddate SET DEFAULT now();
ALTER TABLE entity.entityfield ALTER entityfieldstartdate SET DEFAULT now();
ALTER TABLE entity.entityfield ALTER entityfieldiscalculated SET DEFAULT false;
ALTER TABLE entity.entityfield ALTER entityfieldiseditable SET DEFAULT true;
ALTER TABLE entity.entityfield ALTER entityfieldisvisible SET DEFAULT true;
ALTER TABLE entity.entityfield ALTER entityfieldisrequired SET DEFAULT false;
ALTER TABLE entity.entityfield ALTER entityfieldisprimary SET DEFAULT false;
ALTER TABLE entity.entityfield ALTER entityfieldtranslate SET DEFAULT true;
ALTER TABLE entity.entityfield ALTER entityfielddeleted SET DEFAULT false;
ALTER TABLE entity.entityfield ALTER entityfielddraft SET DEFAULT false;

ALTER TABLE entity.entityfield ADD CONSTRAINT entityfield_pkey PRIMARY KEY (entityfielduuid);
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfield_entityfieldentitytemplateuuid_fkey FOREIGN KEY (entityfieldentitytemplateentityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid) ON UPDATE CASCADE ON DELETE RESTRICT;
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfield_entityfieldlanguagemasteruuid_fkey FOREIGN KEY (entityfieldlanguagemasteruuid) REFERENCES languagemaster(languagemasteruuid) ON UPDATE CASCADE ON DELETE RESTRICT;
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfield_entityfieldmodifiedbyuuid_fkey FOREIGN KEY (entityfieldmodifiedbyuuid) REFERENCES workerinstance(workerinstanceuuid) ON UPDATE CASCADE ON DELETE SET NULL;
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldcustomerentityuuid_enitityinstance_fk FOREIGN KEY (entityfieldownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldentityparenttypeentityuuid_entityinstance_fk FOREIGN KEY (entityfieldentityparenttypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldentitytypeentityuuid_entityinstance_fk FOREIGN KEY (entityfieldentitytypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldexternalsystementityuuid_entityinstance_fk FOREIGN KEY (entityfieldexternalsystementityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldformatentityuuid_entityinstance_fk FOREIGN KEY (entityfieldformatentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldwidgetentityuuid_entityinstance_fk FOREIGN KEY (entityfieldwidgetentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

CREATE INDEX entityfield_entityfieldcustomerentityuuid_idx ON entity.entityfield USING btree (entityfieldownerentityuuid);
CREATE INDEX entityfield_entityfielddeleted_idx ON entity.entityfield USING btree (entityfielddeleted);
CREATE INDEX entityfield_entityfielddraft_idx ON entity.entityfield USING btree (entityfielddraft);
CREATE INDEX entityfield_entityfieldenddate_idx ON entity.entityfield USING btree (entityfieldenddate);
CREATE INDEX entityfield_entityfieldentityparenttypeentityuuid_idx ON entity.entityfield USING btree (entityfieldentityparenttypeentityuuid);
CREATE INDEX entityfield_entityfieldentitytemplateentityuuid_idx ON entity.entityfield USING btree (entityfieldentitytemplateentityuuid);
CREATE INDEX entityfield_entityfieldentitytypeentityuuid_idx ON entity.entityfield USING btree (entityfieldentitytypeentityuuid);
CREATE INDEX entityfield_entityfieldexternalsystementityuuid_idx ON entity.entityfield USING btree (entityfieldexternalsystementityuuid);
CREATE INDEX entityfield_entityfieldformatentityuuid_idx ON entity.entityfield USING btree (entityfieldformatentityuuid);
CREATE INDEX entityfield_entityfieldlanguagemasteruuid_idx ON entity.entityfield USING btree (entityfieldlanguagemasteruuid);
CREATE INDEX entityfield_entityfieldmodifiedbyuuid_idx ON entity.entityfield USING btree (entityfieldmodifiedbyuuid);
CREATE INDEX entityfield_entityfieldmodifieddate_idx ON entity.entityfield USING btree (entityfieldmodifieddate);
CREATE INDEX entityfield_entityfieldname_idx ON entity.entityfield USING btree (entityfieldname);
CREATE INDEX entityfield_entityfieldsiteentityuuid_idx ON entity.entityfield USING btree (entityfieldparententityuuid);
CREATE INDEX entityfield_entityfieldstartdate_idx ON entity.entityfield USING btree (entityfieldstartdate);
CREATE INDEX entityfield_entityfieldtypeentityuuid_idx ON entity.entityfield USING btree (entityfieldtypeentityuuid);
CREATE INDEX entityfield_entityfieldwidgetentityuuid_idx ON entity.entityfield USING btree (entityfieldwidgetentityuuid);

GRANT INSERT ON entity.entityfield TO authenticated;
GRANT SELECT ON entity.entityfield TO authenticated;
GRANT UPDATE ON entity.entityfield TO authenticated;
GRANT DELETE ON entity.entityfield TO graphql;
GRANT INSERT ON entity.entityfield TO graphql;
GRANT REFERENCES ON entity.entityfield TO graphql;
GRANT SELECT ON entity.entityfield TO graphql;
GRANT TRIGGER ON entity.entityfield TO graphql;
GRANT TRUNCATE ON entity.entityfield TO graphql;
GRANT UPDATE ON entity.entityfield TO graphql;

-- Type: TABLE ; Name: entityinstance; Owner: tendreladmin

CREATE TABLE entity.entityinstance (
    entityinstanceuuid uuid NOT NULL,
    entityinstanceoriginalid bigint,
    entityinstanceoriginaluuid text,
    entityinstanceownerentityuuid uuid,
    entityinstanceentitytemplateentityuuid uuid NOT NULL,
    entityinstancesiteentityuuid uuid,
    entityinstancecreateddate timestamp(3) with time zone NOT NULL,
    entityinstancemodifieddate timestamp(3) with time zone NOT NULL,
    entityinstancestartdate timestamp(3) with time zone,
    entityinstanceenddate timestamp(3) with time zone,
    entityinstanceexternalid text,
    entityinstancemodifiedbyuuid text,
    entityinstancerefid bigint,
    entityinstancerefuuid text,
    entityinstanceexternalsystemuuid text,
    entityinstanceentitytemplatename text,
    entityinstancetypeentityuuid uuid,
    entityinstancetype text,
    entityinstanceexternalsystementityuuid uuid,
    entityinstanceparententityuuid uuid,
    entityinstancecornerstoneentityuuid uuid,
    entityinstancecornerstoneorder integer,
    entityinstancescanid text,
    entityinstancedeleted boolean NOT NULL,
    entityinstancedraft boolean NOT NULL,
    entityinstancenameuuid text
);


ALTER TABLE entity.entityinstance ALTER entityinstanceuuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.entityinstance ALTER entityinstancecreateddate SET DEFAULT now();
ALTER TABLE entity.entityinstance ALTER entityinstancemodifieddate SET DEFAULT now();
ALTER TABLE entity.entityinstance ALTER entityinstancecornerstoneorder SET DEFAULT 1;
ALTER TABLE entity.entityinstance ALTER entityinstancedeleted SET DEFAULT false;
ALTER TABLE entity.entityinstance ALTER entityinstancedraft SET DEFAULT false;

ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_pkey PRIMARY KEY (entityinstanceuuid);
ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstanceentitytemplateentityuuid_fk FOREIGN KEY (entityinstanceentitytemplateentityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid) NOT VALID;
ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstancemodifiedbyuuid_fk FOREIGN KEY (entityinstancemodifiedbyuuid) REFERENCES workerinstance(workerinstanceuuid) NOT VALID;

CREATE INDEX entityinstance_entityinstancecustomerentityuuid_idx ON entity.entityinstance USING btree (entityinstanceownerentityuuid);
CREATE INDEX entityinstance_entityinstancedeleted_idx ON entity.entityinstance USING btree (entityinstancedeleted);
CREATE INDEX entityinstance_entityinstancedraft_idx ON entity.entityinstance USING btree (entityinstancedraft);
CREATE INDEX entityinstance_entityinstanceenddate_idx ON entity.entityinstance USING btree (entityinstanceenddate);
CREATE INDEX entityinstance_entityinstanceentitytemplateentityuuid_idx ON entity.entityinstance USING btree (entityinstanceentitytemplateentityuuid);
CREATE INDEX entityinstance_entityinstanceentitytemplatename_idx ON entity.entityinstance USING btree (entityinstanceentitytemplatename);
CREATE INDEX entityinstance_entityinstanceexternalsystementityuuid_idx ON entity.entityinstance USING btree (entityinstanceexternalsystementityuuid);
CREATE INDEX entityinstance_entityinstanceexternalsystemuuid_idx ON entity.entityinstance USING btree (entityinstanceexternalsystemuuid);
CREATE INDEX entityinstance_entityinstancemodifiedbyuuid_idx ON entity.entityinstance USING btree (entityinstancemodifiedbyuuid);
CREATE INDEX entityinstance_entityinstancemodifieddate_idx ON entity.entityinstance USING btree (entityinstancemodifieddate);
CREATE INDEX entityinstance_entityinstanceoriginalid_idx ON entity.entityinstance USING btree (entityinstanceoriginalid);
CREATE INDEX entityinstance_entityinstanceoriginaluuid_idx ON entity.entityinstance USING btree (entityinstanceoriginaluuid);
CREATE INDEX entityinstance_entityinstanceparententityuuid_idx ON entity.entityinstance USING btree (entityinstanceparententityuuid);
CREATE INDEX entityinstance_entityinstancescanid_idx ON entity.entityinstance USING btree (entityinstancescanid);
CREATE INDEX entityinstance_entityinstancesiteentityuuid_idx ON entity.entityinstance USING btree (entityinstancesiteentityuuid);
CREATE INDEX entityinstance_entityinstancestartdate_idx ON entity.entityinstance USING btree (entityinstancestartdate);
CREATE INDEX entityinstance_entityinstancetype_idx ON entity.entityinstance USING btree (entityinstancetype);
CREATE INDEX entityinstance_entityinstancetypeentityuuid_idx ON entity.entityinstance USING btree (entityinstancetypeentityuuid);

GRANT INSERT ON entity.entityinstance TO authenticated;
GRANT SELECT ON entity.entityinstance TO authenticated;
GRANT UPDATE ON entity.entityinstance TO authenticated;
GRANT DELETE ON entity.entityinstance TO graphql;
GRANT INSERT ON entity.entityinstance TO graphql;
GRANT REFERENCES ON entity.entityinstance TO graphql;
GRANT SELECT ON entity.entityinstance TO graphql;
GRANT TRIGGER ON entity.entityinstance TO graphql;
GRANT TRUNCATE ON entity.entityinstance TO graphql;
GRANT UPDATE ON entity.entityinstance TO graphql;

-- Type: TABLE ; Name: entitytag; Owner: tendreladmin

CREATE TABLE entity.entitytag (
    entitytaguuid uuid NOT NULL,
    entitytagownerentityuuid uuid NOT NULL,
    entitytagsiteentityuuid uuid,
    entitytagentityinstanceentityuuid uuid,
    entitytagentitytemplateentityuuid uuid,
    entitytagcreateddate timestamp(3) with time zone NOT NULL,
    entitytagmodifieddate timestamp(3) with time zone NOT NULL,
    entitytagstartdate timestamp(3) with time zone,
    entitytagenddate timestamp(3) with time zone,
    entitytagrefid bigint,
    entitytagrefuuid text,
    entitytagmodifiedbyuuid text,
    entitytagcustagentityuuid uuid NOT NULL,
    entitytagdeleted boolean,
    entitytagdraft boolean
);


ALTER TABLE entity.entitytag ALTER entitytaguuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.entitytag ALTER entitytagcreateddate SET DEFAULT now();
ALTER TABLE entity.entitytag ALTER entitytagmodifieddate SET DEFAULT now();
ALTER TABLE entity.entitytag ALTER entitytagdeleted SET DEFAULT false;
ALTER TABLE entity.entitytag ALTER entitytagdraft SET DEFAULT false;

ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_pkey PRIMARY KEY (entitytaguuid);
ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_entitytagcustagentityuuid_fk FOREIGN KEY (entitytagcustagentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_entitytagentityinstanceentityuuid_fk FOREIGN KEY (entitytagentityinstanceentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_entitytagentitytemplateentityuuid_fk FOREIGN KEY (entitytagentitytemplateentityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid) NOT VALID;
ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_entitytagownerentityuuid_fk FOREIGN KEY (entitytagownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

CREATE INDEX entitytag_entitytagcustagentityuuid_idx ON entity.entitytag USING btree (entitytagcustagentityuuid);
CREATE INDEX entitytag_entitytagcustomerentityuuid_idx ON entity.entitytag USING btree (entitytagownerentityuuid);
CREATE INDEX entitytag_entitytagdeleted_idx ON entity.entitytag USING btree (entitytagdeleted);
CREATE INDEX entitytag_entitytagdraft_idx ON entity.entitytag USING btree (entitytagdraft);
CREATE INDEX entitytag_entitytagenddate_idx ON entity.entitytag USING btree (entitytagenddate);
CREATE INDEX entitytag_entitytagentityinstanceentityuuid_idx ON entity.entitytag USING btree (entitytagentityinstanceentityuuid);
CREATE INDEX entitytag_entitytagentitytemplateentityuuid_idx ON entity.entitytag USING btree (entitytagentitytemplateentityuuid);
CREATE INDEX entitytag_entitytagmodifiedbyuuid_idx ON entity.entitytag USING btree (entitytagmodifiedbyuuid);
CREATE INDEX entitytag_entitytagmodifieddate_idx ON entity.entitytag USING btree (entitytagmodifieddate);
CREATE INDEX entitytag_entitytagsiteentityuuid_idx ON entity.entitytag USING btree (entitytagsiteentityuuid);
CREATE INDEX entitytag_entitytagstartdate_idx ON entity.entitytag USING btree (entitytagstartdate);

GRANT INSERT ON entity.entitytag TO authenticated;
GRANT SELECT ON entity.entitytag TO authenticated;
GRANT UPDATE ON entity.entitytag TO authenticated;
GRANT DELETE ON entity.entitytag TO graphql;
GRANT INSERT ON entity.entitytag TO graphql;
GRANT REFERENCES ON entity.entitytag TO graphql;
GRANT SELECT ON entity.entitytag TO graphql;
GRANT TRIGGER ON entity.entitytag TO graphql;
GRANT TRUNCATE ON entity.entitytag TO graphql;
GRANT UPDATE ON entity.entitytag TO graphql;

-- Type: TABLE ; Name: entitytemplate; Owner: tendreladmin

CREATE TABLE entity.entitytemplate (
    entitytemplateuuid uuid NOT NULL,
    entitytemplatestartdate timestamp(3) with time zone,
    entitytemplateenddate timestamp(3) with time zone,
    entitytemplatecreateddate timestamp(3) with time zone NOT NULL,
    entitytemplatemodifieddate timestamp(3) with time zone NOT NULL,
    entitytemplateexternalid text,
    entitytemplatescanid text,
    entitytemplatenameuuid text,
    entitytemplateorder integer NOT NULL,
    entitytemplatemodifiedbyuuid text,
    entitytemplaterefid bigint,
    entitytemplaterefuuid text,
    entitytemplateisprimary boolean,
    entitytemplateownerentityuuid uuid,
    entitytemplatetypeentityuuid uuid,
    entitytemplateparententityuuid uuid,
    entitytemplateexternalsystementityuuid uuid,
    entitytemplatename text NOT NULL,
    entitytemplatedeleted boolean NOT NULL,
    entitytemplatedraft boolean NOT NULL
);


ALTER TABLE entity.entitytemplate ALTER entitytemplateuuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.entitytemplate ALTER entitytemplatestartdate SET DEFAULT now();
ALTER TABLE entity.entitytemplate ALTER entitytemplatecreateddate SET DEFAULT now();
ALTER TABLE entity.entitytemplate ALTER entitytemplatemodifieddate SET DEFAULT now();
ALTER TABLE entity.entitytemplate ALTER entitytemplateorder SET DEFAULT 1;
ALTER TABLE entity.entitytemplate ALTER entitytemplatedeleted SET DEFAULT false;
ALTER TABLE entity.entitytemplate ALTER entitytemplatedraft SET DEFAULT false;

ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplate_pkey PRIMARY KEY (entitytemplateuuid);
ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplatecustomerentityuuid_entityinstance_fk FOREIGN KEY (entitytemplateownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplateexternalsystementityuuid_entityinstance_fk FOREIGN KEY (entitytemplateexternalsystementityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;
ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplatemodifiedbyuuid_workerinstanceuuid_fk FOREIGN KEY (entitytemplatemodifiedbyuuid) REFERENCES workerinstance(workerinstanceuuid) NOT VALID;
ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplatenameuuid_languagmasteruuid_fk FOREIGN KEY (entitytemplatenameuuid) REFERENCES languagemaster(languagemasteruuid) NOT VALID;
ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplatetypeentityuuid_entityinstance_fk FOREIGN KEY (entitytemplatetypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

CREATE INDEX entitytemplate_entitytemplatecustomerentityuuid_idx ON entity.entitytemplate USING btree (entitytemplateownerentityuuid);
CREATE INDEX entitytemplate_entitytemplatedeleted_idx ON entity.entitytemplate USING btree (entitytemplatedeleted);
CREATE INDEX entitytemplate_entitytemplatedraft_idx ON entity.entitytemplate USING btree (entitytemplatedraft);
CREATE INDEX entitytemplate_entitytemplateenddate_idx ON entity.entitytemplate USING btree (entitytemplateenddate);
CREATE INDEX entitytemplate_entitytemplateexternalsystementityuuid_idx ON entity.entitytemplate USING btree (entitytemplateexternalsystementityuuid);
CREATE INDEX entitytemplate_entitytemplatemodifiedbyuuid_idx ON entity.entitytemplate USING btree (entitytemplatemodifiedbyuuid);
CREATE INDEX entitytemplate_entitytemplatemodifieddate_idx ON entity.entitytemplate USING btree (entitytemplatemodifieddate);
CREATE INDEX entitytemplate_entitytemplatename_idx ON entity.entitytemplate USING btree (entitytemplatename);
CREATE INDEX entitytemplate_entitytemplatenameuuid_idx ON entity.entitytemplate USING btree (entitytemplatenameuuid);
CREATE INDEX entitytemplate_entitytemplatesiteentityuuid_idx ON entity.entitytemplate USING btree (entitytemplateparententityuuid);
CREATE INDEX entitytemplate_entitytemplatestartdate_idx ON entity.entitytemplate USING btree (entitytemplatestartdate);
CREATE INDEX entitytemplate_entitytemplatetypeentityuuid_idx ON entity.entitytemplate USING btree (entitytemplatetypeentityuuid);
CREATE INDEX entitytemplatescanid_idx ON entity.entitytemplate USING btree (entitytemplatescanid);

GRANT INSERT ON entity.entitytemplate TO authenticated;
GRANT SELECT ON entity.entitytemplate TO authenticated;
GRANT UPDATE ON entity.entitytemplate TO authenticated;
GRANT DELETE ON entity.entitytemplate TO graphql;
GRANT INSERT ON entity.entitytemplate TO graphql;
GRANT REFERENCES ON entity.entitytemplate TO graphql;
GRANT SELECT ON entity.entitytemplate TO graphql;
GRANT TRIGGER ON entity.entitytemplate TO graphql;
GRANT TRUNCATE ON entity.entitytemplate TO graphql;
GRANT UPDATE ON entity.entitytemplate TO graphql;

-- Type: TABLE ; Name: runtime_upload_prepped; Owner: tendreladmin

CREATE TABLE entity.runtime_upload_prepped (
    uploaduuid uuid NOT NULL,
    uploadowneruuid uuid,
    uploadbatchid text,
    uploadrecordid text,
    uploadpreviousrecordid text,
    uploadparentuuid uuid,
    uploadparentname text,
    uploadlocationuuid uuid,
    uploadlocationname text,
    uploadstartdate timestamp with time zone,
    uploadenddate timestamp with time zone,
    uploadduration bigint,
    uploademployee text,
    uploademployeeid text,
    uploademployeetendreluuid text,
    uploadactivityuuid text,
    uploadactivityname text,
    uploadreasoncodeuuid text,
    uploadreasoncodename text,
    uploadunitrunoutput text,
    uploadunitrejectcount text,
    uploadresultuuid text,
    uploadresultname text,
    uploadunittypename text,
    uploadunittypeuuid uuid,
    uploadunitvalue text,
    uploadcreateddate timestamp with time zone,
    originaluuid uuid,
    prepped boolean,
    templateid bigint,
    customerid bigint,
    siteid bigint,
    locationid bigint,
    languageid bigint,
    timezone text,
    batchinstanceuuid text,
    workinstanceuuid text,
    previousworkinstanceuuid text,
    uploadrunid text,
    import_batch uuid
);


ALTER TABLE entity.runtime_upload_prepped ALTER uploaduuid SET DEFAULT gen_random_uuid();
ALTER TABLE entity.runtime_upload_prepped ALTER uploadcreateddate SET DEFAULT now();
ALTER TABLE entity.runtime_upload_prepped ALTER prepped SET DEFAULT false;

ALTER TABLE entity.runtime_upload_prepped ADD CONSTRAINT uploaduuid_staged_pkey PRIMARY KEY (uploaduuid);

GRANT INSERT ON entity.runtime_upload_prepped TO authenticated;
GRANT SELECT ON entity.runtime_upload_prepped TO authenticated;
GRANT UPDATE ON entity.runtime_upload_prepped TO authenticated;
GRANT DELETE ON entity.runtime_upload_prepped TO graphql;
GRANT INSERT ON entity.runtime_upload_prepped TO graphql;
GRANT REFERENCES ON entity.runtime_upload_prepped TO graphql;
GRANT SELECT ON entity.runtime_upload_prepped TO graphql;
GRANT TRIGGER ON entity.runtime_upload_prepped TO graphql;
GRANT TRUNCATE ON entity.runtime_upload_prepped TO graphql;
GRANT UPDATE ON entity.runtime_upload_prepped TO graphql;

-- Type: VIEW ; Name: custag; Owner: tendreladmin

CREATE OR REPLACE VIEW api.custag AS
 SELECT custagentityuuid AS id,
    custagid AS legacy_id,
    custaguuid AS legacy_uuid,
    custagownerentityuuid AS owner,
    custagownerentityname AS owner_name,
    custagparententityuuid AS parent,
    custagparentname AS parent_name,
    custagcornerstoneentityid AS cornerstone,
    custagnameuuid AS name_id,
    custagname AS name,
    custagdisplaynameuuid AS displayname_id,
    custagdisplayname AS displayname,
    custagtype AS type,
    custagcreateddate AS created_at,
    custagmodifieddate AS updated_at,
    custagstartdate AS activated_at,
    custagenddate AS deactivated_at,
    custagexternalid AS external_id,
    custagexternalsystementityuuid AS external_system,
    custagmodifiedbyuuid AS modified_by,
    custagorder AS _order,
    systagsenddeleted AS _deleted,
    systagsenddrafts AS _draft,
    systagsendinactive AS _active
   FROM ( SELECT crud_custag_read_api.languagetranslationtypeentityuuid,
            crud_custag_read_api.custagid,
            crud_custag_read_api.custaguuid,
            crud_custag_read_api.custagentityuuid,
            crud_custag_read_api.custagownerentityuuid,
            crud_custag_read_api.custagownerentityname,
            crud_custag_read_api.custagparententityuuid,
            crud_custag_read_api.custagparentname,
            crud_custag_read_api.custagcornerstoneentityid,
            crud_custag_read_api.custagcustomerid,
            crud_custag_read_api.custagcustomeruuid,
            crud_custag_read_api.custagcustomerentityuuid,
            crud_custag_read_api.custagcustomername,
            crud_custag_read_api.custagnameuuid,
            crud_custag_read_api.custagname,
            crud_custag_read_api.custagdisplaynameuuid,
            crud_custag_read_api.custagdisplayname,
            crud_custag_read_api.custagtype,
            crud_custag_read_api.custagcreateddate,
            crud_custag_read_api.custagmodifieddate,
            crud_custag_read_api.custagstartdate,
            crud_custag_read_api.custagenddate,
            crud_custag_read_api.custagexternalid,
            crud_custag_read_api.custagexternalsystementityuuid,
            crud_custag_read_api.custagexternalsystemenname,
            crud_custag_read_api.custagmodifiedbyuuid,
            crud_custag_read_api.custagabbreviationentityuuid,
            crud_custag_read_api.custagabbreviationname,
            crud_custag_read_api.custagorder,
            crud_custag_read_api.systagsenddeleted,
            crud_custag_read_api.systagsenddrafts,
            crud_custag_read_api.systagsendinactive
           FROM entity.crud_custag_read_api(ARRAY( SELECT util_get_onwership.get_ownership
                   FROM _api.util_get_onwership() util_get_onwership(get_ownership)), NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_custag_read_api(languagetranslationtypeentityuuid, custagid, custaguuid, custagentityuuid, custagownerentityuuid, custagownerentityname, custagparententityuuid, custagparentname, custagcornerstoneentityid, custagcustomerid, custagcustomeruuid, custagcustomerentityuuid, custagcustomername, custagnameuuid, custagname, custagdisplaynameuuid, custagdisplayname, custagtype, custagcreateddate, custagmodifieddate, custagstartdate, custagenddate, custagexternalid, custagexternalsystementityuuid, custagexternalsystemenname, custagmodifiedbyuuid, custagabbreviationentityuuid, custagabbreviationname, custagorder, systagsenddeleted, systagsenddrafts, systagsendinactive)) custag
  WHERE (custagownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.custag IS '
## Custag

A description of what an entity tempalte is and why it is used

### get {baseUrl}/custag

A bunch of comments explaining get

### del {baseUrl}/custag

A bunch of comments explaining del

### patch {baseUrl}/custag

A bunch of comments explaining patch
';

CREATE TRIGGER create_custag_tg INSTEAD OF INSERT ON api.custag FOR EACH ROW EXECUTE FUNCTION api.create_custag();
CREATE TRIGGER update_custag_tg INSTEAD OF UPDATE ON api.custag FOR EACH ROW EXECUTE FUNCTION api.update_custag();

GRANT INSERT ON api.custag TO authenticated;
GRANT SELECT ON api.custag TO authenticated;
GRANT UPDATE ON api.custag TO authenticated;

-- Type: VIEW ; Name: customer; Owner: tendreladmin

CREATE OR REPLACE VIEW api.customer AS
 SELECT customer.customerid AS legacy_id,
    customer.customeruuid AS legacy_uuid,
    customer.customerentityuuid AS id,
    customer.customerownerentityuuid AS owner,
    customer.customerparententityuuid AS parent,
    parent.customername AS parent_name,
    customer.customercornerstoneentityuuid AS cornerstonename_id,
    customer.customercornerstoneorder AS _order,
    customer.customernameuuid AS name_id,
    customer.customername AS name,
    customer.customerdisplaynameuuid AS displayname_id,
    customer.customerdisplayname AS displayname,
    customer.customertypeentityuuid AS type_id,
    customer.customertype AS type,
    customer.customercreateddate AS created_at,
    customer.customermodifieddate AS updated_at,
    customer.customerstartdate AS activated_at,
    customer.customerenddate AS deactivated_at,
    customer.customermodifiedbyuuid AS modified_by,
    customer.customerexternalid AS external_id,
    customer.customerexternalsystementityuuid AS external_system,
    customer.customersenddeleted AS _deleted,
    customer.customersenddrafts AS _draft,
    customer.customersendinactive AS _active
   FROM entity.crud_customer_read_full(NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
           FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) customer(customerid, customeruuid, customerentityuuid, customerownerentityuuid, customerparententityuuid, customercornerstoneentityuuid, customercornerstoneorder, customernameuuid, customername, customerdisplaynameuuid, customerdisplayname, customertypeentityuuid, customertype, customercreateddate, customermodifieddate, customerstartdate, customerenddate, customermodifiedbyuuid, customerexternalid, customerexternalsystementityuuid, customerexternalsystemname, customerrefid, customerrefuuid, customerlanguagetypeentityuuid, customersenddeleted, customersenddrafts, customersendinactive)
     JOIN entity.crud_customer_read_full(NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
           FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) parent(customerid, customeruuid, customerentityuuid, customerownerentityuuid, customerparententityuuid, customercornerstoneentityuuid, customercornerstoneorder, customernameuuid, customername, customerdisplaynameuuid, customerdisplayname, customertypeentityuuid, customertype, customercreateddate, customermodifieddate, customerstartdate, customerenddate, customermodifiedbyuuid, customerexternalid, customerexternalsystementityuuid, customerexternalsystemname, customerrefid, customerrefuuid, customerlanguagetypeentityuuid, customersenddeleted, customersenddrafts, customersendinactive) ON customer.customerparententityuuid = parent.customerentityuuid
  WHERE (customer.customerownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.customer IS '
## Entity Template

A description of what an customer is and why it is used

### get {baseUrl}/customer

A bunch of comments explaining get

### del {baseUrl}/customer

A bunch of comments explaining del

### patch {baseUrl}/customer

A bunch of comments explaining patch
';

CREATE TRIGGER create_customer_tg INSTEAD OF INSERT ON api.customer FOR EACH ROW EXECUTE FUNCTION api.create_customer();
CREATE TRIGGER update_customer_tg INSTEAD OF UPDATE ON api.customer FOR EACH ROW EXECUTE FUNCTION api.update_customer();

GRANT INSERT ON api.customer TO authenticated;
GRANT SELECT ON api.customer TO authenticated;
GRANT UPDATE ON api.customer TO authenticated;

-- Type: VIEW ; Name: customer_requested_language; Owner: tendreladmin

CREATE OR REPLACE VIEW api.customer_requested_language AS
 SELECT crl.customerrequestedlanguageid AS legacy_id,
    crl.customerrequestedlanguagecustomerid AS legacy_customer_id,
    customer.customerentityuuid AS owner,
    customer.customerdisplayname AS owner_name,
    lang.systagentityuuid AS languagetype_id,
    lang.systagname AS name,
    lang.systagdisplayname AS displayname,
    crl.customerrequestedlanguagestartdate AS activated_at,
    crl.customerrequestedlanguageenddate AS deactivated_at,
    crl.customerrequestedlanguagecreateddate AS created_at,
    crl.customerrequestedlanguagemodifieddate AS updated_at,
    crl.customerrequestedlanguageexternalid AS external_id,
    crl.customerrequestedlanguageexternalsystemid AS external_system,
        CASE
            WHEN crl.customerrequestedlanguagestartdate IS NULL THEN true
            ELSE false
        END AS customerrequestedlanguagedraft,
        CASE
            WHEN crl.customerrequestedlanguageenddate::date < now()::date THEN true
            ELSE false
        END AS customerrequestedlanguagedeleted,
        CASE
            WHEN (crl.customerrequestedlanguageenddate::date > now()::date OR crl.customerrequestedlanguageenddate::date IS NULL) AND crl.customerrequestedlanguagestartdate < now() THEN true
            ELSE false
        END AS customerrequestedlanguageactive,
    crl.customerrequestedlanguagemodifiedby AS modified_by,
    crl.customerrequestedlanguageuuid AS id
   FROM customerrequestedlanguage crl
     JOIN ( SELECT crud_customer_read_full.customerid,
            crud_customer_read_full.customeruuid,
            crud_customer_read_full.customerentityuuid,
            crud_customer_read_full.customerownerentityuuid,
            crud_customer_read_full.customerparententityuuid,
            crud_customer_read_full.customercornerstoneentityuuid,
            crud_customer_read_full.customercornerstoneorder,
            crud_customer_read_full.customernameuuid,
            crud_customer_read_full.customername,
            crud_customer_read_full.customerdisplaynameuuid,
            crud_customer_read_full.customerdisplayname,
            crud_customer_read_full.customertypeentityuuid,
            crud_customer_read_full.customertype,
            crud_customer_read_full.customercreateddate,
            crud_customer_read_full.customermodifieddate,
            crud_customer_read_full.customerstartdate,
            crud_customer_read_full.customerenddate,
            crud_customer_read_full.customermodifiedbyuuid,
            crud_customer_read_full.customerexternalid,
            crud_customer_read_full.customerexternalsystementityuuid,
            crud_customer_read_full.customerexternalsystemname,
            crud_customer_read_full.customerrefid,
            crud_customer_read_full.customerrefuuid,
            crud_customer_read_full.customerlanguagetypeentityuuid,
            crud_customer_read_full.customersenddeleted,
            crud_customer_read_full.customersenddrafts,
            crud_customer_read_full.customersendinactive
           FROM entity.crud_customer_read_full(NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_customer_read_full(customerid, customeruuid, customerentityuuid, customerownerentityuuid, customerparententityuuid, customercornerstoneentityuuid, customercornerstoneorder, customernameuuid, customername, customerdisplaynameuuid, customerdisplayname, customertypeentityuuid, customertype, customercreateddate, customermodifieddate, customerstartdate, customerenddate, customermodifiedbyuuid, customerexternalid, customerexternalsystementityuuid, customerexternalsystemname, customerrefid, customerrefuuid, customerlanguagetypeentityuuid, customersenddeleted, customersenddrafts, customersendinactive)) customer ON customer.customerid = crl.customerrequestedlanguagecustomerid
     JOIN ( SELECT crud_systag_read_full.languagetranslationtypeentityuuid,
            crud_systag_read_full.systagid,
            crud_systag_read_full.systaguuid,
            crud_systag_read_full.systagentityuuid,
            crud_systag_read_full.systagcustomerid,
            crud_systag_read_full.systagcustomeruuid,
            crud_systag_read_full.systagcustomerentityuuid,
            crud_systag_read_full.systagcustomername,
            crud_systag_read_full.systagnameuuid,
            crud_systag_read_full.systagname,
            crud_systag_read_full.systagdisplaynameuuid,
            crud_systag_read_full.systagdisplayname,
            crud_systag_read_full.systagtype,
            crud_systag_read_full.systagcreateddate,
            crud_systag_read_full.systagmodifieddate,
            crud_systag_read_full.systagstartdate,
            crud_systag_read_full.systagenddate,
            crud_systag_read_full.systagexternalid,
            crud_systag_read_full.systagexternalsystementityuuid,
            crud_systag_read_full.systagexternalsystementname,
            crud_systag_read_full.systagmodifiedbyuuid,
            crud_systag_read_full.systagabbreviationentityuuid,
            crud_systag_read_full.systagabbreviationname,
            crud_systag_read_full.systagparententityuuid,
            crud_systag_read_full.systagparentname,
            crud_systag_read_full.systagorder,
            crud_systag_read_full.systagsenddeleted,
            crud_systag_read_full.systagsenddrafts,
            crud_systag_read_full.systagsendinactive
           FROM entity.crud_systag_read_full(NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_systag_read_full(languagetranslationtypeentityuuid, systagid, systaguuid, systagentityuuid, systagcustomerid, systagcustomeruuid, systagcustomerentityuuid, systagcustomername, systagnameuuid, systagname, systagdisplaynameuuid, systagdisplayname, systagtype, systagcreateddate, systagmodifieddate, systagstartdate, systagenddate, systagexternalid, systagexternalsystementityuuid, systagexternalsystementname, systagmodifiedbyuuid, systagabbreviationentityuuid, systagabbreviationname, systagparententityuuid, systagparentname, systagorder, systagsenddeleted, systagsenddrafts, systagsendinactive)) lang ON lang.systagid = crl.customerrequestedlanguagelanguageid
  WHERE (customer.customerownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.customer_requested_language IS '
## customer_requested_language

A description of what an customer is and why it is used

### get {baseUrl}/customer_requested_language

A bunch of comments explaining get

### del {baseUrl}/customer_requested_language

A bunch of comments explaining del

### patch {baseUrl}/customer_requested_language

A bunch of comments explaining patch
';

CREATE TRIGGER create_customer_requested_language_tg INSTEAD OF INSERT ON api.customer_requested_language FOR EACH ROW EXECUTE FUNCTION api.create_customer_requested_language();
CREATE TRIGGER update_customer_requested_language_tg INSTEAD OF UPDATE ON api.customer_requested_language FOR EACH ROW EXECUTE FUNCTION api.update_customer_requested_language();

GRANT INSERT ON api.customer_requested_language TO authenticated;
GRANT SELECT ON api.customer_requested_language TO authenticated;
GRANT UPDATE ON api.customer_requested_language TO authenticated;

-- Type: VIEW ; Name: entity_description; Owner: tendreladmin

CREATE OR REPLACE VIEW api.entity_description AS
 SELECT entitydescriptionuuid AS id,
    entitydescriptionownerentityuuid AS owner,
    entitydescriptionownerentityname AS owner_name,
    entitydescriptionentitytemplateentityuuid AS template,
    entitydescriptionentitytemplateentityname AS template_name,
    entitydescriptionentityfieldentityduuid AS field,
    entitydescriptionentityfieldentitydname AS field_name,
    entitydescriptionlanguagemasteruuid AS description_id,
    entitydescriptionname AS description,
    entitydescriptionsoplink AS sop_link,
    entitydescriptionfile AS file_link,
    entitydescriptionmimetypeuuid AS file_mime_type,
    entitydescriptionicon AS icon_link,
    entitydescriptionexternalid AS external_id,
    entitydescriptionexternalsystementityuuid AS external_system,
    entitydescriptiondeleted AS _deleted,
    entitydescriptiondraft AS _draft,
    entitydescriptionactive AS _active,
    entitydescriptionstartdate AS activated_at,
    entitydescriptionenddate AS deactivated_at,
    entitydescriptioncreateddate AS created_at,
    entitydescriptionmodifieddate AS updated_at,
    entitydescriptionmodifiedby AS modified_by
   FROM ( SELECT crud_entitydescription_read_full.languagetranslationtypeuuid,
            crud_entitydescription_read_full.entitydescriptionuuid,
            crud_entitydescription_read_full.entitydescriptionownerentityuuid,
            crud_entitydescription_read_full.entitydescriptionownerentityname,
            crud_entitydescription_read_full.entitydescriptionentitytemplateentityuuid,
            crud_entitydescription_read_full.entitydescriptionentitytemplateentityname,
            crud_entitydescription_read_full.entitydescriptionentityfieldentityduuid,
            crud_entitydescription_read_full.entitydescriptionentityfieldentitydname,
            crud_entitydescription_read_full.entitydescriptionname,
            crud_entitydescription_read_full.entitydescriptionlanguagemasteruuid,
            crud_entitydescription_read_full.entitydescriptionsoplink,
            crud_entitydescription_read_full.entitydescriptionfile,
            crud_entitydescription_read_full.entitydescriptionicon,
            crud_entitydescription_read_full.entitydescriptiontranslatedname,
            crud_entitydescription_read_full.entitydescriptioncreateddate,
            crud_entitydescription_read_full.entitydescriptionmodifieddate,
            crud_entitydescription_read_full.entitydescriptionstartdate,
            crud_entitydescription_read_full.entitydescriptionenddate,
            crud_entitydescription_read_full.entitydescriptionmodifiedby,
            crud_entitydescription_read_full.entitydescriptionexternalid,
            crud_entitydescription_read_full.entitydescriptionexternalsystementityuuid,
            crud_entitydescription_read_full.entitydescriptionrefid,
            crud_entitydescription_read_full.entitydescriptionrefuuid,
            crud_entitydescription_read_full.entitydescriptiondraft,
            crud_entitydescription_read_full.entitydescriptiondeleted,
            crud_entitydescription_read_full.entitydescriptionactive,
            crud_entitydescription_read_full.entitydescriptionmimetypeuuid,
            crud_entitydescription_read_full.entitydescriptionmimetypename
           FROM entity.crud_entitydescription_read_full(NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_entitydescription_read_full(languagetranslationtypeuuid, entitydescriptionuuid, entitydescriptionownerentityuuid, entitydescriptionownerentityname, entitydescriptionentitytemplateentityuuid, entitydescriptionentitytemplateentityname, entitydescriptionentityfieldentityduuid, entitydescriptionentityfieldentitydname, entitydescriptionname, entitydescriptionlanguagemasteruuid, entitydescriptionsoplink, entitydescriptionfile, entitydescriptionicon, entitydescriptiontranslatedname, entitydescriptioncreateddate, entitydescriptionmodifieddate, entitydescriptionstartdate, entitydescriptionenddate, entitydescriptionmodifiedby, entitydescriptionexternalid, entitydescriptionexternalsystementityuuid, entitydescriptionrefid, entitydescriptionrefuuid, entitydescriptiondraft, entitydescriptiondeleted, entitydescriptionactive, entitydescriptionmimetypeuuid, entitydescriptionmimetypename)) entitydescription
  WHERE (entitydescriptionownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.entity_description IS '
## Entity Template

A description of what an entity tempalte is and why it is used

### get {baseUrl}/entity_template

A bunch of comments explaining get

### del {baseUrl}/entity_template

A bunch of comments explaining del

### patch {baseUrl}/entity_template

A bunch of comments explaining patch
';

CREATE TRIGGER create_entity_description_tg INSTEAD OF INSERT ON api.entity_description FOR EACH ROW EXECUTE FUNCTION api.create_entity_description();
CREATE TRIGGER update_entity_description_tg INSTEAD OF UPDATE ON api.entity_description FOR EACH ROW EXECUTE FUNCTION api.update_entity_description();

GRANT INSERT ON api.entity_description TO authenticated;
GRANT SELECT ON api.entity_description TO authenticated;
GRANT UPDATE ON api.entity_description TO authenticated;

-- Type: VIEW ; Name: entity_field; Owner: tendreladmin

CREATE OR REPLACE VIEW api.entity_field AS
 SELECT entityfield.entityfielduuid AS id,
    entityfield.entityfieldownerentityuuid AS owner,
    entityfield.entityfieldcustomername AS owner_name,
    entityfield.entityfieldparententityuuid AS parent,
    entityfield.entityfieldsitename AS parent_name,
    entityfield.entityfieldentityparenttypeentityuuid AS parent_type,
    entityfield.entityfieldentitytypeentityuuid AS entity_type,
    entityfield.entityfieldentitytypename AS entity_type_name,
    entityfield.entityfieldexternalid AS external_id,
    entityfield.entityfieldexternalsystementityuuid AS external_system,
    entityfield.entityfieldentitytemplateentityuuid AS template,
    entitytemplate.entitytemplatename AS template_name,
    entityfield.entityfieldtypeentityuuid AS type,
    entityfield.entityfieldtypename AS type_name,
    entityfield.entityfieldlanguagemasteruuid AS name_id,
    entityfield.entityfieldname AS name,
    entityfield.entityfieldformatentityuuid AS format,
    entityfield.entityfieldformatname AS format_name,
    entityfield.entityfieldwidgetentityuuid AS widget,
    entityfield.entityfieldwidgetname AS widget_name,
    entityfield.entityfieldorder::integer AS _order,
    entityfield.entityfielddefaultvalue AS default_value,
    entityfield.entityfieldisprimary AS _primary,
    entityfield.entityfieldiscalculated AS _calculated,
    entityfield.entityfieldiseditable AS _editable,
    entityfield.entityfieldisvisible AS _visible,
    entityfield.entityfieldisrequired AS _required,
    entityfield.entityfieldtranslate AS _translate,
    entityfield.entityfielddeleted AS _deleted,
    entityfield.entityfielddraft AS _draft,
        CASE
            WHEN entityfield.entityfieldenddate IS NOT NULL AND entityfield.entityfieldenddate::date < now()::date THEN false
            ELSE true
        END AS _active,
    entityfield.entityfieldstartdate AS activated_at,
    entityfield.entityfieldenddate AS deactivated_at,
    entityfield.entityfieldcreateddate AS created_at,
    entityfield.entityfieldmodifieddate AS updated_at,
    entityfield.entityfieldmodifiedbyuuid AS modified_by
   FROM ( SELECT crud_entityfield_read_full.languagetranslationtypeuuid,
            crud_entityfield_read_full.entityfielduuid,
            crud_entityfield_read_full.entityfieldentitytemplateentityuuid,
            crud_entityfield_read_full.entityfieldcreateddate,
            crud_entityfield_read_full.entityfieldmodifieddate,
            crud_entityfield_read_full.entityfieldstartdate,
            crud_entityfield_read_full.entityfieldenddate,
            crud_entityfield_read_full.entityfieldlanguagemasteruuid,
            crud_entityfield_read_full.entityfieldtranslatedname,
            crud_entityfield_read_full.entityfieldorder,
            crud_entityfield_read_full.entityfielddefaultvalue,
            crud_entityfield_read_full.entityfieldiscalculated,
            crud_entityfield_read_full.entityfieldiseditable,
            crud_entityfield_read_full.entityfieldisvisible,
            crud_entityfield_read_full.entityfieldisrequired,
            crud_entityfield_read_full.entityfieldformatentityuuid,
            crud_entityfield_read_full.entityfieldformatname,
            crud_entityfield_read_full.entityfieldwidgetentityuuid,
            crud_entityfield_read_full.entityfieldwidgetname,
            crud_entityfield_read_full.entityfieldexternalid,
            crud_entityfield_read_full.entityfieldexternalsystementityuuid,
            crud_entityfield_read_full.entityfieldexternalsystemname,
            crud_entityfield_read_full.entityfieldmodifiedbyuuid,
            crud_entityfield_read_full.entityfieldmodifiedby,
            crud_entityfield_read_full.entityfieldrefid,
            crud_entityfield_read_full.entityfieldrefuuid,
            crud_entityfield_read_full.entityfieldisprimary,
            crud_entityfield_read_full.entityfieldtranslate,
            crud_entityfield_read_full.entityfieldname,
            crud_entityfield_read_full.entityfieldownerentityuuid,
            crud_entityfield_read_full.entityfieldcustomername,
            crud_entityfield_read_full.entityfieldtypeentityuuid,
            crud_entityfield_read_full.entityfieldtypename,
            crud_entityfield_read_full.entityfieldparententityuuid,
            crud_entityfield_read_full.entityfieldsitename,
            crud_entityfield_read_full.entityfieldentitytypeentityuuid,
            crud_entityfield_read_full.entityfieldentitytypename,
            crud_entityfield_read_full.entityfieldentityparenttypeentityuuid,
            crud_entityfield_read_full.entityfieldparenttypename,
            crud_entityfield_read_full.entityfielddeleted,
            crud_entityfield_read_full.entityfielddraft,
            crud_entityfield_read_full.entityfieldactive
           FROM entity.crud_entityfield_read_full(NULL::uuid, NULL::uuid, NULL::uuid, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_entityfield_read_full(languagetranslationtypeuuid, entityfielduuid, entityfieldentitytemplateentityuuid, entityfieldcreateddate, entityfieldmodifieddate, entityfieldstartdate, entityfieldenddate, entityfieldlanguagemasteruuid, entityfieldtranslatedname, entityfieldorder, entityfielddefaultvalue, entityfieldiscalculated, entityfieldiseditable, entityfieldisvisible, entityfieldisrequired, entityfieldformatentityuuid, entityfieldformatname, entityfieldwidgetentityuuid, entityfieldwidgetname, entityfieldexternalid, entityfieldexternalsystementityuuid, entityfieldexternalsystemname, entityfieldmodifiedbyuuid, entityfieldmodifiedby, entityfieldrefid, entityfieldrefuuid, entityfieldisprimary, entityfieldtranslate, entityfieldname, entityfieldownerentityuuid, entityfieldcustomername, entityfieldtypeentityuuid, entityfieldtypename, entityfieldparententityuuid, entityfieldsitename, entityfieldentitytypeentityuuid, entityfieldentitytypename, entityfieldentityparenttypeentityuuid, entityfieldparenttypename, entityfielddeleted, entityfielddraft, entityfieldactive)) entityfield
     JOIN ( SELECT crud_entitytemplate_read_full.languagetranslationtypeuuid,
            crud_entitytemplate_read_full.entitytemplateuuid,
            crud_entitytemplate_read_full.entitytemplateownerentityuuid,
            crud_entitytemplate_read_full.entitytemplatecustomername,
            crud_entitytemplate_read_full.entitytemplateparententityuuid,
            crud_entitytemplate_read_full.entitytemplatesitename,
            crud_entitytemplate_read_full.entitytemplatetypeentityuuid,
            crud_entitytemplate_read_full.entitytemplatetype,
            crud_entitytemplate_read_full.entitytemplateisprimary,
            crud_entitytemplate_read_full.entitytemplatescanid,
            crud_entitytemplate_read_full.entitytemplatenameuuid,
            crud_entitytemplate_read_full.entitytemplatename,
            crud_entitytemplate_read_full.entitytemplateorder,
            crud_entitytemplate_read_full.entitytemplatemodifiedbyuuid,
            crud_entitytemplate_read_full.entitytemplatemodifiedby,
            crud_entitytemplate_read_full.entitytemplatestartdate,
            crud_entitytemplate_read_full.entitytemplateenddate,
            crud_entitytemplate_read_full.entitytemplatecreateddate,
            crud_entitytemplate_read_full.entitytemplatemodifieddate,
            crud_entitytemplate_read_full.entitytemplateexternalid,
            crud_entitytemplate_read_full.entitytemplaterefid,
            crud_entitytemplate_read_full.entitytemplaterefuuid,
            crud_entitytemplate_read_full.entitytemplateexternalsystementityuuid,
            crud_entitytemplate_read_full.entitytemplateexternalsystem,
            crud_entitytemplate_read_full.entitytemplatedeleted,
            crud_entitytemplate_read_full.entitytemplatedraft,
            crud_entitytemplate_read_full.entitytemplateactive
           FROM entity.crud_entitytemplate_read_full(NULL::uuid, NULL::uuid, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_entitytemplate_read_full(languagetranslationtypeuuid, entitytemplateuuid, entitytemplateownerentityuuid, entitytemplatecustomername, entitytemplateparententityuuid, entitytemplatesitename, entitytemplatetypeentityuuid, entitytemplatetype, entitytemplateisprimary, entitytemplatescanid, entitytemplatenameuuid, entitytemplatename, entitytemplateorder, entitytemplatemodifiedbyuuid, entitytemplatemodifiedby, entitytemplatestartdate, entitytemplateenddate, entitytemplatecreateddate, entitytemplatemodifieddate, entitytemplateexternalid, entitytemplaterefid, entitytemplaterefuuid, entitytemplateexternalsystementityuuid, entitytemplateexternalsystem, entitytemplatedeleted, entitytemplatedraft, entitytemplateactive)) entitytemplate ON entitytemplate.entitytemplateuuid = entityfield.entityfieldentitytemplateentityuuid
  WHERE (entityfield.entityfieldownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership))) OR entityfield.entityfieldownerentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61'::uuid AND entitytemplate.entitytemplateisprimary = true;

COMMENT ON VIEW api.entity_field IS '
### Entity fields

TODO describe what Entity fields are.
';

CREATE TRIGGER create_entity_field_tg INSTEAD OF INSERT ON api.entity_field FOR EACH ROW EXECUTE FUNCTION api.create_entity_field();
CREATE TRIGGER update_entity_field_tg INSTEAD OF UPDATE ON api.entity_field FOR EACH ROW EXECUTE FUNCTION api.update_entity_field();

GRANT INSERT ON api.entity_field TO authenticated;
GRANT SELECT ON api.entity_field TO authenticated;
GRANT UPDATE ON api.entity_field TO authenticated;

-- Type: VIEW ; Name: entity_instance; Owner: tendreladmin

CREATE OR REPLACE VIEW api.entity_instance AS
 SELECT entityinstanceuuid AS id,
    entityinstanceownerentityuuid AS owner,
    entityinstanceownerentityname AS owner_name,
    entityinstanceparententityuuid AS parent,
    entityinstanceparententityname AS parent_name,
    entityinstanceentitytemplateentityuuid AS template,
    entityinstanceentitytemplatetranslatedname AS template_name,
    entityinstanceexternalid AS external_id,
    entityinstanceexternalsystementityuuid AS external_system,
    entityinstancescanid AS scan_code,
    entityinstancenameuuid AS name_id,
    entityinstancename AS name,
    entityinstancetypeentityuuid AS type,
    entityinstancetypeentityuuid AS type_name,
    entityinstancecornerstoneentityuuid AS cornerstone,
    entityinstancecornerstoneentitname AS cornerstone_name,
    entityinstancecornerstoneorder AS _order,
    entityinstancedeleted AS _deleted,
    entityinstancedraft AS _draft,
    entityinstanceactive AS _active,
    entityinstancestartdate AS activated_at,
    entityinstanceenddate AS deactivated_at,
    entityinstancecreateddate AS created_at,
    entityinstancemodifieddate AS updated_at,
    entityinstancemodifiedbyuuid AS modified_by
   FROM ( SELECT crud_entityinstance_read_api.languagetranslationtypeentityuuid,
            crud_entityinstance_read_api.entityinstanceoriginalid,
            crud_entityinstance_read_api.entityinstanceoriginaluuid,
            crud_entityinstance_read_api.entityinstanceuuid,
            crud_entityinstance_read_api.entityinstanceownerentityuuid,
            crud_entityinstance_read_api.entityinstanceownerentityname,
            crud_entityinstance_read_api.entityinstanceparententityuuid,
            crud_entityinstance_read_api.entityinstanceparententityname,
            crud_entityinstance_read_api.entityinstancecornerstoneentityuuid,
            crud_entityinstance_read_api.entityinstancecornerstoneentitname,
            crud_entityinstance_read_api.entityinstancecornerstoneorder,
            crud_entityinstance_read_api.entityinstanceentitytemplateentityuuid,
            crud_entityinstance_read_api.entityinstanceentitytemplatename,
            crud_entityinstance_read_api.entityinstanceentitytemplatetranslatedname,
            crud_entityinstance_read_api.entityinstancetypeentityuuid,
            crud_entityinstance_read_api.entityinstancetype,
            crud_entityinstance_read_api.entityinstancenameuuid,
            crud_entityinstance_read_api.entityinstancename,
            crud_entityinstance_read_api.entityinstancescanid,
            crud_entityinstance_read_api.entityinstancesiteentityuuid,
            crud_entityinstance_read_api.entityinstancecreateddate,
            crud_entityinstance_read_api.entityinstancemodifieddate,
            crud_entityinstance_read_api.entityinstancemodifiedbyuuid,
            crud_entityinstance_read_api.entityinstancestartdate,
            crud_entityinstance_read_api.entityinstanceenddate,
            crud_entityinstance_read_api.entityinstanceexternalid,
            crud_entityinstance_read_api.entityinstanceexternalsystementityuuid,
            crud_entityinstance_read_api.entityinstanceexternalsystementityname,
            crud_entityinstance_read_api.entityinstancerefid,
            crud_entityinstance_read_api.entityinstancerefuuid,
            crud_entityinstance_read_api.entityinstancedeleted,
            crud_entityinstance_read_api.entityinstancedraft,
            crud_entityinstance_read_api.entityinstanceactive,
            crud_entityinstance_read_api.entityinstancetagentityuuid
           FROM entity.crud_entityinstance_read_api(ARRAY( SELECT util_get_onwership.get_ownership
                   FROM _api.util_get_onwership() util_get_onwership(get_ownership)), NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::uuid, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_entityinstance_read_api(languagetranslationtypeentityuuid, entityinstanceoriginalid, entityinstanceoriginaluuid, entityinstanceuuid, entityinstanceownerentityuuid, entityinstanceownerentityname, entityinstanceparententityuuid, entityinstanceparententityname, entityinstancecornerstoneentityuuid, entityinstancecornerstoneentitname, entityinstancecornerstoneorder, entityinstanceentitytemplateentityuuid, entityinstanceentitytemplatename, entityinstanceentitytemplatetranslatedname, entityinstancetypeentityuuid, entityinstancetype, entityinstancenameuuid, entityinstancename, entityinstancescanid, entityinstancesiteentityuuid, entityinstancecreateddate, entityinstancemodifieddate, entityinstancemodifiedbyuuid, entityinstancestartdate, entityinstanceenddate, entityinstanceexternalid, entityinstanceexternalsystementityuuid, entityinstanceexternalsystementityname, entityinstancerefid, entityinstancerefuuid, entityinstancedeleted, entityinstancedraft, entityinstanceactive, entityinstancetagentityuuid)) entityinstance;


CREATE TRIGGER create_entity_instance_tg INSTEAD OF INSERT ON api.entity_instance FOR EACH ROW EXECUTE FUNCTION api.create_entity_instance();
CREATE TRIGGER update_entity_instance_tg INSTEAD OF UPDATE ON api.entity_instance FOR EACH ROW EXECUTE FUNCTION api.update_entity_instance();

GRANT INSERT ON api.entity_instance TO authenticated;
GRANT SELECT ON api.entity_instance TO authenticated;
GRANT UPDATE ON api.entity_instance TO authenticated;

-- Type: VIEW ; Name: entity_instance_field; Owner: tendreladmin

CREATE OR REPLACE VIEW api.entity_instance_field AS
 SELECT entityfieldinstanceuuid AS id,
    entityfieldinstanceentityinstanceentityuuid AS instance,
    entityfieldinstanceownerentityuuid AS owner,
    entityfieldinstanceentityfieldentityuuid AS field,
    entityfieldinstancevalue AS value,
    entityfieldinstancevaluelanguagemasteruuid AS value_id,
    entityfieldinstancevaluelanguagetypeentityuuid AS value_language_type,
    entityfieldinstancedeleted AS _deleted,
    entityfieldinstancedraft AS _draft,
        CASE
            WHEN entityfieldinstanceenddate IS NOT NULL AND entityfieldinstanceenddate::date < now()::date THEN false
            ELSE true
        END AS _active,
    entityfieldinstancestartdate AS activated_at,
    entityfieldinstanceenddate AS deactivated_at,
    entityfieldinstancecreateddate AS created_at,
    entityfieldinstancemodifieddate AS updated_at,
    entityfieldinstancemodifiedbyuuid AS modified_by
   FROM entity.entityfieldinstance
  WHERE (entityfieldinstanceownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.entity_instance_field IS '
### Instance fields

TODO describe what instance fields are.
';

CREATE TRIGGER create_entity_instance_field_tg INSTEAD OF INSERT ON api.entity_instance_field FOR EACH ROW EXECUTE FUNCTION api.create_entity_instance_field();
CREATE TRIGGER update_entity_instance_field_tg INSTEAD OF UPDATE ON api.entity_instance_field FOR EACH ROW EXECUTE FUNCTION api.update_entity_instance_field();

GRANT INSERT ON api.entity_instance_field TO authenticated;
GRANT SELECT ON api.entity_instance_field TO authenticated;
GRANT UPDATE ON api.entity_instance_field TO authenticated;

-- Type: VIEW ; Name: entity_instance_file; Owner: tendreladmin

CREATE OR REPLACE VIEW api.entity_instance_file AS
 SELECT entityfileinstanceuuid AS id,
    entityfileinstanceownerentityuuid AS owner,
    entityfileinstanceentityentityinstanceentityuuid AS instance,
    entityfileinstanceentityfieldinstanceentityuuid AS field_instance,
    entityfileinstancestoragelocation AS file_link,
    entityfileinstancemimetypeuuid AS file_mime_type,
    entityfileinstanceexternalid AS external_id,
    entityfileinstanceexternalsystemuuid AS external_system,
    entityfileinstancedraft AS _draft,
    entityfileinstancedeleted AS _deleted,
    entityfileinstancecreateddate AS created_at,
    entityfileinstancemodifieddate AS updated_at,
    entityfileinstancemodifiedby AS modified_by
   FROM entity.entityfileinstance
  WHERE (entityfileinstanceownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.entity_instance_file IS '
### Instance fields

TODO describe what instance fields are.
';

CREATE TRIGGER create_entity_instance_file_tg INSTEAD OF INSERT ON api.entity_instance_file FOR EACH ROW EXECUTE FUNCTION api.create_entity_instance_file();
CREATE TRIGGER update_entity_instance_file_tg INSTEAD OF UPDATE ON api.entity_instance_file FOR EACH ROW EXECUTE FUNCTION api.update_entity_instance_file();

GRANT INSERT ON api.entity_instance_file TO authenticated;
GRANT SELECT ON api.entity_instance_file TO authenticated;
GRANT UPDATE ON api.entity_instance_file TO authenticated;

-- Type: VIEW ; Name: entity_tag; Owner: tendreladmin

CREATE OR REPLACE VIEW api.entity_tag AS
 SELECT entitytaguuid AS id,
    entitytagownerentityuuid AS owner,
    entitytagownername AS owner_name,
    entitytagentityinstanceentityuuid AS instance,
    entitytagentityinstanceentityname AS instance_name,
    entitytagentitytemplateentityuuid AS template,
    entitytagentitytemplatename AS template_name,
    entitytagcustagparententityuuid AS parent,
    entitytagparentcustagtype AS parent_name,
    entitytagcustagentityuuid AS customer_tag,
    entitytagcustagtype AS customer_tag_name,
    entitytagsenddeleted AS _deleted,
    entitytagsenddrafts AS _draft,
    entitytagsendinactive AS _active,
    entitytagstartdate AS activated_at,
    entitytagenddate AS deactivated_at,
    entitytagcreateddate AS created_at,
    entitytagmodifieddate AS updated_at,
    entitytagmodifiedbyuuid AS modified_by
   FROM ( SELECT crud_entitytag_read_api.languagetranslationtypeentityuuid,
            crud_entitytag_read_api.entitytaguuid,
            crud_entitytag_read_api.entitytagownerentityuuid,
            crud_entitytag_read_api.entitytagownername,
            crud_entitytag_read_api.entitytagentityinstanceentityuuid,
            crud_entitytag_read_api.entitytagentityinstanceentityname,
            crud_entitytag_read_api.entitytagentitytemplateentityuuid,
            crud_entitytag_read_api.entitytagentitytemplatename,
            crud_entitytag_read_api.entitytagcreateddate,
            crud_entitytag_read_api.entitytagmodifieddate,
            crud_entitytag_read_api.entitytagstartdate,
            crud_entitytag_read_api.entitytagenddate,
            crud_entitytag_read_api.entitytagrefid,
            crud_entitytag_read_api.entitytagrefuuid,
            crud_entitytag_read_api.entitytagmodifiedbyuuid,
            crud_entitytag_read_api.entitytagcustagparententityuuid,
            crud_entitytag_read_api.entitytagparentcustagtype,
            crud_entitytag_read_api.entitytagcustagentityuuid,
            crud_entitytag_read_api.entitytagcustagtype,
            crud_entitytag_read_api.entitytagsenddeleted,
            crud_entitytag_read_api.entitytagsenddrafts,
            crud_entitytag_read_api.entitytagsendinactive
           FROM entity.crud_entitytag_read_api(ARRAY( SELECT util_get_onwership.get_ownership
                   FROM _api.util_get_onwership() util_get_onwership(get_ownership)), NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_entitytag_read_api(languagetranslationtypeentityuuid, entitytaguuid, entitytagownerentityuuid, entitytagownername, entitytagentityinstanceentityuuid, entitytagentityinstanceentityname, entitytagentitytemplateentityuuid, entitytagentitytemplatename, entitytagcreateddate, entitytagmodifieddate, entitytagstartdate, entitytagenddate, entitytagrefid, entitytagrefuuid, entitytagmodifiedbyuuid, entitytagcustagparententityuuid, entitytagparentcustagtype, entitytagcustagentityuuid, entitytagcustagtype, entitytagsenddeleted, entitytagsenddrafts, entitytagsendinactive)) entitytag
  WHERE (entitytagownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.entity_tag IS '
## Entity tag

A description of what an entity tag is and why it is used

';

CREATE TRIGGER create_entity_tag_tg INSTEAD OF INSERT ON api.entity_tag FOR EACH ROW EXECUTE FUNCTION api.create_entity_tag();
CREATE TRIGGER update_entity_tag_tg INSTEAD OF UPDATE ON api.entity_tag FOR EACH ROW EXECUTE FUNCTION api.update_entity_tag();

GRANT INSERT ON api.entity_tag TO authenticated;
GRANT SELECT ON api.entity_tag TO authenticated;
GRANT UPDATE ON api.entity_tag TO authenticated;

-- Type: VIEW ; Name: entity_template; Owner: tendreladmin

CREATE OR REPLACE VIEW api.entity_template AS
 SELECT entitytemplateuuid AS id,
    entitytemplateownerentityuuid AS owner,
    entitytemplatecustomername AS owner_name,
    entitytemplateparententityuuid AS parent,
    entitytemplatesitename AS parent_name,
    entitytemplateexternalid AS external_id,
    entitytemplateexternalsystementityuuid AS external_system,
    entitytemplatescanid AS scan_code,
    entitytemplatenameuuid AS name_id,
    entitytemplatename AS name,
    entitytemplatetypeentityuuid AS type,
    entitytemplatetype AS type_name,
    entitytemplateorder AS _order,
    entitytemplateisprimary AS _primary,
    entitytemplatedeleted AS _deleted,
    entitytemplatedraft AS _draft,
    entitytemplateactive AS _active,
    entitytemplatestartdate AS activated_at,
    entitytemplateenddate AS deactivated_at,
    entitytemplatecreateddate AS created_at,
    entitytemplatemodifieddate AS updated_at,
    entitytemplatemodifiedbyuuid AS modified_by
   FROM ( SELECT crud_entitytemplate_read_full.languagetranslationtypeuuid,
            crud_entitytemplate_read_full.entitytemplateuuid,
            crud_entitytemplate_read_full.entitytemplateownerentityuuid,
            crud_entitytemplate_read_full.entitytemplatecustomername,
            crud_entitytemplate_read_full.entitytemplateparententityuuid,
            crud_entitytemplate_read_full.entitytemplatesitename,
            crud_entitytemplate_read_full.entitytemplatetypeentityuuid,
            crud_entitytemplate_read_full.entitytemplatetype,
            crud_entitytemplate_read_full.entitytemplateisprimary,
            crud_entitytemplate_read_full.entitytemplatescanid,
            crud_entitytemplate_read_full.entitytemplatenameuuid,
            crud_entitytemplate_read_full.entitytemplatename,
            crud_entitytemplate_read_full.entitytemplateorder,
            crud_entitytemplate_read_full.entitytemplatemodifiedbyuuid,
            crud_entitytemplate_read_full.entitytemplatemodifiedby,
            crud_entitytemplate_read_full.entitytemplatestartdate,
            crud_entitytemplate_read_full.entitytemplateenddate,
            crud_entitytemplate_read_full.entitytemplatecreateddate,
            crud_entitytemplate_read_full.entitytemplatemodifieddate,
            crud_entitytemplate_read_full.entitytemplateexternalid,
            crud_entitytemplate_read_full.entitytemplaterefid,
            crud_entitytemplate_read_full.entitytemplaterefuuid,
            crud_entitytemplate_read_full.entitytemplateexternalsystementityuuid,
            crud_entitytemplate_read_full.entitytemplateexternalsystem,
            crud_entitytemplate_read_full.entitytemplatedeleted,
            crud_entitytemplate_read_full.entitytemplatedraft,
            crud_entitytemplate_read_full.entitytemplateactive
           FROM entity.crud_entitytemplate_read_full(NULL::uuid, NULL::uuid, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_entitytemplate_read_full(languagetranslationtypeuuid, entitytemplateuuid, entitytemplateownerentityuuid, entitytemplatecustomername, entitytemplateparententityuuid, entitytemplatesitename, entitytemplatetypeentityuuid, entitytemplatetype, entitytemplateisprimary, entitytemplatescanid, entitytemplatenameuuid, entitytemplatename, entitytemplateorder, entitytemplatemodifiedbyuuid, entitytemplatemodifiedby, entitytemplatestartdate, entitytemplateenddate, entitytemplatecreateddate, entitytemplatemodifieddate, entitytemplateexternalid, entitytemplaterefid, entitytemplaterefuuid, entitytemplateexternalsystementityuuid, entitytemplateexternalsystem, entitytemplatedeleted, entitytemplatedraft, entitytemplateactive)) entitytemplate
  WHERE (entitytemplateownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership))) OR entitytemplateownerentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61'::uuid AND entitytemplateisprimary = true;

COMMENT ON VIEW api.entity_template IS '
## Entity Template

A description of what an entity tempalte is and why it is used

### get {baseUrl}/entity_template

A bunch of comments explaining get

### del {baseUrl}/entity_template

A bunch of comments explaining del

### patch {baseUrl}/entity_template

A bunch of comments explaining patch
';

CREATE TRIGGER create_entity_template_tg INSTEAD OF INSERT ON api.entity_template FOR EACH ROW EXECUTE FUNCTION api.create_entity_template();
CREATE TRIGGER update_entity_template_tg INSTEAD OF UPDATE ON api.entity_template FOR EACH ROW EXECUTE FUNCTION api.update_entity_template();

GRANT INSERT ON api.entity_template TO authenticated;
GRANT SELECT ON api.entity_template TO authenticated;
GRANT UPDATE ON api.entity_template TO authenticated;

-- Type: VIEW ; Name: location; Owner: tendreladmin

CREATE OR REPLACE VIEW api.location AS
 SELECT location.locationid AS legacy_id,
    location.locationuuid AS legacy_uuid,
    location.locationentityuuid AS id,
    location.locationownerentityuuid AS owner,
    location.locationcustomername AS owner_name,
    location.locationparententityuuid AS parent,
    COALESCE(lt.languagetranslationvalue, lm.languagemastersource) AS parent_name,
    location.locationcornerstoneentityuuid AS cornerstone,
    location.locationnameuuid AS name_id,
    location.locationname AS name,
    location.locationdisplaynameuuid AS displayname_id,
    location.locationdisplayname AS displayname,
    location.locationscanid AS scan_code,
    location.locationcreateddate AS created_at,
    location.locationmodifieddate AS updated_at,
    location.locationmodifiedbyuuid AS modified_by,
    location.locationstartdate AS activated_at,
    location.locationenddate AS deactivated_at,
    location.locationexternalid AS external_id,
    location.locationexternalsystementityuuid AS external_system,
    location.locationcornerstoneorder AS _order,
    location.locationlatitude AS latitude,
    location.locationlongitude AS longitude,
    location.locationradius AS radius,
    location.locationtimezone AS timezone,
    location.locationtagentityuuid AS tag_id,
    location.locationsenddeleted AS _deleted,
    location.locationsenddrafts AS _draft,
    location.locationsendinactive AS _active,
        CASE
            WHEN location.locationparententityuuid = location.locationentityuuid THEN true
            ELSE false
        END AS _is_site,
        CASE
            WHEN location.locationcornerstoneentityuuid = location.locationentityuuid THEN true
            ELSE false
        END AS _is_cornerstone
   FROM entity.crud_location_read_full(NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::uuid, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
           FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) location(languagetranslationtypeentityuuid, locationid, locationuuid, locationentityuuid, locationownerentityuuid, locationparententityuuid, locationcornerstoneentityuuid, locationcustomerid, locationcustomeruuid, locationcustomerentityuuid, locationcustomername, locationnameuuid, locationname, locationdisplaynameuuid, locationdisplayname, locationscanid, locationcreateddate, locationmodifieddate, locationmodifiedbyuuid, locationstartdate, locationenddate, locationexternalid, locationexternalsystementityuuid, locationexternalsystementname, locationcornerstoneorder, locationlatitude, locationlongitude, locationradius, locationtimezone, locationtagentityuuid, locationtagname, locationsenddeleted, locationsenddrafts, locationsendinactive)
     LEFT JOIN ( SELECT crud_location_read_min.languagetranslationtypeentityuuid,
            crud_location_read_min.locationid,
            crud_location_read_min.locationuuid,
            crud_location_read_min.locationentityuuid,
            crud_location_read_min.locationownerentityuuid,
            crud_location_read_min.locationparententityuuid,
            crud_location_read_min.locationcornerstoneentityuuid,
            crud_location_read_min.locationcustomerid,
            crud_location_read_min.locationcustomeruuid,
            crud_location_read_min.locationcustomerentityuuid,
            crud_location_read_min.locationnameuuid,
            crud_location_read_min.locationdisplaynameuuid,
            crud_location_read_min.locationscanid,
            crud_location_read_min.locationcreateddate,
            crud_location_read_min.locationmodifieddate,
            crud_location_read_min.locationmodifiedbyuuid,
            crud_location_read_min.locationstartdate,
            crud_location_read_min.locationenddate,
            crud_location_read_min.locationexternalid,
            crud_location_read_min.locationexternalsystementityuuid,
            crud_location_read_min.locationcornerstoneorder,
            crud_location_read_min.locationlatitude,
            crud_location_read_min.locationlongitude,
            crud_location_read_min.locationradius,
            crud_location_read_min.locationtimezone,
            crud_location_read_min.locationtagentityuuid,
            crud_location_read_min.locationsenddeleted,
            crud_location_read_min.locationsenddrafts,
            crud_location_read_min.locationsendinactive
           FROM entity.crud_location_read_min(NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::uuid, NULL::boolean, NULL::boolean, NULL::boolean, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'::uuid) crud_location_read_min(languagetranslationtypeentityuuid, locationid, locationuuid, locationentityuuid, locationownerentityuuid, locationparententityuuid, locationcornerstoneentityuuid, locationcustomerid, locationcustomeruuid, locationcustomerentityuuid, locationnameuuid, locationdisplaynameuuid, locationscanid, locationcreateddate, locationmodifieddate, locationmodifiedbyuuid, locationstartdate, locationenddate, locationexternalid, locationexternalsystementityuuid, locationcornerstoneorder, locationlatitude, locationlongitude, locationradius, locationtimezone, locationtagentityuuid, locationsenddeleted, locationsenddrafts, locationsendinactive)) parent ON parent.locationentityuuid = location.locationparententityuuid
     LEFT JOIN languagemaster lm ON lm.languagemasteruuid = parent.locationnameuuid
     LEFT JOIN languagetranslations lt ON lt.languagetranslationmasterid = (( SELECT languagemaster.languagemasterid
           FROM languagemaster
          WHERE languagemaster.languagemasteruuid = parent.locationnameuuid)) AND lt.languagetranslationtypeid = (( SELECT crud_systag_read_min.systagid
           FROM entity.crud_systag_read_min('f90d618d-5de7-4126-8c65-0afb700c6c61'::uuid, NULL::uuid, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid)), NULL::uuid, false, NULL::boolean, NULL::boolean, NULL::boolean, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'::uuid) crud_systag_read_min(languagetranslationtypeentityuuid, systagid, systaguuid, systagentityuuid, systagcustomerid, systagcustomeruuid, systagcustomerentityuuid, systagnameuuid, systagdisplaynameuuid, systagtype, systagcreateddate, systagmodifieddate, systagstartdate, systagenddate, systagexternalid, systagexternalsystementityuuid, systagmodifiedbyuuid, systagabbreviationentityuuid, systagparententityuuid, systagorder, systagsenddeleted, systagsenddrafts, systagsendinactive)))
  WHERE (location.locationownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.location IS '
## Location

A description of what an location is and why it is used

### get {baseUrl}/location

A bunch of comments explaining get

### del {baseUrl}/location

A bunch of comments explaining del

### patch {baseUrl}/location

A bunch of comments explaining patch
';

CREATE TRIGGER create_location_tg INSTEAD OF INSERT ON api.location FOR EACH ROW EXECUTE FUNCTION api.create_location();
CREATE TRIGGER update_location_tg INSTEAD OF UPDATE ON api.location FOR EACH ROW EXECUTE FUNCTION api.update_location();

GRANT INSERT ON api.location TO authenticated;
GRANT SELECT ON api.location TO authenticated;
GRANT UPDATE ON api.location TO authenticated;

-- Type: VIEW ; Name: reason_code; Owner: tendreladmin

CREATE OR REPLACE VIEW api.reason_code AS
 SELECT custag.custagentityuuid AS id,
    custag.custagid AS legacy_id,
    custag.custaguuid AS legacy_uuid,
    custag.custagownerentityuuid AS owner,
    custag.custagownerentityname AS owner_name,
    custag.custagparententityuuid AS parent,
    custag.custagparentname AS parent_name,
    custag.custagcornerstoneentityid AS cornerstone,
    custag.custagnameuuid AS name_id,
    custag.custagname AS name,
    custag.custagdisplaynameuuid AS displayname_id,
    custag.custagdisplayname AS displayname,
    custag.custagtype AS type,
    custag.custagcreateddate AS created_at,
    custag.custagmodifieddate AS updated_at,
    custag.custagstartdate AS activated_at,
    custag.custagenddate AS deactivated_at,
    custag.custagexternalid AS external_id,
    custag.custagexternalsystementityuuid AS external_system,
    custag.custagmodifiedbyuuid AS modified_by,
    custag.custagorder AS _order,
    custag.systagsenddeleted AS _deleted,
    custag.systagsenddrafts AS _draft,
    custag.systagsendinactive AS _active,
    wtc.worktemplateconstraintid AS work_template_constraint,
    wt.id AS work_template,
    COALESCE(lt.languagetranslationvalue, lm.languagemastersource) AS work_template_name
   FROM ( SELECT crud_custag_read_api.languagetranslationtypeentityuuid,
            crud_custag_read_api.custagid,
            crud_custag_read_api.custaguuid,
            crud_custag_read_api.custagentityuuid,
            crud_custag_read_api.custagownerentityuuid,
            crud_custag_read_api.custagownerentityname,
            crud_custag_read_api.custagparententityuuid,
            crud_custag_read_api.custagparentname,
            crud_custag_read_api.custagcornerstoneentityid,
            crud_custag_read_api.custagcustomerid,
            crud_custag_read_api.custagcustomeruuid,
            crud_custag_read_api.custagcustomerentityuuid,
            crud_custag_read_api.custagcustomername,
            crud_custag_read_api.custagnameuuid,
            crud_custag_read_api.custagname,
            crud_custag_read_api.custagdisplaynameuuid,
            crud_custag_read_api.custagdisplayname,
            crud_custag_read_api.custagtype,
            crud_custag_read_api.custagcreateddate,
            crud_custag_read_api.custagmodifieddate,
            crud_custag_read_api.custagstartdate,
            crud_custag_read_api.custagenddate,
            crud_custag_read_api.custagexternalid,
            crud_custag_read_api.custagexternalsystementityuuid,
            crud_custag_read_api.custagexternalsystemenname,
            crud_custag_read_api.custagmodifiedbyuuid,
            crud_custag_read_api.custagabbreviationentityuuid,
            crud_custag_read_api.custagabbreviationname,
            crud_custag_read_api.custagorder,
            crud_custag_read_api.systagsenddeleted,
            crud_custag_read_api.systagsenddrafts,
            crud_custag_read_api.systagsendinactive
           FROM entity.crud_custag_read_api(ARRAY( SELECT util_get_onwership.get_ownership
                   FROM _api.util_get_onwership() util_get_onwership(get_ownership)), NULL::uuid, NULL::uuid, 'f875b28c-ccc9-4c69-b5b4-9f10ad89d23b'::uuid, false, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_custag_read_api(languagetranslationtypeentityuuid, custagid, custaguuid, custagentityuuid, custagownerentityuuid, custagownerentityname, custagparententityuuid, custagparentname, custagcornerstoneentityid, custagcustomerid, custagcustomeruuid, custagcustomerentityuuid, custagcustomername, custagnameuuid, custagname, custagdisplaynameuuid, custagdisplayname, custagtype, custagcreateddate, custagmodifieddate, custagstartdate, custagenddate, custagexternalid, custagexternalsystementityuuid, custagexternalsystemenname, custagmodifiedbyuuid, custagabbreviationentityuuid, custagabbreviationname, custagorder, systagsenddeleted, systagsenddrafts, systagsendinactive)) custag
     LEFT JOIN worktemplateconstraint wtc ON wtc.worktemplateconstraintconstrainedtypeid = 'systag_4bbc3e18-de10-4f93-aabb-b1d051a2923d'::text AND wtc.worktemplateconstraintconstraintid = custag.custaguuid
     LEFT JOIN worktemplate wt ON wtc.worktemplateconstrainttemplateid = wt.id
     LEFT JOIN languagemaster lm ON wt.worktemplatenameid = lm.languagemasterid
     LEFT JOIN languagetranslations lt ON lm.languagemasterid = lt.languagetranslationmasterid
  WHERE (custag.custagownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.reason_code IS '
## Reason Code

A description of what an entity tempalte is and why it is used

### get {baseUrl}/custag

A bunch of comments explaining get

### del {baseUrl}/custag

A bunch of comments explaining del

### patch {baseUrl}/custag

A bunch of comments explaining patch
';

GRANT INSERT ON api.reason_code TO authenticated;
GRANT SELECT ON api.reason_code TO authenticated;
GRANT UPDATE ON api.reason_code TO authenticated;

-- Type: VIEW ; Name: systag; Owner: tendreladmin

CREATE OR REPLACE VIEW api.systag AS
 SELECT systagentityuuid AS id,
    systagid AS legacy_id,
    systaguuid AS legacy_uuid,
    systagownerentityuuid AS owner,
    systagownerentityname AS owner_name,
    systagparententityuuid AS parent,
    systagparentname AS parent_name,
    NULL::uuid AS cornerstone,
    systagnameuuid AS name_id,
    systagname AS name,
    systagdisplaynameuuid AS displayname_id,
    systagdisplayname AS displayname,
    systagtype AS type,
    systagcreateddate AS created_at,
    systagmodifieddate AS updated_at,
    systagstartdate AS activated_at,
    systagenddate AS deactivated_at,
    systagexternalid AS external_id,
    systagexternalsystementityuuid AS external_system,
    systagmodifiedbyuuid AS modified_by,
    systagorder AS _order,
    systagsenddeleted AS _deleted,
    systagsenddrafts AS _draft,
    systagsendinactive AS _active
   FROM ( SELECT crud_systag_read_api.languagetranslationtypeentityuuid,
            crud_systag_read_api.systagid,
            crud_systag_read_api.systaguuid,
            crud_systag_read_api.systagentityuuid,
            crud_systag_read_api.systagownerentityuuid,
            crud_systag_read_api.systagownerentityname,
            crud_systag_read_api.systagparententityuuid,
            crud_systag_read_api.systagparentname,
            crud_systag_read_api.systagcornerstoneentityid,
            crud_systag_read_api.systagcustomerid,
            crud_systag_read_api.systagcustomeruuid,
            crud_systag_read_api.systagcustomerentityuuid,
            crud_systag_read_api.systagcustomername,
            crud_systag_read_api.systagnameuuid,
            crud_systag_read_api.systagname,
            crud_systag_read_api.systagdisplaynameuuid,
            crud_systag_read_api.systagdisplayname,
            crud_systag_read_api.systagtype,
            crud_systag_read_api.systagcreateddate,
            crud_systag_read_api.systagmodifieddate,
            crud_systag_read_api.systagstartdate,
            crud_systag_read_api.systagenddate,
            crud_systag_read_api.systagexternalid,
            crud_systag_read_api.systagexternalsystementityuuid,
            crud_systag_read_api.systagexternalsystemenname,
            crud_systag_read_api.systagmodifiedbyuuid,
            crud_systag_read_api.systagabbreviationentityuuid,
            crud_systag_read_api.systagabbreviationname,
            crud_systag_read_api.systagorder,
            crud_systag_read_api.systagsenddeleted,
            crud_systag_read_api.systagsenddrafts,
            crud_systag_read_api.systagsendinactive
           FROM entity.crud_systag_read_api(ARRAY( SELECT util_get_onwership.get_ownership
                   FROM _api.util_get_onwership() util_get_onwership(get_ownership)), NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_systag_read_api(languagetranslationtypeentityuuid, systagid, systaguuid, systagentityuuid, systagownerentityuuid, systagownerentityname, systagparententityuuid, systagparentname, systagcornerstoneentityid, systagcustomerid, systagcustomeruuid, systagcustomerentityuuid, systagcustomername, systagnameuuid, systagname, systagdisplaynameuuid, systagdisplayname, systagtype, systagcreateddate, systagmodifieddate, systagstartdate, systagenddate, systagexternalid, systagexternalsystementityuuid, systagexternalsystemenname, systagmodifiedbyuuid, systagabbreviationentityuuid, systagabbreviationname, systagorder, systagsenddeleted, systagsenddrafts, systagsendinactive)) systag;

COMMENT ON VIEW api.systag IS '
## language
';

CREATE TRIGGER create_systag_tg INSTEAD OF INSERT ON api.systag FOR EACH ROW EXECUTE FUNCTION api.create_systag();
CREATE TRIGGER update_systag_tg INSTEAD OF UPDATE ON api.systag FOR EACH ROW EXECUTE FUNCTION api.update_systag();

GRANT INSERT ON api.systag TO authenticated;
GRANT SELECT ON api.systag TO authenticated;
GRANT UPDATE ON api.systag TO authenticated;

-- Type: VIEW ; Name: alltag; Owner: tendreladmin

CREATE OR REPLACE VIEW api.alltag AS
 SELECT systag.systagentityuuid AS id,
    systag.systagid AS legacy_id,
    systag.systaguuid AS legacy_uuid,
    systag.systagcustomerentityuuid AS owner,
    systag.systagcustomername AS owner_name,
    systag.systagparententityuuid AS parent,
    systag.systagparentname AS parent_name,
    NULL::uuid AS cornerstone,
    systag.systagnameuuid AS name_id,
    systag.systagname AS name,
    systag.systagdisplaynameuuid AS displayname_id,
    systag.systagdisplayname AS displayname,
    systag.systagtype AS type,
    systag.systagcreateddate AS created_at,
    systag.systagmodifieddate AS modified_at,
    systag.systagstartdate AS activated_at,
    systag.systagenddate AS deactivated_at,
    systag.systagexternalid AS external_id,
    systag.systagexternalsystementityuuid AS external_system,
    systag.systagmodifiedbyuuid AS modified_by,
    systag.systagorder AS _order,
    systag.systagsenddeleted AS _deleted,
    systag.systagsenddrafts AS _draft,
    systag.systagsendinactive AS _active
   FROM entity.crud_systag_read_full(NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
           FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) systag(languagetranslationtypeentityuuid, systagid, systaguuid, systagentityuuid, systagcustomerid, systagcustomeruuid, systagcustomerentityuuid, systagcustomername, systagnameuuid, systagname, systagdisplaynameuuid, systagdisplayname, systagtype, systagcreateddate, systagmodifieddate, systagstartdate, systagenddate, systagexternalid, systagexternalsystementityuuid, systagexternalsystementname, systagmodifiedbyuuid, systagabbreviationentityuuid, systagabbreviationname, systagparententityuuid, systagparentname, systagorder, systagsenddeleted, systagsenddrafts, systagsendinactive)
  WHERE (systag.systagcustomerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership))) OR systag.systagcustomerentityuuid = 'f90d618d-5de7-4126-8c65-0afb700c6c61'::uuid
UNION
 SELECT custag.custagentityuuid AS id,
    custag.custagid AS legacy_id,
    custag.custaguuid AS legacy_uuid,
    custag.custagownerentityuuid AS owner,
    custag.custagownerentityname AS owner_name,
    custag.custagparententityuuid AS parent,
    custag.custagparentname AS parent_name,
    custag.custagcornerstoneentityid AS cornerstone,
    custag.custagnameuuid AS name_id,
    custag.custagname AS name,
    custag.custagdisplaynameuuid AS displayname_id,
    custag.custagdisplayname AS displayname,
    custag.custagtype AS type,
    custag.custagcreateddate AS created_at,
    custag.custagmodifieddate AS modified_at,
    custag.custagstartdate AS activated_at,
    custag.custagenddate AS deactivated_at,
    custag.custagexternalid AS external_id,
    custag.custagexternalsystementityuuid AS external_system,
    custag.custagmodifiedbyuuid AS modified_by,
    custag.custagorder AS _order,
    custag.systagsenddeleted AS _deleted,
    custag.systagsenddrafts AS _draft,
    custag.systagsendinactive AS _active
   FROM entity.crud_custag_read_full(NULL::uuid, NULL::uuid, NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
           FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) custag(languagetranslationtypeentityuuid, custagid, custaguuid, custagentityuuid, custagownerentityuuid, custagownerentityname, custagparententityuuid, custagparentname, custagcornerstoneentityid, custagcustomerid, custagcustomeruuid, custagcustomerentityuuid, custagcustomername, custagnameuuid, custagname, custagdisplaynameuuid, custagdisplayname, custagtype, custagcreateddate, custagmodifieddate, custagstartdate, custagenddate, custagexternalid, custagexternalsystementityuuid, custagexternalsystemenname, custagmodifiedbyuuid, custagabbreviationentityuuid, custagabbreviationname, custagorder, systagsenddeleted, systagsenddrafts, systagsendinactive)
  WHERE (custag.custagownerentityuuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.alltag IS '
## language
';

GRANT INSERT ON api.alltag TO authenticated;
GRANT SELECT ON api.alltag TO authenticated;
GRANT UPDATE ON api.alltag TO authenticated;

-- Type: VIEW ; Name: entity_instance_field_ux; Owner: tendreladmin

CREATE OR REPLACE VIEW api.entity_instance_field_ux AS
 SELECT entityfieldinstanceuuid AS id,
    entityfieldinstanceentityinstanceentityuuid AS instance,
    entityfieldinstanceentityinstanceentityname AS instance_name,
    entityfieldinstanceownerentityuuid AS owner,
    entityfieldinstanceownerentityname AS owner_name,
    entityfieldinstancetemplateentityuuid AS template,
    entityfieldinstancetemplateentityname AS template_name,
    entityfieldinstancetemplateprimary AS template_primary,
    entityfieldinstanceentityfieldentityuuid AS field,
    entityfieldinstancetranslatedname AS field_name,
    entityfieldinstancetypeentityuuid AS type,
    entityfieldinstancetypename AS type_name,
    entityfieldinstanceentitytypeentityuuid AS entity_type,
    entityfieldinstanceentitytypename AS entity_type_name,
    entityfieldinstancevalue AS value,
    entityfieldinstancevaluelanguagemasteruuid AS value_id,
    entityfieldinstanceorder AS "order",
    entityfieldinstanceformatentityuuid AS format,
    entityfieldinstanceformatname AS format_name,
    entityfieldinstancewidgetentityuuid AS widget,
    entityfieldinstancewidgetname AS widget_name,
    entityfieldinstanceiscalculated AS _calculated,
    entityfieldinstanceiseditable AS _editable,
    entityfieldinstanceisvisible AS _visible,
    entityfieldinstanceisrequired AS _required,
    entityfieldinstanceisprimary AS _primary,
    entityfieldinstancetranslate AS _translate,
    entityfieldinstancedeleted AS _deleted,
    entityfieldinstancedraft AS _draft,
    entityfieldinstanceactive AS _active,
    entityfieldinstancestartdate AS activated_at,
    entityfieldinstanceenddate AS deactivated_at,
    entityfieldinstancecreateddate AS created_at,
    entityfieldinstancemodifieddate AS updated_at,
    entityfieldinstancemodifiedbyuuid AS modified_by
   FROM ( SELECT crud_entityfieldinstance_read_api.languagetranslationtypeentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstanceuuid,
            crud_entityfieldinstance_read_api.entityfieldinstanceentityinstanceentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstanceentityinstanceentityname,
            crud_entityfieldinstance_read_api.entityfieldinstanceownerentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstanceownerentityname,
            crud_entityfieldinstance_read_api.entityfieldinstancetemplateentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstancetemplateentityname,
            crud_entityfieldinstance_read_api.entityfieldinstancetemplateprimary,
            crud_entityfieldinstance_read_api.entityfieldinstanceentityfieldentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstancetranslatedname,
            crud_entityfieldinstance_read_api.entityfieldinstancetypeentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstancetypename,
            crud_entityfieldinstance_read_api.entityfieldinstanceentitytypeentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstanceentitytypename,
            crud_entityfieldinstance_read_api.entityfieldinstanceformatentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstanceformatname,
            crud_entityfieldinstance_read_api.entityfieldinstancewidgetentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstancewidgetname,
            crud_entityfieldinstance_read_api.entityfieldinstancevalue,
            crud_entityfieldinstance_read_api.entityfieldinstancevaluelanguagemasteruuid,
            crud_entityfieldinstance_read_api.entityfieldinstanceorder,
            crud_entityfieldinstance_read_api.entityfieldinstanceiscalculated,
            crud_entityfieldinstance_read_api.entityfieldinstanceiseditable,
            crud_entityfieldinstance_read_api.entityfieldinstanceisvisible,
            crud_entityfieldinstance_read_api.entityfieldinstanceisrequired,
            crud_entityfieldinstance_read_api.entityfieldinstanceisprimary,
            crud_entityfieldinstance_read_api.entityfieldinstancetranslate,
            crud_entityfieldinstance_read_api.entityfieldinstancecreateddate,
            crud_entityfieldinstance_read_api.entityfieldinstancemodifieddate,
            crud_entityfieldinstance_read_api.entityfieldinstancestartdate,
            crud_entityfieldinstance_read_api.entityfieldinstanceenddate,
            crud_entityfieldinstance_read_api.entityfieldinstancemodifiedbyuuid,
            crud_entityfieldinstance_read_api.entityfieldinstancerefid,
            crud_entityfieldinstance_read_api.entityfieldinstancerefuuid,
            crud_entityfieldinstance_read_api.entityfieldinstancevaluelanguagetypeentityuuid,
            crud_entityfieldinstance_read_api.entityfieldinstancedeleted,
            crud_entityfieldinstance_read_api.entityfieldinstancedraft,
            crud_entityfieldinstance_read_api.entityfieldinstanceactive
           FROM entity.crud_entityfieldinstance_read_api(ARRAY( SELECT util_get_onwership.get_ownership
                   FROM _api.util_get_onwership() util_get_onwership(get_ownership)), NULL::uuid, NULL::uuid, true, NULL::boolean, NULL::boolean, NULL::boolean, ( SELECT util_user_details.get_languagetypeentityuuid
                   FROM _api.util_user_details() util_user_details(get_workerinstanceid, get_workerinstanceuuid, get_languagetypeid, get_languagetypeuuid, get_languagetypeentityuuid))) crud_entityfieldinstance_read_api(languagetranslationtypeentityuuid, entityfieldinstanceuuid, entityfieldinstanceentityinstanceentityuuid, entityfieldinstanceentityinstanceentityname, entityfieldinstanceownerentityuuid, entityfieldinstanceownerentityname, entityfieldinstancetemplateentityuuid, entityfieldinstancetemplateentityname, entityfieldinstancetemplateprimary, entityfieldinstanceentityfieldentityuuid, entityfieldinstancetranslatedname, entityfieldinstancetypeentityuuid, entityfieldinstancetypename, entityfieldinstanceentitytypeentityuuid, entityfieldinstanceentitytypename, entityfieldinstanceformatentityuuid, entityfieldinstanceformatname, entityfieldinstancewidgetentityuuid, entityfieldinstancewidgetname, entityfieldinstancevalue, entityfieldinstancevaluelanguagemasteruuid, entityfieldinstanceorder, entityfieldinstanceiscalculated, entityfieldinstanceiseditable, entityfieldinstanceisvisible, entityfieldinstanceisrequired, entityfieldinstanceisprimary, entityfieldinstancetranslate, entityfieldinstancecreateddate, entityfieldinstancemodifieddate, entityfieldinstancestartdate, entityfieldinstanceenddate, entityfieldinstancemodifiedbyuuid, entityfieldinstancerefid, entityfieldinstancerefuuid, entityfieldinstancevaluelanguagetypeentityuuid, entityfieldinstancedeleted, entityfieldinstancedraft, entityfieldinstanceactive)) entityfieldinstance;


GRANT INSERT ON api.entity_instance_field_ux TO authenticated;
GRANT SELECT ON api.entity_instance_field_ux TO authenticated;
GRANT UPDATE ON api.entity_instance_field_ux TO authenticated;

-- Type: VIEW ; Name: language; Owner: tendreladmin

CREATE OR REPLACE VIEW api.language AS
 SELECT systagentityuuid AS id,
    systagid AS legacy_id,
    systaguuid AS legacy_uuid,
    systagnameuuid AS name_id,
    systagname AS name,
    systagdisplaynameuuid AS displayname_id,
    systagdisplayname AS displayname,
    systagtype AS type,
    systagcreateddate AS created_at,
    systagmodifieddate AS modified_at,
    systagstartdate AS activated_at,
    systagenddate AS deactivated_at,
    systagmodifiedbyuuid AS modified_by,
    systagorder AS _order,
    systagsenddeleted AS _deleted,
    systagsenddrafts AS _draft,
    systagsendinactive AS _active
   FROM entity.crud_systag_read_full('f90d618d-5de7-4126-8c65-0afb700c6c61'::uuid, NULL::uuid, NULL::uuid, '580f6ee2-42ca-4a5b-9e18-9ea0c168845a'::uuid, false, NULL::boolean, NULL::boolean, NULL::boolean, 'bcbe750d-1b3b-4e2b-82ec-448bb8b116f9'::uuid) systag(languagetranslationtypeentityuuid, systagid, systaguuid, systagentityuuid, systagcustomerid, systagcustomeruuid, systagcustomerentityuuid, systagcustomername, systagnameuuid, systagname, systagdisplaynameuuid, systagdisplayname, systagtype, systagcreateddate, systagmodifieddate, systagstartdate, systagenddate, systagexternalid, systagexternalsystementityuuid, systagexternalsystementname, systagmodifiedbyuuid, systagabbreviationentityuuid, systagabbreviationname, systagparententityuuid, systagparentname, systagorder, systagsenddeleted, systagsenddrafts, systagsendinactive);


GRANT INSERT ON api.language TO authenticated;
GRANT SELECT ON api.language TO authenticated;
GRANT UPDATE ON api.language TO authenticated;

-- Type: VIEW ; Name: runtime_upload; Owner: tendreladmin

CREATE OR REPLACE VIEW api.runtime_upload AS
 SELECT uploaduuid AS id,
    uploadowneruuid AS owner_tendrel_id,
    uploadbatchid AS batch_id,
    uploadrecordid AS record_id,
    uploadpreviousrecordid AS previous_record_id,
    uploadparentuuid AS parent_location_tendrel_id,
    uploadparentname AS parent_location_name,
    uploadlocationuuid AS location_tendrel_id,
    uploadlocationname AS location_name,
    uploadstartdate AS start_date,
    uploadenddate AS end_date,
    uploadduration AS duration,
    uploademployee AS worker,
    uploademployeeid AS worker_id,
    uploademployeetendreluuid AS worker_tendrel_id,
    uploadactivityuuid AS work_tendrel_id,
    uploadactivityname AS work_name,
    uploadreasoncodeuuid AS reasoncode_tendrel_id,
    uploadreasoncodename AS reasoncode_name,
    uploadunitrunoutput AS run_output,
    uploadunitrejectcount AS reject_count,
    uploadresultuuid AS result_tendrel_id,
    uploadresultname AS result_name,
    uploadunitvalue AS value,
    uploadrunid AS run_id
   FROM entity.runtime_upload_staging
  WHERE (uploadowneruuid IN ( SELECT util_get_onwership.get_ownership
           FROM _api.util_get_onwership() util_get_onwership(get_ownership)));

COMMENT ON VIEW api.runtime_upload IS '
# 📘 API Specification – `POST /runtime_upload`

## Overview

The `runtime_upload` endpoint records machine-level runtime activity in Tendrel’s execution system. Each entry corresponds to a stateful unit of time — tracked per machine, per location — and optionally unified via a `batch_id` that spans multiple machines or runs.

- **Endpoint**: `POST /runtime_upload`  
- **Method**: `POST`  
- **Content-Type**: `application/json`  
- **Authentication**: Bearer JWT

---

## 🧭 Runtime Concepts & Relationships

| Concept     | Description |
|-------------|-------------|
| **Run**     | A continuous operational span at a **specific machine or location** |
| **Batch**   | A high-level grouping that spans **multiple Runs**, either across: <ul><li>Multiple Runs at the same location</li><li>Runs at different locations</li></ul> |
| **Record**  | Any `Run`, `Pulse`, `Downtime`, or `Idle Time` event |
| **Worker**  | Operator or machine controller performing the action |

> A `Run` is **machine-specific**, and identified by its `record_id`. A `batch_id` is **optional**, but allows you to **group runs** across one or many locations into a cohesive production block.

---

## 🔁 Record Lifecycle

| Type         | Start/End Required? | Can Be In-Progress? | Auto-Closable? | Notes |
|--------------|---------------------|----------------------|----------------|-------|
| `Run`        | `start` required; `end` optional | ✅ Yes | ✅ Yes (same `record_id`) | Scoped to 1 location |
| `Pulse`      | Both `start` and `end` required | ❌ No | ❌ No | Must be complete; supports `output` and `reject` |
| `Downtime`   | `start` required; `end` optional | ✅ Yes | ✅ Yes | Represents machine down state |
| `Idle Time`  | `start` required; `end` optional | ✅ Yes | ✅ Yes | Machine is on, but idle |

---

## 🔒 Logical Constraints

| Rule | Applies To |
|------|------------|
| `Pulse`, `Downtime`, `Idle Time` must occur within a valid `Run` (`run_id` must reference a `Run.record_id`) | All non-Run records |
| No overlap between `Pulse`, `Downtime`, and `Idle Time` per `Run` | Enforced by `run_id` |
| A `Run` is tied to a single location | All `Run` records |
| `batch_id` is used to **group multiple Runs**, across one or many locations | Optional field, highly recommended for full traceability |

---

## ✨ Auto-Creation Rules

The platform will automatically create referenced records for:

- `location_name`
- `worker_id`
- `reasoncode_name`

All other `_tendrel_id` values must refer to existing entities.

---

## 🌍 Parent Location

If `parent_location_tendrel_id` is not specified, the platform will **automatically associate the location to the site-level location**.

---

## 🧾 Required Fields

| Field              | Type   | Notes |
|-------------------|--------|-------|
| `owner_tendrel_id`| UUID   | Owning org or tenant |
| `run_id`          | string | For `Run`, equals `record_id`; for others, must reference a valid `Run.record_id` |
| `record_id`       | string | Unique ID for this runtime entry |
| `location_name`   | string | Auto-creates location if needed |
| `start`           | string | Required for all |
| `worker_id`       | string | Auto-creates worker if new |
| `work_name`       | string | Must be one of: `Run`, `Pulse`, `Downtime`, `Idle Time` |

---

## 🧩 Optional Fields

| Field                        | Type     | Notes |
|-----------------------------|----------|-------|
| `batch_id`                  | string   | Optional. Used to group related Runs across locations |
| `end`                       | string   | Required for `Pulse`; optional otherwise |
| `duration`                  | integer  | Optional, inferred from timestamps |
| `output`                    | integer  | For `Pulse` only |
| `reject`                    | integer  | For `Pulse` only |
| `id`                        | UUID     | DB-generated ID |
| `previous_record_id`        | string   | Optional sequence reference |
| `location_tendrel_id`       | UUID     | Must exist if supplied |
| `parent_location_tendrel_id`| UUID     | Optional, defaults to site |
| `worker`                    | string   | Display label for worker |
| `worker_tendrel_id`         | UUID     | Internal worker reference |
| `work_tendrel_id`           | UUID     | Internal work definition |
| `reasoncode_tendrel_id`     | UUID     | Must exist if used |
| `reasoncode_name`           | string   | Auto-created if new |
| `result_tendrel_id`         | UUID     | Optional |
| `result_name`               | string   | Optional |
| `value`                     | string   | Any feedback or note |

---

## 🧠 Example: Multi-Run Batch Across Two Locations

### Run at Machine A

```json
{
  "record_id": "run-001",
  "run_id": "run-001",
  "batch_id": "batch-789",
  "owner_tendrel_id": "org-001",
  "location_name": "Press Line A",
  "start": "2025-05-20T08:00:00Z",
  "worker_id": "worker-001",
  "work_name": "Run"
}
```

### Run at Machine B

```json
{
  "record_id": "run-002",
  "run_id": "run-002",
  "batch_id": "batch-789",
  "owner_tendrel_id": "org-001",
  "location_name": "Press Line B",
  "start": "2025-05-20T08:05:00Z",
  "worker_id": "worker-002",
  "work_name": "Run"
}
```

> These two `Run` records are tied together via `batch_id` but occur at different machines.

---

## ✅ Summary

| Topic | Behavior |
|-------|----------|
| `Run` is machine/location-specific | ✅ |
| `batch_id` groups Runs across machines or times | ✅ |
| `Pulse` is atomic and complete-only | ✅ |
| `Downtime` / `Idle Time` can be in-progress | ✅ |
| Only `location_name`, `worker_id`, `reasoncode_name` are auto-created | ✅ |
| Parent defaults to site if unset | ✅ |

';

CREATE TRIGGER create_runtime_upload_tg INSTEAD OF INSERT ON api.runtime_upload FOR EACH ROW EXECUTE FUNCTION api.create_runtime_upload();

GRANT INSERT ON api.runtime_upload TO authenticated;
GRANT SELECT ON api.runtime_upload TO authenticated;
GRANT UPDATE ON api.runtime_upload TO authenticated;

-- Type: FUNCTION ; Name: api.delete_custag(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_custag(owner uuid, id uuid)
 RETURNS SETOF api.custag
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.

select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_custag_delete(
	      create_custagownerentityuuid := owner,
	      create_custagentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
end if;

  return query
    select *
    from api.custag t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_custag(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_custag(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_custag(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_customer(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_customer(owner uuid, id uuid)
 RETURNS SETOF api.customer
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.
  
select get_workerinstanceid
into ins_userid
from _api.util_user_details();

--if (select owner in (select * from _api.util_get_onwership()) )
--	then  
	  call entity.crud_customer_delete(
	      create_customerownerentityuuid := owner,
	      create_customerentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
--	else
--		return;  -- need an exception here
--end if;

  return query
    select *
    from api.customer t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_customer(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_customer(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_customer(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_customer_requested_language(uuid,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_customer_requested_language(owner uuid, id text)
 RETURNS SETOF api.customer_requested_language
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
	templanguagetypeid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.
  
select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
		call entity.crud_customerrequestedlanguage_delete(
			create_customerownerentityuuid := owner,
			create_language_id := id,
			create_modifiedbyid := ins_userid
	);
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.customer_requested_language t
    where t.owner = $1  and 
		t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_customer_requested_language(uuid,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_customer_requested_language(uuid,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_customer_requested_language(uuid,text) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_entity_description(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_entity_description(owner uuid, id uuid)
 RETURNS SETOF api.entity_description
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.

  
select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_entitydescription_delete(
	      create_entitydescriptionownerentityuuid := owner,
	      create_entitydescriptionentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.entity_description t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_entity_description(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_entity_description(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_entity_description(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_entity_field(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_entity_field(owner uuid, id uuid)
 RETURNS SETOF api.entity_field
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.
select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_entityfield_delete(
	      create_entityfieldownerentityuuid := owner,
	      create_entityfieldentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.entity_field t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_entity_field(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_entity_field(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_entity_field(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_entity_instance(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_entity_instance(owner uuid, id uuid)
 RETURNS SETOF api.entity_instance
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.
select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_entityinstance_delete(
	      create_entityinstanceownerentityuuid := owner,
	      create_entityinstanceentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.entity_instance t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_entity_instance(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_entity_instance(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_entity_instance(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_entity_instance_field(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_entity_instance_field(owner uuid, id uuid)
 RETURNS SETOF api.entity_instance_field
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.

select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_entityfieldinstance_delete(
	      create_entityfieldinstanceownerentityuuid := owner,
	      create_entityfieldinstanceentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;	  

  return query
    select *
    from api.entity_instance_field t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_entity_instance_field(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_entity_instance_field(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_entity_instance_field(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_entity_instance_file(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_entity_instance_file(owner uuid, id uuid)
 RETURNS SETOF api.entity_instance_file
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.

select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_entityfileinstance_delete(
	      create_entityfileinstanceownerentityuuid := owner,
	      create_entityfileinstanceentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.entity_instance_file t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_entity_instance_file(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_entity_instance_file(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_entity_instance_file(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_entity_tag(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_entity_tag(owner uuid, id uuid)
 RETURNS SETOF api.entity_tag
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.

select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_entitytag_delete(
	      create_entitytagownerentityuuid := owner,
	      create_entitytagentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.entity_tag t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_entity_tag(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_entity_tag(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_entity_tag(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_entity_template(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_entity_template(owner uuid, id uuid)
 RETURNS SETOF api.entity_template
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.
select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_entitytemplate_delete(
	      create_entitytemplateownerentityuuid := owner,
	      create_entitytemplateentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.entity_template t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_entity_template(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_entity_template(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_entity_template(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_location(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_location(owner uuid, id uuid)
 RETURNS SETOF api.location
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.

select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_location_delete(
	      create_locationownerentityuuid := owner,
	      create_locationentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.location t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_location(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_location(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_location(uuid,uuid) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_reason_code(uuid,uuid,text,text); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_reason_code(owner uuid, id uuid, work_template_constraint text, work_template text)
 RETURNS SETOF api.reason_code
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin

select get_workerinstanceid
into ins_userid
from _api.util_user_details();

-- NEED TO ADD MORE CONDITIONS.  
-- DO WE ALLOW THE CONSTRAINT TO BE DELETED OR JUST THE CUSTAG TO BE DEACTIVATED.
-- VERSION BELOW JUST DEACTIVATES THE CUSTAG, BUT THAT IS FOR ALL TEMPLATES.

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_custag_delete(
	      create_custagownerentityuuid := owner,
	      create_custagentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
end if;

  return query
    select *
    from api.reason_code t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_reason_code(uuid,uuid,text,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_reason_code(uuid,uuid,text,text) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_reason_code(uuid,uuid,text,text) TO authenticated;

-- Type: FUNCTION ; Name: api.delete_systag(uuid,uuid); Owner: tendreladmin

CREATE OR REPLACE FUNCTION api.delete_systag(owner uuid, id uuid)
 RETURNS SETOF api.systag
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
	ins_userid bigint;
begin
  -- TODO: I wonder what we should do here. Do we:
  -- (a) Grant access to the entity schema to authenticated?
  -- (b) Use SECURITY DEFINER functions
  -- The downside of (a) is broader permissions, while of (b) is we lose RLS.
  -- I lean towards (a) at the moment.

select get_workerinstanceid
into ins_userid
from _api.util_user_details();

if (select owner in (select * from _api.util_get_onwership()) )
	then  
	  call entity.crud_systag_delete(
	      create_systagownerentityuuid := owner,
	      create_systagentityuuid := id,
	      create_modifiedbyid := ins_userid
	  );
	else
		return;  -- need an exception here
end if;

  return query
    select *
    from api.systag t
    where t.owner = $1 and t.id = $2
  ;

  return;
end 
$function$;


REVOKE ALL ON FUNCTION api.delete_systag(uuid,uuid) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION api.delete_systag(uuid,uuid) TO tendreladmin WITH GRANT OPTION;
GRANT EXECUTE ON FUNCTION api.delete_systag(uuid,uuid) TO authenticated;
ALTER TABLE entity.entitydescription ADD CONSTRAINT entitydescription_entityfield_fk
      FOREIGN KEY (entitydescriptionentityfieldentityduuid) REFERENCES entity.entityfield(entityfielduuid);

ALTER TABLE entity.entityfield ADD CONSTRAINT entityfield_entityfieldentitytemplateuuid_fkey
      FOREIGN KEY (entityfieldentitytemplateentityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid) ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplateparententityuuid_entitytemplate_fk
      FOREIGN KEY (entitytemplateparententityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid) NOT VALID;

ALTER TABLE entity.entitydescription ADD CONSTRAINT entitydescription_entitytemplate_fk
      FOREIGN KEY (entitydescriptionentitytemplateentityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid);

ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_entitytagentitytemplateentityuuid_fk
      FOREIGN KEY (entitytagentitytemplateentityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid) NOT VALID;

ALTER TABLE entity.entitydescription ADD CONSTRAINT entitydescription_workdescriptionmimetypeuuid_fk
      FOREIGN KEY (entitydescriptionmimetypeuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldcustomerentityuuid_enitityinstance_fk
      FOREIGN KEY (entityfieldownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldentityparenttypeentityuuid_entityinstance_fk
      FOREIGN KEY (entityfieldentityparenttypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldentitytypeentityuuid_entityinstance_fk
      FOREIGN KEY (entityfieldentitytypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldexternalsystementityuuid_entityinstance_fk
      FOREIGN KEY (entityfieldexternalsystementityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldformatentityuuid_entityinstance_fk
      FOREIGN KEY (entityfieldformatentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfield ADD CONSTRAINT entityfieldwidgetentityuuid_entityinstance_fk
      FOREIGN KEY (entityfieldwidgetentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstancecornerstoneentityuuid_fk
      FOREIGN KEY (entityinstancecornerstoneentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstancecustomerentityuuid_fk
      FOREIGN KEY (entityinstanceownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstanceentitytemplateentityuuid_fk
      FOREIGN KEY (entityinstanceentitytemplateentityuuid) REFERENCES entity.entitytemplate(entitytemplateuuid) NOT VALID;

ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstanceexternalsystementityuuid_fk
      FOREIGN KEY (entityinstanceexternalsystementityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstanceparententityuuid_fk
      FOREIGN KEY (entityinstanceparententityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstancesiteentityuuid_fk
      FOREIGN KEY (entityinstancesiteentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityinstance ADD CONSTRAINT entityinstance_entityinstancetypeentityuuid_fk
      FOREIGN KEY (entityinstancetypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_entitytagcustagentityuuid_fk
      FOREIGN KEY (entitytagcustagentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_entitytagentityinstanceentityuuid_fk
      FOREIGN KEY (entitytagentityinstanceentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entitytag ADD CONSTRAINT entitytag_entitytagownerentityuuid_fk
      FOREIGN KEY (entitytagownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplatecustomerentityuuid_entityinstance_fk
      FOREIGN KEY (entitytemplateownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplateexternalsystementityuuid_entityinstance_fk
      FOREIGN KEY (entitytemplateexternalsystementityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entitytemplate ADD CONSTRAINT entitytemplatetypeentityuuid_entityinstance_fk
      FOREIGN KEY (entitytemplatetypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstancecustomerentityuuid_fk
      FOREIGN KEY (entityfieldinstanceownerentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstanceentityfieldentityuuid_fk
      FOREIGN KEY (entityfieldinstanceentityfieldentityuuid) REFERENCES entity.entityfield(entityfielduuid) NOT VALID;

ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstanceentityinstanceentityuuid_fk
      FOREIGN KEY (entityfieldinstanceentityinstanceentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE entity.entityfieldinstance ADD CONSTRAINT efi_entityfieldinstancevaluelanguagetypeentityuuid_fk
      FOREIGN KEY (entityfieldinstancevaluelanguagetypeentityuuid) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;

ALTER TABLE workresultinstance ADD CONSTRAINT workresultinstance_workresultinstanceentityvalue_fk
      FOREIGN KEY (workresultinstanceentityvalue) REFERENCES entity.entityinstance(entityinstanceuuid) NOT VALID;


END;
